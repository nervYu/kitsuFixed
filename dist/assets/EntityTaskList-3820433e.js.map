{"version":3,"file":"EntityTaskList-3820433e.js","sources":["../../src/components/mixins/entity.js","../../src/components/pages/entities/EntityNews.vue","../../src/components/pages/entities/EntityPreviewFiles.vue","../../src/components/pages/entities/EntityTimeLogs.vue","../../src/components/lists/EntityTaskList.vue"],"sourcesContent":["import {\n  getFirstStartDate,\n  getLastEndDate,\n  parseDate,\n  parseSimpleDate\n} from '@/lib/time'\nimport moment from 'moment'\n\n/*\n * Common functions to shot, asset and edit pages.\n */\nexport const entityMixin = {\n  data () {\n    return {\n      currentSection: 'Casting',\n      zoomLevel: 1,\n      entityNavOptions: [\n        { label: 'Casting', value: 'casting' },\n        { label: 'Schedule', value: 'schedule' },\n        { label: 'Preview Files', value: 'preview-files' },\n        { label: 'Activity', value: 'activity' },\n        { label: 'Timelog', value: 'time-logs' }\n      ],\n      zoomOptions: [\n        { label: 'Week', value: 0 },\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 }\n      ]\n    }\n  },\n\n  created () {\n  },\n\n  mounted () {\n  },\n\n  beforeDestroy () {\n  },\n\n  computed: {\n\n    thumbnailPath () {\n      const previewId = this.currentEntity.preview_file_id\n      return `/api/pictures/originals/preview-files/${previewId}.png`\n    },\n\n    isPreview () {\n      return this.currentEntity &&\n        this.currentEntity.preview_file_id &&\n        this.currentEntity.preview_file_id.length > 0\n    },\n\n    currentTasks () {\n      const entity =\n        this.currentAsset ||\n        this.currentShot ||\n        this.currentEdit ||\n        this.currentSequence ||\n        this.currentEpisode\n      if (!entity || !entity.tasks) return []\n      return entity\n        ? entity\n          .tasks\n          .map(taskId => this.taskMap.get(taskId))\n          .filter(task => task)\n          .sort((a, b) => {\n            const taskTypeAPriority = this.getTaskTypePriority(a.task_type_id)\n            const taskTypeBPriority = this.getTaskTypePriority(b.task_type_id)\n            return taskTypeAPriority - taskTypeBPriority\n          })\n        : []\n    },\n\n    tasksStartDate () {\n      if (this.scheduleItems.length > 0 &&\n          this.scheduleItems[0].children.length > 0) {\n        return getFirstStartDate(this.scheduleItems[0].children)\n          .clone()\n          .add(-60, 'days')\n      } else {\n        return parseDate(this.currentProduction.start_date)\n      }\n    },\n\n    tasksEndDate () {\n      if (this.scheduleItems.length > 0 &&\n          this.scheduleItems[0].children.length > 0) {\n        return getLastEndDate(this.scheduleItems[0].children)\n          .clone()\n          .add(60, 'days')\n      } else {\n        return parseDate(this.currentProduction.end_date)\n      }\n    },\n\n    scheduleItems () {\n      let manDays = 0\n      const rootElement = {\n        avatar: false,\n        id: 'root',\n        name: 'Tasks',\n        color: '#888',\n        priority: 1,\n        expanded: true,\n        loading: false,\n        children: [],\n        editable: false\n      }\n      const limitStartDate = moment()\n      const children = this.currentTasks.map(task => {\n        const estimation = task.estimation\n        let startDate = limitStartDate.clone()\n        let endDate\n\n        if (!task.start_date && !task.real_start_date &&\n            !task.due_date && !task.end_date) return null\n\n        if (task.start_date) {\n          startDate = parseSimpleDate(task.start_date)\n        } else if (task.real_start_date) {\n          startDate = parseSimpleDate(task.real_start_date)\n        }\n\n        if (task.due_date) {\n          endDate = parseSimpleDate(task.due_date)\n        } else if (task.end_date) {\n          endDate = parseSimpleDate(task.end_date)\n        } else if (task.estimation) {\n          endDate = startDate.clone().add(estimation, 'days')\n        }\n\n        if (!endDate || endDate.isBefore(startDate)) {\n          endDate = startDate.clone().add(1, 'days')\n        }\n        if (estimation) manDays += task.estimation\n        const taskType = this.taskTypeMap.get(task.task_type_id)\n\n        return {\n          ...task,\n          name: taskType.name,\n          startDate: startDate,\n          endDate: endDate,\n          expanded: false,\n          loading: false,\n          man_days: estimation,\n          editable: false,\n          unresizable: false,\n          parentElement: rootElement,\n          color: taskType.color,\n          children: []\n        }\n      }).filter(c => c !== null)\n      let rootStartDate = moment()\n      let rootEndDate = moment().add(1, 'days')\n      if (children.length > 0) {\n        rootStartDate = getFirstStartDate(children)\n        rootEndDate = getLastEndDate(children)\n      }\n      Object.assign(rootElement, {\n        children: children,\n        startDate: rootStartDate,\n        endDate: rootEndDate,\n        man_days: manDays\n      })\n      return [rootElement]\n    }\n  },\n\n  methods: {\n    changeTab (tab) {\n      this.selectedTab = tab\n    },\n\n    onEditClicked () {\n      this.modals.edit = true\n    },\n\n    onTaskSelected (task) {\n      if (!this.currentTask || this.currentTask.id !== task.id) {\n        this.currentTask = task\n      } else {\n        this.currentTask = null\n      }\n    }\n  },\n\n  watch: {\n    currentSection () {\n      this.$router.push({\n        query: { section: this.currentSection }\n      })\n      const schedule = this.$refs['schedule-widget']\n      if (this.currentSection === 'schedule' && schedule) {\n        schedule.scrollToToday()\n      }\n    }\n  }\n}\n","<template>\n  <div class=\"mt1 news flexcolumn\">\n    <div class=\"has-text-centered\" v-if=\"isLoading\">\n      <spinner />\n    </div>\n    <div class=\"news\" v-else-if=\"newsList.length > 0\">\n      <div class=\"timeline\">\n        <div\n          :key=\"'news-' + news.id\"\n          v-for=\"news in newsList\"\n        >\n          <div class=\"news-line timeline-entry flexrow\">\n            <span :class=\"{\n              dot: true,\n              red: hasRetakeValue(news),\n              green: hasDoneValue(news)\n            }\"></span>\n            <span class=\"date flexrow-item\">\n              {{ formatFullDate(news.created_at) }}\n            </span>\n\n            <div class=\"flexrow-item task-type-wrapper\">\n              <task-type-name\n                class=\"task-type-name\"\n                :task-type=\"buildTaskTypeFromNews(news)\"\n                :production-id=\"currentProduction.id\"\n                :is-static=\"true\"\n              />\n            </div>\n\n            <div class=\"flexrow-item validation-wrapper\">\n              <validation-tag\n                class=\"validation-tag\"\n                :task=\"taskMap.get(news.task_id)\"\n                :is-static=\"true\"\n                :thin=\"!news.change\"\n                />\n              </div>\n\n              <div class=\"flexrow-item comment-content\">\n                <div>\n                  <div class=\"news-info flexrow\">\n                    <people-avatar\n                      class=\"flexrow-item\"\n                      :person=\"personMap.get(news.author_id)\"\n                      :size=\"30\"\n                      :font-size=\"14\"\n                      :is-link=\"false\"\n                      v-if=\"personMap.get(news.author_id)\"\n                    />\n                    <span\n                      class=\"explaination flexrow-item\"\n                    >\n                      <span class=\"strong person-name\">\n                        {{ personName(news) }}\n                      </span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n    </div>\n    <div v-else>\n      {{ $t('entities.news.no_news') }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport moment from 'moment-timezone'\nimport { formatListMixin } from '@/components/mixins/format'\nimport { timeMixin } from '@/components/mixins/time'\n\nimport Spinner from '@/components/widgets/Spinner'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport TaskTypeName from '@/components/widgets/TaskTypeName'\nimport ValidationTag from '@/components/widgets/ValidationTag'\n\nexport default {\n  name: 'entity-news',\n  mixins: [formatListMixin, timeMixin],\n  components: {\n    PeopleAvatar,\n    Spinner,\n    TaskTypeName,\n    ValidationTag\n  },\n\n  data () {\n    return {\n      isLoading: false,\n      newsList: []\n    }\n  },\n\n  props: {\n    entity: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  mounted () {\n    if (!this.entity) return\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'personMap',\n      'taskMap',\n      'taskTypeMap',\n      'taskStatusMap',\n      'timezone'\n    ])\n  },\n\n  methods: {\n    ...mapActions([\n      'getEntityNews'\n    ]),\n\n    buildTaskTypeFromNews (news) {\n      return {\n        ...this.taskTypeMap.get(news.task_type_id),\n        episode_id: news.episode_id\n      }\n    },\n\n    getTaskType (news) {\n      const task = this.taskMap.get(news.task_id)\n      return this.taskTypeMap.get(task.task_type_id)\n    },\n\n    hasRetakeValue (news) {\n      const taskStatus = this.taskStatusMap.get(news.task_status_id)\n      return taskStatus ? news.change && taskStatus.is_retake : false\n    },\n\n    hasDoneValue (news) {\n      const taskStatus = this.taskStatusMap.get(news.task_status_id)\n      return taskStatus ? news.change && taskStatus.is_done : false\n    },\n\n    formatTime (date) {\n      const utcDate = moment.tz(date, 'UTC').tz(this.timezone)\n      return utcDate.format('HH:mm')\n    },\n\n    personName (news) {\n      const person = this.personMap.get(news.author_id)\n      return person ? person.full_name : ''\n    },\n\n    reset () {\n      this.isLoading = true\n      this.getEntityNews(this.entity.id)\n        .then(data => {\n          this.newsList = data.data\n          this.isLoading = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.newsList = []\n          this.isLoading = false\n        })\n    }\n  },\n\n  watch: {\n    entity () {\n      if (this.entity) this.reset()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.news {\n  overflow: auto;\n}\n\n.timeline-wrapper {\n  margin: auto;\n  max-width: 875px;\n  padding-top: 25px;\n  padding-left: 25px;\n  padding-right: 25px;\n  background: $white;\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);\n}\n\n.timeline {\n  border-left: 4px solid $blue-light;\n  margin-left: 8px;\n  padding-bottom: 2em;\n\n  .subtitle {\n    margin-top: 2em;\n  }\n\n  .timeline-entry {\n    position: relative;\n\n    .dot {\n      position: absolute;\n      display: block;\n      left: -9px;\n      background: $blue-light;\n      width: 14px;\n      height: 14px;\n      border-radius: 16px;\n      z-index: 10;\n\n      &.red {\n        background: $red;\n      }\n\n      &.green {\n        background: $light-green;\n      }\n    }\n  }\n\n  .task-type-wrapper {\n    min-width: 100px;\n  }\n\n  .validation-wrapper {\n    min-width: 60px;\n  }\n\n  .date {\n    min-width: 30px;\n  }\n\n  .selected .date {\n    color: $dark-grey;\n  }\n\n  .explaination,\n  .explaination span {\n    display: inline;\n\n    &.entity-thumbnail {\n      display: inline-block;\n    }\n  }\n}\n\n.date {\n  margin-left: 0.5em;\n  margin-right: 3em;\n  font-size: 0.8em;\n  color: $grey;\n}\n\n.news-info {\n  vertical-align: middle;\n\n  span,\n  a {\n    vertical-align: middle;\n    display: inline-flex;\n    align-items: center;\n  }\n}\n\n.news-line {\n  padding: 0.5em;\n}\n</style>\n","<template>\n  <div class=\"mt1 flexcolumn wrapper preview-files\">\n    <div class=\"has-text-centered\" v-if=\"isLoading\">\n      <spinner />\n    </div>\n    <div v-else-if=\"previewFiles.length > 0\">\n      <table class=\"datatable\">\n        <thead class=\"datatable-head\">\n          <tr class=\"datatable-row-header\">\n            <th class=\"thumbnail\">\n            </th>\n            <th class=\"type\">\n              {{ $t('entities.preview_files.task_type') }}\n            </th>\n            <th class=\"revision\">\n              {{ $t('entities.preview_files.revision') }}\n            </th>\n            <th class=\"original-name\">\n              {{ $t('entities.preview_files.original_file_name') }}\n            </th>\n            <th class=\"extension\">\n              {{ $t('entities.preview_files.extension') }}\n            </th>\n            <th class=\"size\">\n              {{ $t('entities.preview_files.size') }}\n            </th>\n            <th class=\"status\">\n              {{ $t('entities.preview_files.status') }}\n            </th>\n            <th class=\"uploader\">\n              {{ $t('entities.preview_files.uploader') }}\n            </th>\n            <th class=\"person\"></th>\n            <th class=\"end-cell\"></th>\n          </tr>\n        </thead>\n      </table>\n      <table class=\"datatable\" style=\"overflow: auto;\">\n        <tbody class=\"datatable-body\">\n          <tr\n            :key=\"previewFile.id\"\n            class=\"datatable-row\"\n            v-for=\"previewFile in previewFiles\"\n          >\n            <td\n              class=\"thumbnail\"\n            >\n              <entity-thumbnail\n                class=\"preview-thumbnail\"\n                :preview-file-id=\"previewFile.id\"\n                :empty-width=\"60\"\n                :width=\"60\"\n              />\n            </td>\n\n            <task-type-name\n              class=\"type\"\n              :task-type=\"getTaskType(previewFile)\"\n              :production-id=\"currentProduction.id\"\n            />\n            <td class=\"revision\">\n              {{ previewFile.revision }}\n            </td>\n            <td class=\"original-name\">\n              {{ previewFile.original_name }}\n            </td>\n            <td class=\"extension\">\n              {{ previewFile.extension }}\n            </td>\n            <td class=\"size\">\n              {{ renderFileSize(previewFile.file_size) }}\n            </td>\n            <td class=\"status\">\n              {{ previewFile.validation_status }}\n            </td>\n\n            <people-name-cell\n              class=\"person\"\n              :person=\"personMap.get(previewFile.person_id)\"\n            />\n            <td class=\"download\">\n              <a\n                class=\"button flexrow-item\"\n                :href=\"getDownloadPath(previewFile.id)\"\n                :title=\"$t('playlists.actions.download_file')\"\n              >\n                <download-icon class=\"icon is-small\" />\n              </a>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div v-else>\n      {{ $t('entities.preview_files.no_preview_files') }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { DownloadIcon } from 'vue-feather-icons'\nimport { renderFileSize } from '@/lib/render'\nimport EntityThumbnail from '@/components/widgets/EntityThumbnail'\nimport PeopleNameCell from '@/components/cells/PeopleNameCell'\nimport Spinner from '@/components/widgets/Spinner'\nimport TaskTypeName from '@/components/cells/TaskTypeName'\n\nexport default {\n  name: 'entity-preview-files',\n  components: {\n    DownloadIcon,\n    EntityThumbnail,\n    PeopleNameCell,\n    Spinner,\n    TaskTypeName\n  },\n\n  data () {\n    return {\n      isLoading: false,\n      previewFiles: []\n    }\n  },\n\n  props: {\n    entity: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  mounted () {\n    if (!this.entity) return\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'personMap',\n      'taskMap',\n      'taskTypeMap'\n    ])\n  },\n\n  methods: {\n    ...mapActions([\n      'getEntityPreviewFiles'\n    ]),\n\n    getTaskType (previewFile) {\n      const task = this.taskMap.get(previewFile.task_id)\n      return this.taskTypeMap.get(task.task_type_id)\n    },\n\n    getDownloadPath (previewFileId) {\n      const type = this.isMovie ? 'movies' : 'pictures'\n      return `/api/${type}/originals/preview-files/` +\n             `${previewFileId}/download`\n    },\n\n    renderFileSize,\n\n    reset () {\n      this.isLoading = true\n      this.getEntityPreviewFiles(this.entity.id)\n        .then(previewFiles => {\n          this.previewFiles = previewFiles\n          this.isLoading = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.previewFiles = []\n          this.isLoading = false\n        })\n    }\n  },\n\n  watch: {\n    entity () {\n      if (this.entity) this.reset()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.datatable-body {\n  overflow-y: auto;\n}\n\n.thumbnail { padding-top: 10px; width: 80px; }\n.type {  width: 150px; }\n.revision { width: 80px; }\n.original-name { width: 300px; }\n.extension { width: 80px; }\n.size { width: 50px; }\n.status { width: 80px; }\n.download { width: 40px; }\n\n.preview-files {\n  overflow-y: auto;\n}\n.dark .preview-files.wrapper { background: transparent; }\n\n.preview-thumbnail {\n  cursor: pointer;\n  border-radius: 4px;\n}\n\n.datatable-row-header::after {\n  display: none;\n}\n</style>\n","<template>\n  <div class=\"mt1 wrapper time-logs\">\n    <div class=\"has-text-centered\" v-if=\"isLoading\">\n      <spinner />\n    </div>\n    <div v-else-if=\"logs.length > 0\">\n      <table class=\"datatable\">\n        <thead class=\"datatable-head\">\n          <tr class=\"datatable-row-header\">\n            <th class=\"date\">\n              {{ $t('main.date') }}\n            </th>\n            <th class=\"person\">\n              {{ $t('main.person') }}\n            </th>\n            <th class=\"type\">\n              {{ $t('entities.preview_files.task_type') }}\n            </th>\n            <th class=\"duration\">\n              {{ $t('tasks.fields.duration') }}\n            </th>\n            <th class=\"end-cell\"></th>\n          </tr>\n        </thead>\n      </table>\n      <table class=\"datatable\">\n        <tbody class=\"datatable-body\">\n          <tr\n            :key=\"log.id\"\n            class=\"datatable-row\"\n            v-for=\"log in logs\"\n          >\n            <td class=\"date\">\n              {{ formatSimpleDate(log.date) }}\n            </td>\n            <people-name-cell\n              class=\"person\"\n              :person=\"personMap.get(log.person_id)\"\n            />\n            <task-type-name\n              class=\"type\"\n              :task-type=\"getTaskType(log)\"\n              :production-id=\"currentProduction.id\"\n            />\n            <td class=\"duration\">\n              {{ formatDuration(log.duration) }}\n            </td>\n            <td class=\"end-cell\"></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div v-else>\n      {{ $t('entities.logs.no_logs') }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { formatListMixin } from '@/components/mixins/format'\nimport PeopleNameCell from '@/components/cells/PeopleNameCell'\nimport Spinner from '@/components/widgets/Spinner'\nimport TaskTypeName from '@/components/cells/TaskTypeName'\n\nexport default {\n  name: 'entity-time-logs',\n  mixins: [formatListMixin],\n  components: {\n    PeopleNameCell,\n    Spinner,\n    TaskTypeName\n  },\n\n  props: {\n    entity: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data () {\n    return {\n      logs: [],\n      isLoading: false\n    }\n  },\n\n  mounted () {\n    if (!this.entity) return\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'personMap',\n      'taskMap',\n      'taskTypeMap'\n    ])\n  },\n\n  methods: {\n    ...mapActions([\n      'getEntityTimeLogs'\n    ]),\n\n    getTaskType (log) {\n      const task = this.taskMap.get(log.task_id)\n      return this.taskTypeMap.get(task.task_type_id)\n    },\n\n    reset () {\n      this.isLoading = true\n      this.getEntityTimeLogs(this.entity.id)\n        .then(logs => {\n          this.logs = logs\n          this.isLoading = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.logs = []\n          this.isLoading = false\n        })\n    }\n  },\n\n  watch: {\n    entity () {\n      if (this.entity) this.reset()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.date { width: 100px; }\n.person { width: 200px; }\n.type { width: 150px; }\n.duration { width: 50px; }\n\n.time-logs {\n  overflow-y: auto;\n}\n\n.dark .wrapper.time-logs {\n  background: transparent;\n}\n\n.datatable-row-header::after {\n  display: none;\n}\n</style>\n","<template>\n<div class=\"data-list\">\n\n  <div>\n    <table class=\"datatable\" ref=\"headerWrapper\">\n      <thead class=\"datatable-head\">\n        <tr class=\"datatable-row-header\">\n          <th class=\"type\">\n            {{ $t('tasks.fields.task_type') }}\n          </th>\n          <th class=\"status\">\n            {{ $t('tasks.fields.task_status') }}\n          </th>\n          <th class=\"estimation\">\n            {{ $t('tasks.fields.estimation').substring(0, 3) }}.\n          </th>\n          <th class=\"estimation\">\n            {{ $t('tasks.fields.duration').substring(0, 3) }}.\n          </th>\n          <th class=\"startdate\">\n            {{ $t('tasks.fields.start_date_short') }}\n          </th>\n          <th class=\"duedate\">\n            {{ $t('tasks.fields.due_date') }}\n          </th>\n          <th class=\"assignees\">\n            {{ $t('tasks.fields.assignees') }}\n          </th>\n          <th class=\"end-cell\"></th>\n        </tr>\n      </thead>\n    </table>\n  </div>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isError\"\n  />\n\n  <div class=\"task-list-body\" v-scroll=\"onBodyScroll\" v-if=\"entries.length > 0\">\n    <table class=\"datatable\">\n      <tbody class=\"datatable-body\">\n        <tr\n          :key=\"typeof (taskId) === 'string' ? taskId : taskId.id\"\n          :class=\"{\n            selected: currentTask && currentTask.id === taskId,\n            'datatable-row': true,\n            'datatable-row--selectable': true\n          }\"\n          @click=\"selectTask(getTask(taskId))\"\n          v-for=\"taskId in sortedEntries\"\n        >\n          <task-type-cell\n            class=\"type\"\n            :task-type=\"getTaskType(taskId)\"\n            :production-id=\"currentProduction.id\"\n            v-if=\"getTaskType(taskId)\"\n          />\n          <td class=\"status\">\n            <validation-tag\n              :task=\"getTask(taskId)\"\n              :is-static=\"true\"\n              v-if=\"getTask(taskId)\"\n            />\n          </td>\n          <td class=\"estimation\">\n            {{ getTaskEstimation(taskId) }}\n          </td>\n          <td class=\"estimation\">\n            {{ getTaskDuration(taskId) }}\n          </td>\n          <td class=\"startdate\">\n            {{ getTaskStartDate(taskId) }}\n          </td>\n          <td class=\"duedate\">\n            {{ getTaskDueDate(taskId) }}\n          </td>\n          <td class=\"assignees\">\n            <div\n              class=\"flexrow\"\n              v-if=\"!isCurrentUserClient && !isCurrentUserVendor\"\n            >\n              <div\n                class=\"avatar-wrapper\"\n                :key=\"personId\"\n                v-for=\"personId in getAssignees(taskId)\"\n              >\n                <people-avatar\n                  class=\"person-avatar flexrow-item\"\n                  :key=\"taskId + '-' + personId\"\n                  :person=\"personMap.get(personId)\"\n                  :size=\"30\"\n                  :font-size=\"15\"\n                />\n              </div>\n            </div>\n          </td>\n          <td class=\"end-cell\"></td>\n       </tr>\n      </tbody>\n    </table>\n  </div>\n\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { formatListMixin } from '@/components/mixins/format'\n\nimport TaskTypeCell from '@/components/cells/TaskTypeName'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport ValidationTag from '@/components/widgets/ValidationTag'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\n\nexport default {\n  name: 'entity-task-list',\n  mixins: [formatListMixin],\n\n  components: {\n    TableInfo,\n    TaskTypeCell,\n    PeopleAvatar,\n    ValidationTag\n  },\n\n  props: {\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data () {\n    return {\n      currentTask: null\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'getTaskTypePriority',\n      'isCurrentUserClient',\n      'isCurrentUserVendor',\n      'personMap',\n      'taskMap',\n      'taskTypeMap'\n    ]),\n\n    sortedEntries () {\n      return [...this.entries].sort((taskIdA, taskIdB) => {\n        const taskA = this.getTask(taskIdA)\n        const taskB = this.getTask(taskIdB)\n        if (!taskA) return false\n        const taskTypeA = this.taskTypeMap.get(taskA.task_type_id)\n        const taskTypeB = this.taskTypeMap.get(taskB.task_type_id)\n        const taskTypeAPriority = this.getTaskTypePriority(taskA.task_type_id)\n        const taskTypeBPriority = this.getTaskTypePriority(taskB.task_type_id)\n        if (taskTypeAPriority === taskTypeBPriority) {\n          return taskTypeA.name.localeCompare(taskTypeB.name)\n        } else {\n          return taskTypeAPriority - taskTypeBPriority\n        }\n      })\n    }\n  },\n\n  methods: {\n    ...mapActions([\n    ]),\n\n    onBodyScroll (event, position) {\n      this.$refs.headerWrapper.style.left = `-${position.scrollLeft}px`\n    },\n\n    getTask (task) {\n      if (typeof (task) === 'string') {\n        return this.taskMap.get(task)\n      } else {\n        return task\n      }\n    },\n\n    getTaskStartDate (taskId) {\n      const task = this.getTask(taskId)\n      return task && task.start_date\n        ? task.start_date.substring(0, 10)\n        : ''\n    },\n\n    getTaskDueDate (taskId) {\n      const task = this.getTask(taskId)\n      return task && task.due_date\n        ? task.due_date.substring(0, 10)\n        : ''\n    },\n\n    getTaskEstimation (taskId) {\n      const task = this.getTask(taskId)\n      return task && task.estimation\n        ? this.formatDuration(task.estimation)\n        : ''\n    },\n\n    getTaskDuration (taskId) {\n      const task = this.getTask(taskId)\n      return task && task.duration\n        ? this.formatDuration(task.duration)\n        : ''\n    },\n\n    getTaskType (entry) {\n      const task = this.getTask(entry)\n      return task ? this.taskTypeMap.get(task.task_type_id) : null\n    },\n\n    getAssignees (entry) {\n      const task = this.getTask(entry)\n      return task ? task.assignees : []\n    },\n\n    selectTask (task) {\n      this.currentTask = task\n      this.$emit('task-selected', task)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.data-list {\n  max-width: 500px;\n  margin-top: 0;\n}\n\n.type {\n  max-width: 250px;\n  min-width: 250px;\n}\n\n.estimation {\n  max-width: 50px;\n  min-width: 50px;\n}\n\n.startdate,\n.duedate {\n  max-width: 100px;\n  min-width: 100px;\n}\n\n.status {\n  max-width: 120px;\n  min-width: 120px;\n}\n\n.assignees {\n  max-width: 150px;\n  min-width: 150px;\n}\n\n.end-cell {\n  width: 100%;\n}\n\n.flexrow-item {\n  margin-right: 0.3em;\n}\n\n.avatar-wrapper {\n  margin-right: 0.5em;\n}\n\n.task-list-body {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.datatable-row-header::after {\n  display: none;\n}\n</style>\n"],"names":["entityMixin","entity","taskId","task","a","b","taskTypeAPriority","taskTypeBPriority","getFirstStartDate","parseDate","getLastEndDate","manDays","rootElement","limitStartDate","moment","children","estimation","startDate","endDate","parseSimpleDate","taskType","c","rootStartDate","rootEndDate","tab","schedule","_sfc_main","formatListMixin","timeMixin","PeopleAvatar","Spinner","TaskTypeName","ValidationTag","mapGetters","mapActions","news","taskStatus","date","person","data","err","DownloadIcon","EntityThumbnail","PeopleNameCell","previewFile","previewFileId","renderFileSize","previewFiles","log","logs","TableInfo","TaskTypeCell","taskIdA","taskIdB","taskA","taskB","taskTypeA","taskTypeB","event","position","entry"],"mappings":"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"}