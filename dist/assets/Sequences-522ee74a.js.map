{"version":3,"file":"Sequences-522ee74a.js","sources":["../../src/components/lists/SequenceList.vue","../../src/components/pages/Sequences.vue"],"sourcesContent":["<template>\n<div class=\"data-list\">\n  <div\n    class=\"datatable-wrapper\"\n    ref=\"body\"\n    v-scroll=\"onBodyScroll\"\n  >\n\n    <table-header-menu\n      ref=\"headerMenu\"\n      :is-minimized=\"hiddenColumns[lastHeaderMenuDisplayed]\"\n      :is-edit-allowed=\"isCurrentUserManager\"\n      :is-sticked=\"stickedColumns[lastHeaderMenuDisplayed]\"\n      @minimize-clicked=\"onMinimizeColumnToggled()\"\n      @delete-all-clicked=\"onDeleteAllTasksClicked()\"\n      @sort-by-clicked=\"onSortByTaskTypeClicked()\"\n      @select-column=\"onSelectColumn\"\n      @toggle-stick=\"stickColumnClicked()\"\n    />\n\n    <table-metadata-header-menu\n      ref=\"headerMetadataMenu\"\n      :is-edit-allowed=\"isCurrentUserManager\"\n      :is-sequence-allowed=\"\n        isMetadataColumnEditAllowed(lastMetadaDataHeaderMenuDisplayed)\"\n      :is-sticked=\"stickedColumns[lastMetadaDataHeaderMenuDisplayed]\"\n      @edit-clicked=\"onEditMetadataClicked()\"\n      @delete-clicked=\"onDeleteMetadataClicked()\"\n      @sort-by-clicked=\"onSortByMetadataClicked()\"\n      @toggle-stick=\"metadataStickColumnClicked($event)\"\n    />\n\n    <table class=\"datatable\">\n      <thead\n        class=\"datatable-head\"\n        id=\"datatable-sequence\"\n        v-columns-resizable\n      >\n        <tr>\n          <th\n            scope=\"col\"\n            class=\"name sequence-name datatable-row-header\"\n            ref=\"th-sequence\"\n          >\n            <div class=\"flexrow\">\n              <span class=\"flexrow-item\">\n                {{ $t('sequences.fields.name') }}\n              </span>\n              <button-simple\n                class=\"is-small flexrow-item\"\n                icon=\"plus\"\n                :text=\"''\"\n                @click=\"onAddMetadataClicked\"\n                v-if=\"(isCurrentUserManager || isCurrentUserSupervisor)\n                  && !isLoading\"\n              />\n            </div>\n          </th>\n          <metadata-header\n            :ref=\"`editor-${j}`\"\n            :key=\"descriptor.id\"\n            :descriptor=\"descriptor\"\n            :left=\"offsets['editor-' + j] ? `${offsets['editor-' + j]}px` : '0'\"\n            is-stick\n            @show-metadata-header-menu=\"event => showMetadataHeaderMenu(descriptor.id, event)\"\n            v-for=\"(descriptor, j) in stickedVisibleMetadataDescriptors\"\n            v-if=\"isShowInfos\"\n          />\n          <validation-header\n            :ref=\"`validation-${columnIndexInGrid}`\"\n            :key=\"columnId\"\n            :hidden-columns=\"hiddenColumns\"\n            :column-id=\"columnId\"\n            :validation-style=\"getValidationStyle(columnId)\"\n            :left=\"offsets['validation-' + columnIndexInGrid] ? `${offsets['validation-' + columnIndexInGrid]}px` : '0'\"\n            type=\"editor\"\n            is-stick\n            @show-header-menu=\"event => showHeaderMenu(columnId, columnIndexInGrid, event)\"\n            v-for=\"(columnId, columnIndexInGrid) in stickedDisplayedValidationColumns\"\n            v-if=\"!isLoading\"\n          />\n\n          <th\n            scope=\"col\"\n            class=\"description selectable\"\n            v-if=\"!isCurrentUserClient && isShowInfos && isSequenceDescription\"\n          >\n            {{ $t('sequences.fields.description') }}\n          </th>\n\n          <metadata-header\n            :key=\"descriptor.id\"\n            :descriptor=\"descriptor\"\n            @show-metadata-header-menu=\"event => showMetadataHeaderMenu(descriptor.id, event)\"\n            v-for=\"descriptor in nonStickedVisibleMetadataDescriptors\"\n            v-if=\"isShowInfos\"\n          />\n          <th\n            scope=\"col\"\n            class=\"time-spent\"\n            ref=\"th-spent\"\n            v-if=\"!isCurrentUserClient &&\n                  isShowInfos &&\n                  isSequenceTime &&\n                  metadataDisplayHeaders.timeSpent\"\n          >\n            {{ $t('sequences.fields.time_spent') }}\n          </th>\n          <th\n            scope=\"col\"\n            class=\"estimation\"\n            :title=\"$t('main.estimation')\"\n            ref=\"th-spent\"\n            v-if=\"!isCurrentUserClient &&\n                  isShowInfos &&\n                  isSequenceEstimation &&\n                  metadataDisplayHeaders.estimation\"\n          >\n            {{ $t('main.estimation_short') }}\n          </th>\n\n          <validation-header\n            :key=\"columnId\"\n            :hidden-columns=\"hiddenColumns\"\n            :column-id=\"columnId\"\n            :validation-style=\"getValidationStyle(columnId)\"\n            type=\"sequences\"\n            @show-header-menu=\"event => {\n              showHeaderMenu(columnId, columnIndexInGrid, event)\n            }\"\n            v-for=\"(columnId, columnIndexInGrid) in nonStickedDisplayedValidationColumns\"\n            v-if=\"!isLoading\"\n          />\n          <th scope=\"col\" class=\"actions\" ref=\"actionsSection\">\n            <button-simple\n              :class=\"{\n                'is-small': true,\n                highlighted: isEmptyTask\n              }\"\n              icon=\"plus\"\n              :text=\"$t('tasks.create_tasks')\"\n              @click=\"$emit('create-tasks')\"\n              v-if=\"isCurrentUserManager &&\n                    displayedSequences.length > 0 &&\n                    !isLoading\"\n            />\n\n            <table-metadata-selector-menu\n              ref=\"headerMetadataSelectorMenu\"\n              :metadataDisplayHeaders.sync=\"metadataDisplayHeaders\"\n              :descriptors=\"sequenceMetadataDescriptors\"\n              :exclude=\"{\n                timeSpent: !isSequenceTime,\n                estimation: !isSequenceEstimation\n              }\"\n              namespace=\"sequences\"\n              v-show=\"columnSelectorDisplayed && isShowInfos\"\n            />\n\n            <button-simple\n              class=\"is-small is-pulled-right\"\n              icon=\"down\"\n              @click=\"toggleColumnSelector\"\n              v-if=\"sequenceMetadataDescriptors.length > 0 && isShowInfos\"\n            />\n          </th>\n        </tr>\n      </thead>\n      <tbody class=\"datatable-body\">\n        <tr\n          class=\"datatable-row\"\n          scope=\"row\"\n          :key=\"sequence.id\"\n          :class=\"{canceled: sequence.canceled}\"\n          v-for=\"(sequence, i) in displayedSequences\"\n          v-if=\"!isLoading && isListVisible\"\n        >\n          <th\n            :class=\"{\n              'datatable-row-header': true,\n              'sequence-name': true,\n              name: true,\n              strong: !sequence.canceled\n            }\"\n          >\n            <div class=\"flexrow\">\n              <entity-thumbnail\n                :entity=\"sequence\"\n                :width=\"isBigThumbnails ? 150 : 50\"\n                :height=\"isBigThumbnails ? 100 : 33\"\n                :empty-width=\"isBigThumbnails ? 150 : 50\"\n                :empty-height=\"isBigThumbnails ? 100 : 34\"\n              />\n              <router-link\n                tabindex=\"-1\"\n                :title=\"sequence.name\"\n                :to=\"sequencePath(sequence.id)\"\n              >\n                {{ sequence.name }}\n              </router-link>\n            </div>\n          </th>\n\n          <!-- Metadata stick -->\n          <td\n            :ref=\"`editor-${i}-${j}`\"\n            class=\"metadata-descriptor datatable-row-header\"\n            :title=\"sequence.data ? sequence.data[descriptor.field_name] : ''\"\n            :style=\"{'left': offsets['editor-' + j] ? `${offsets['editor-' + j]}px` : '0'}\"\n            :key=\"sequence.id + '-' + descriptor.id\"\n            v-for=\"(descriptor, j) in stickedVisibleMetadataDescriptors\"\n            v-if=\"isShowInfos\"\n          >\n            <input\n              class=\"input-editor\"\n              @input=\"event => onMetadataFieldChanged(sequence, descriptor, event)\"\n              @keyup.ctrl=\"event => onInputKeyUp(event, i, j)\"\n              :value=\"getMetadataFieldValue(descriptor, sequence)\"\n              v-if=\"descriptor.choices.length === 0 && (isCurrentUserManager\n              || isSupervisorInDepartments(descriptor.departments))\"\n            />\n            <span\n              class=\"select\"\n              v-else-if=\"isCurrentUserManager\n              || isSupervisorInDepartments(descriptor.departments)\"\n            >\n            <select\n              class=\"select-input\"\n              @keyup.ctrl=\"event => onInputKeyUp(event, i, j)\"\n              @change=\"event => onMetadataFieldChanged(sequence, descriptor, event)\"\n            >\n              <option\n                v-for=\"(option, i) in getDescriptorChoicesOptions(descriptor)\"\n                :key=\"`${sequence.id}-${descriptor.id}-${i}-${option.label}-${option.value}`\"\n                :value=\"option.value\"\n                :selected=\"getMetadataFieldValue(descriptor, sequence) === option.value\"\n              >\n                {{ option.label }}\n              </option>\n            </select>\n            </span>\n              <span class=\"metadata-value selectable\" v-else>\n              {{ getMetadataFieldValue(descriptor, sequence) }}\n            </span>\n          </td>\n\n          <validation-cell\n            :ref=\"`validation-${i}-${j}`\"\n            :key=\"columnId + '-' + sequence.id\"\n            :class=\"{\n              'validation-cell': !hiddenColumns[columnId],\n              'hidden-validation-cell': hiddenColumns[columnId],\n              'datatable-row-header': true\n            }\"\n            :column=\"taskTypeMap.get(columnId)\"\n            :columnY=\"j\"\n            :entity=\"sequence\"\n            :is-assignees=\"isShowAssignations\"\n            :is-static=\"true\"\n            :left=\"offsets['validation-' + j] ? `${offsets['validation-' + j]}px` : '0'\"\n            :minimized=\"hiddenColumns[columnId]\"\n            :rowX=\"i\"\n            :selected=\"isSelected(i, j)\"\n            :sticked=\"true\"\n            :task-test=\"taskMap.get(sequence.validations.get(columnId))\"\n            @select=\"(infos) => onTaskSelected(infos, true)\"\n            @unselect=\"(infos) => onTaskUnselected(infos, true)\"\n            v-for=\"(columnId, j) in stickedDisplayedValidationColumns\"\n            v-if=\"!isLoading\"\n          />\n\n          <description-cell\n            class=\"description\"\n            :entry=\"sequence\"\n            :editable=\"isCurrentUserManager\"\n            @description-changed=\"value => onDescriptionChanged(sequence, value)\"\n            v-if=\"!isCurrentUserClient && isShowInfos && isSequenceDescription\"\n          />\n\n          <!-- other Metadata cells -->\n          <td\n            class=\"metadata-descriptor\"\n            :title=\"sequence.data ? sequence.data[descriptor.field_name] : ''\"\n            :key=\"sequence.id + '-' + descriptor.id\"\n            v-for=\"(descriptor, j) in nonStickedVisibleMetadataDescriptors\"\n            v-if=\"isShowInfos\"\n          >\n            <input\n              class=\"input-editor\"\n              @input=\"event => onMetadataFieldChanged(sequence, descriptor, event)\"\n              @keyup.ctrl=\"event => onInputKeyUp(event, i, j)\"\n              :value=\"getMetadataFieldValue(descriptor, sequence)\"\n              v-if=\"descriptor.choices.length === 0 && (isCurrentUserManager\n              || isSupervisorInDepartments(descriptor.departments))\"\n            />\n            <span\n              class=\"select\"\n              v-else-if=\"isCurrentUserManager\n              || isSupervisorInDepartments(descriptor.departments)\"\n            >\n            <select\n              class=\"select-input\"\n              @keyup.ctrl=\"event => onInputKeyUp(event, i, j)\"\n              @change=\"event => onMetadataFieldChanged(sequence, descriptor, event)\"\n            >\n              <option\n                v-for=\"(option, i) in getDescriptorChoicesOptions(descriptor)\"\n                :key=\"`${sequence.id}-${descriptor.id}-${i}-${option.label}-${option.value}`\"\n                :value=\"option.value\"\n                :selected=\"getMetadataFieldValue(descriptor, sequence) === option.value\"\n              >\n                {{ option.label }}\n              </option>\n            </select>\n            </span>\n              <span class=\"metadata-value selectable\" v-else>\n              {{ getMetadataFieldValue(descriptor, sequence) }}\n            </span>\n          </td>\n\n          <td\n            class=\"time-spent selectable\"\n            v-if=\"!isCurrentUserClient && isShowInfos && isSequenceTime && metadataDisplayHeaders.timeSpent\"\n          >\n            {{ formatDuration(sequence.timeSpent) }}\n          </td>\n\n          <td\n            class=\"estimation selectable\"\n            v-if=\"!isCurrentUserClient && isShowInfos && isSequenceEstimation && metadataDisplayHeaders.estimation\"\n          >\n            {{ formatDuration(sequence.estimation) }}\n          </td>\n\n          <validation-cell\n            :ref=\"`validation-${i}-${j + stickedDisplayedValidationColumns.length}`\"\n            :class=\"{\n              'validation-cell': !hiddenColumns[columnId],\n              'hidden-validation-cell': hiddenColumns[columnId]\n            }\"\n            :key=\"`${columnId}-${sequence.id}`\"\n            :column=\"taskTypeMap.get(columnId)\"\n            :entity=\"sequence\"\n            :task-test=\"taskMap.get(sequence.validations\n                        ? sequence.validations.get(columnId)\n                        : null\n            )\"\n            :minimized=\"hiddenColumns[columnId]\"\n            :selected=\"isSelected(i, j + stickedDisplayedValidationColumns.length)\"\n            :rowX=\"i\"\n            :columnY=\"j\"\n            :is-assignees=\"isShowAssignations\"\n            @select=\"onTaskSelected\"\n            @unselect=\"onTaskUnselected\"\n            v-for=\"(columnId, j) in nonStickedDisplayedValidationColumns\"\n            v-if=\"!isLoading\"\n          />\n          <row-actions-cell\n            :entry=\"sequence\"\n            @delete-clicked=\"$emit('delete-clicked', sequence)\"\n            @edit-clicked=\"$emit('edit-clicked', sequence)\"\n            v-if=\"isCurrentUserManager\"\n          />\n          <td class=\"actions\" v-else></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isError\"\n  />\n\n  <div\n    class=\"has-text-centered\"\n    v-if=\"isEmptyList && isCurrentUserClient && !isLoading\"\n  >\n    <p class=\"info\">\n      <img src=\"../../assets/illustrations/empty_shot.png\" />\n    </p>\n    <p class=\"info\">{{ $t('sequences.empty_list_client') }}</p>\n  </div>\n\n  <p\n    class=\"has-text-centered nb-sequences\"\n    v-if=\"!isEmptyList && !isLoading\"\n  >\n    {{ displayedSequencesLength }} {{ $tc('sequences.number', displayedSequencesLength) }}\n    <span\n      v-if=\"displayedSequencesTimeSpent > 0 && displayedSequencesEstimation > 0\"\n    >\n    ({{ formatDuration(displayedSequencesTimeSpent) }}\n     {{ $tc('main.days_spent', displayedSequencesTimeSpent) }},\n     {{ formatDuration(displayedSequencesEstimation) }}\n     {{ $tc('main.man_days', displayedSequencesEstimation) }})\n    </span>\n  </p>\n\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { getEntityPath } from '@/lib/path'\nimport { descriptorMixin } from '@/components/mixins/descriptors'\nimport { domMixin } from '@/components/mixins/dom'\nimport { entityListMixin } from '@/components/mixins/entity_list'\nimport { formatListMixin } from '@/components/mixins/format'\nimport { selectionListMixin } from '@/components/mixins/selection'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport DescriptionCell from '@/components/cells/DescriptionCell'\nimport EntityThumbnail from '@/components/widgets/EntityThumbnail'\nimport MetadataHeader from '@/components/cells/MetadataHeader'\nimport RowActionsCell from '@/components/cells/RowActionsCell'\nimport TableMetadataHeaderMenu from '@/components/widgets/TableMetadataHeaderMenu'\nimport TableMetadataSelectorMenu from '@/components/widgets/TableMetadataSelectorMenu'\nimport TableHeaderMenu from '@/components/widgets/TableHeaderMenu'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport ValidationCell from '@/components/cells/ValidationCell'\nimport ValidationHeader from '@/components/cells/ValidationHeader'\n\nexport default {\n  name: 'sequence-list',\n  mixins: [\n    descriptorMixin,\n    domMixin,\n    formatListMixin,\n    entityListMixin,\n    selectionListMixin\n  ],\n\n  props: {\n    displayedSequences: {\n      type: Array,\n      default: () => []\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    validationColumns: {\n      type: Array,\n      default: () => []\n    },\n    departmentFilter: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data () {\n    return {\n      type: 'sequence',\n      hiddenColumns: {},\n      lastHeaderMenuDisplayed: null,\n      lastMetadaDataHeaderMenuDisplayed: null,\n      lastHeaderMenuDisplayedIndexInGrid: null,\n      lastSelectedSequence: null,\n      lastSelection: null,\n      metadataDisplayHeaders: {\n        estimation: true,\n        timeSpent: true\n      },\n      offsets: {},\n      stickedColumns: {}\n    }\n  },\n\n  components: {\n    ButtonSimple,\n    DescriptionCell,\n    EntityThumbnail,\n    MetadataHeader,\n    RowActionsCell,\n    TableHeaderMenu,\n    TableMetadataHeaderMenu,\n    TableMetadataSelectorMenu,\n    TableInfo,\n    ValidationCell,\n    ValidationHeader\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction',\n      'currentSequence',\n      'displayedSequencesEstimation',\n      'displayedSequencesLength',\n      'displayedSequencesTimeSpent',\n      'isBigThumbnails',\n      'isCurrentUserAdmin',\n      'isCurrentUserManager',\n      'isCurrentUserSupervisor',\n      'isCurrentUserClient',\n      'isSingleSequence',\n      'isSequenceDescription',\n      'isSequenceEstimation',\n      'isSequenceTime',\n      'isShowAssignations',\n      'isShowInfos',\n      'nbSelectedTasks',\n      'sequenceMap',\n      'sequenceFilledColumns',\n      'sequenceMetadataDescriptors',\n      'sequences',\n      'sequenceSearchText',\n      'sequenceSelectionGrid',\n      'taskMap',\n      'taskTypeMap',\n      'user'\n    ]),\n\n    isEmptyList () {\n      return (\n        this.displayedSequences.length &&\n        this.displayedSequences[0].length === 0 &&\n        !this.isLoading &&\n        !this.isError &&\n        (!this.sequenceSearchText || this.sequenceSearchText.length === 0)\n      )\n    },\n\n    isListVisible () {\n      return (\n        !this.isLoading &&\n        !this.isError &&\n        (\n          this.displayedSequencesLength > 0\n        )\n      )\n    },\n\n    visibleColumns () {\n      let count = 2\n      count += !this.isCurrentUserClient &&\n        this.isShowInfos &&\n        this.isSequenceDescription\n        ? 1\n        : 0\n      count += this.visibleMetadataDescriptors.length\n      count += !this.isCurrentUserClient &&\n        this.isShowInfos &&\n        this.isSequenceTime && this.metadataDisplayHeaders.timeSpent\n        ? 1\n        : 0\n      count += !this.isCurrentUserClient &&\n        this.isShowInfos &&\n        this.isSequenceEstimation && this.metadataDisplayHeaders.estimation\n        ? 1\n        : 0\n      count += this.displayedValidationColumns.length\n      return count\n    },\n\n    displayedValidationColumns () {\n      return this.validationColumns.filter((columnId) => {\n        return this.sequenceFilledColumns[columnId] &&\n          (!this.hiddenColumns[columnId] || this.isShowInfos)\n      })\n    },\n\n    metadataDescriptors () {\n      return this.sequenceMetadataDescriptors\n    },\n\n    localStorageStickKey () {\n      return `stick-sequences-${this.currentProduction.id}`\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'setSequenceSelection'\n    ]),\n\n    isSelected (lineIndex, columnIndex) {\n      return (\n        this.sequenceSelectionGrid[lineIndex] &&\n        this.sequenceSelectionGrid[lineIndex][columnIndex]\n      )\n    },\n\n    sequencePath (sequenceId) {\n      return this.getPath('sequence', sequenceId)\n    },\n\n    getPath (section, sequenceId) {\n      const productionId = this.currentProduction.id\n      const episodeId = this.currentEpisode ? this.currentEpisode.id : null\n      return getEntityPath(sequenceId, productionId, section, episodeId)\n    }\n  },\n\n  watch: {\n    displayedSequences () {\n      this.$options.lineIndex = {}\n    },\n\n    validationColumns () {\n      this.initHiddenColumns(this.validationColumns, this.hiddenColumns)\n    },\n\n    stickedColumns () {\n      this.updateOffsets()\n    },\n\n    isLoading () {\n      this.updateOffsets()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  th .input-editor,\n  td .select select,\n  td .input-editor {\n    color: $white;\n\n    option {\n      background: $dark-grey-light;\n      color: $white;\n    }\n\n    &:focus,\n    &:active,\n    &:hover {\n      background: $dark-grey-light;\n    }\n  }\n}\n\n.project {\n  min-width: 60px;\n  width: 60px;\n}\n\n.actions {\n  min-width: 160px;\n  position: sticky;\n}\n\nth.actions {\n  padding: 0.4em;\n}\n\n.name {\n  min-width: 100px;\n  width: 100px;\n}\n\n.name a {\n  color: inherit;\n}\n\n.name.sequence-name {\n  min-width: 110px;\n  width: 110px;\n}\n\n.description {\n  min-width: 200px;\n  max-width: 200px;\n  width: 200px;\n}\n\n.validation-cell {\n  min-width: 150px;\n  max-width: 150px;\n  width: 150px;\n}\n\n.estimation,\n.time-spent {\n  min-width: 70px;\n  max-width: 70px;\n  width: 70px;\n}\n\ntd.name {\n  font-size: 1.2em;\n}\n\nspan.thumbnail-empty {\n  display: block;\n  width: 50px;\n  height: 30px;\n  background: #F3F3F3;\n}\n\n.info {\n  margin-top: 2em;\n}\n\n.info img {\n  max-width: 80vh;\n}\n\n.datatable-row th.name {\n  font-size: 1.1em;\n  padding: 6px;\n}\n\n.datatable-row-header {\n  cursor: pointer;\n}\n\nth .input-editor,\ntd .input-editor {\n  color: $grey-strong;\n  height: 100%;\n  padding: 0.5rem;\n  width: 100%;\n  background: transparent;\n  border: 1px solid transparent;\n  z-index: 100;\n\n  &:active,\n  &:focus,\n  &:hover {\n    background: transparent;\n    background: white;\n  }\n\n  &:active,\n  &:focus {\n    border: 1px solid $green;\n  }\n\n  &:hover {\n    border: 1px solid $light-green;\n  }\n}\n\ninput[type=\"number\"]::-webkit-outer-spin-button,\ninput[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n}\n\ninput[type=\"number\"] {\n    -moz-appearance: textfield;\n}\n\n// Metadata cell CSS\n\ntd.metadata-descriptor {\n  height: 3.1rem;\n  padding: 0;\n}\n\ntd .select {\n  color: $grey-strong;\n  margin: 0;\n  height: 100%;\n  width: 100%;\n  border: 1px solid transparent;\n\n  &::after {\n    border-color: transparent;\n  }\n\n  &:active,\n  &:focus,\n  &:hover {\n    &::after {\n      border-color: $green;\n    }\n  }\n\n  select {\n    color: $grey-strong;\n    height: 100%;\n    width: 100%;\n    background: transparent;\n    border-radius: 0;\n    border: 1px solid transparent;\n\n    &:focus {\n      border: 1px solid $green;\n      background: white;\n    }\n\n    &:hover {\n      background: transparent;\n      background: white;\n      border: 1px solid $light-green;\n    }\n  }\n}\n\n.metadata-value {\n  padding: 0.8rem;\n}\n</style>\n","<template>\n<div class=\"columns fixed-page\">\n  <action-panel />\n\n  <div class=\"column main-column\">\n    <div class=\"sequences page\">\n      <div class=\"sequence-list-header page-header\">\n        <div class=\"flexrow\">\n          <search-field\n            ref=\"sequence-search-field\"\n            :can-save=\"true\"\n            :active=\"isSearchActive\"\n            @change=\"onSearchChange\"\n            @enter=\"saveSearchQuery\"\n            @save=\"saveSearchQuery\"\n            placeholder=\"ex: e01 sequence=wip\"\n          />\n          <button-simple\n            class=\"flexrow-item\"\n            :title=\"$t('entities.build_filter.title')\"\n            icon=\"funnel\"\n            @click=\"() => modals.isBuildFilterDisplayed = true\"\n          />\n          <div class=\"filler\"></div>\n          <div class=\"flexrow flexrow-item\" v-if=\"!isCurrentUserClient\">\n            <show-assignations-button class=\"flexrow-item\" />\n            <show-infos-button class=\"flexrow-item\" />\n            <big-thumbnails-button class=\"flexrow-item\" />\n          </div>\n          <div class=\"flexrow\" v-if=\"isCurrentUserManager\">\n            <button-simple\n              class=\"flexrow-item\"\n              :text=\"$t('sequences.new_sequence')\"\n              icon=\"plus\"\n              @click=\"showNewModal\"\n            />\n          </div>\n        </div>\n\n        <div class=\"query-list mt1\">\n          <search-query-list\n            :queries=\"sequenceSearchQueries\"\n            @change-search=\"changeSearch\"\n            @remove-search=\"removeSearchQuery\"\n            v-if=\"!isSequencesLoading && !initialLoading\"\n          />\n        </div>\n      </div>\n\n      <sorting-info\n        :label=\"$t('main.sorted_by')\"\n        :sorting=\"sequenceSorting\"\n        @clear-sorting=\"onChangeSortClicked(null)\"\n        v-if=\"sequenceSorting && sequenceSorting.length > 0\"\n      />\n\n      <sequence-list\n        ref=\"sequence-list\"\n        :displayed-sequences=\"displayedSequences\"\n        :is-loading=\"isSequencesLoading || initialLoading\"\n        :is-error=\"isSequencesLoadingError\"\n        :validation-columns=\"sequenceValidationColumns\"\n        :department-filter=\"departmentFilter\"\n        @add-metadata=\"onAddMetadataClicked\"\n        @change-sort=\"onChangeSortClicked\"\n        @create-tasks=\"showCreateTasksModal\"\n        @delete-all-tasks=\"onDeleteAllTasksClicked\"\n        @delete-clicked=\"onDeleteClicked\"\n        @delete-metadata=\"onDeleteMetadataClicked\"\n        @edit-clicked=\"onEditClicked\"\n        @edit-metadata=\"onEditMetadataClicked\"\n        @field-changed=\"onFieldChanged\"\n        @metadata-changed=\"onMetadataChanged\"\n        @scroll=\"saveScrollPosition\"\n      />\n    </div>\n  </div>\n\n  <div\n    id=\"side-column\"\n    class=\"column side-column\"\n    v-show=\"nbSelectedTasks === 1\"\n  >\n    <task-info\n      :task=\"selectedTasks.values().next().value\"\n    />\n  </div>\n\n  <edit-sequence-modal\n    :active=\"modals.isNewDisplayed\"\n    :is-loading=\"loading.sequence\"\n    :is-error=\"errors.sequence\"\n    :sequence-to-sequence=\"sequenceToEdit\"\n    @cancel=\"modals.isNewDisplayed = false\"\n    @confirm=\"confirmEditSequence\"\n  />\n\n  <delete-modal\n    ref=\"delete-sequence-modal\"\n    :active=\"modals.isDeleteDisplayed\"\n    :is-loading=\"loading.del\"\n    :is-error=\"errors.del\"\n    :text=\"deleteText()\"\n    :error-text=\"$t('sequences.delete_error')\"\n    @cancel=\"modals.isDeleteDisplayed = false\"\n    @confirm=\"confirmDeleteSequence\"\n  />\n\n  <delete-modal\n    ref=\"delete-metadata-modal\"\n    :active=\"modals.isDeleteMetadataDisplayed\"\n    :is-loading=\"loading.deleteMetadata\"\n    :is-error=\"errors.deleteMetadata\"\n    :text=\"$t('productions.metadata.delete_text')\"\n    :error-text=\"$t('productions.metadata.delete_error')\"\n    @cancel=\"modals.isDeleteMetadataDisplayed = false\"\n    @confirm=\"confirmDeleteMetadata\"\n  />\n\n  <hard-delete-modal\n    ref=\"delete-all-tasks-modal\"\n    :active=\"modals.isDeleteAllTasksDisplayed\"\n    :is-loading=\"loading.deleteAllTasks\"\n    :is-error=\"errors.deleteAllTasks\"\n    :text=\"deleteAllTasksText()\"\n    :error-text=\"$t('tasks.delete_all_error')\"\n    :lock-text=\"deleteAllTasksLockText\"\n    :selection-option=\"true\"\n    @cancel=\"modals.isDeleteAllTasksDisplayed = false\"\n    @confirm=\"confirmDeleteAllTasks\"\n  />\n\n  <create-tasks-modal\n    :active=\"modals.isCreateTasksDisplayed\"\n    :is-loading=\"loading.creatingTasks\"\n    :is-loading-stay=\"loading.creatingTasksStay\"\n    :is-error=\"errors.creatingTasks\"\n    :title=\"$t('tasks.create_tasks_sequence')\"\n    :text=\"$t('tasks.create_tasks_sequence_explaination')\"\n    :error-text=\"$t('tasks.create_tasks_sequence_failed')\"\n    @cancel=\"hideCreateTasksModal\"\n    @confirm=\"confirmCreateTasks\"\n    @confirm-and-stay=\"confirmCreateTasksAndStay\"\n  />\n\n  <add-metadata-modal\n    :active=\"modals.isAddMetadataDisplayed\"\n    :is-loading=\"loading.addMetadata\"\n    :is-loading-stay=\"loading.addMetadata\"\n    :is-error=\"errors.addMetadata\"\n    :descriptor-to-edit=\"descriptorToEdit\"\n    entity-type=\"Sequence\"\n    @cancel=\"closeMetadataModal\"\n    @confirm=\"confirmAddMetadata\"\n  />\n\n  <add-thumbnails-modal\n    ref=\"add-thumbnails-modal\"\n    parent=\"sequences\"\n    :active=\"modals.isAddThumbnailsDisplayed\"\n    :is-loading=\"loading.addThumbnails\"\n    :is-error=\"errors.addThumbnails\"\n    @cancel=\"hideAddThumbnailsModal\"\n    @confirm=\"confirmAddThumbnails\"\n  />\n\n  <build-filter-modal\n    ref=\"build-filter-modal\"\n    :active=\"modals.isBuildFilterDisplayed\"\n    entity-type=\"sequence\"\n    @cancel=\"modals.isBuildFilterDisplayed = false\"\n    @confirm=\"confirmBuildFilter\"\n  />\n\n  <edit-sequence-modal\n    :active=\"modals.isNewDisplayed\"\n    :is-loading=\"loading.edit\"\n    :is-error=\"errors.edit\"\n    :sequence-to-edit=\"sequenceToEdit\"\n    @cancel=\"modals.isNewDisplayed = false\"\n    @confirm=\"confirmEditSequence\"\n  />\n\n  <hard-delete-modal\n    :active=\"modals.isDeleteDisplayed\"\n    :is-loading=\"loading.del\"\n    :is-error=\"errors.del\"\n    :text=\"deleteText()\"\n    :error-text=\"$t('sequences.delete_error')\"\n    :lock-text=\"sequenceToDelete ? sequenceToDelete.name : ''\"\n    @cancel=\"modals.isDeleteDisplayed = false\"\n    @confirm=\"confirmDeleteSequence\"\n  />\n</div>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { mapGetters, mapActions } from 'vuex'\nimport csv from '@/lib/csv'\nimport { sortByName } from '@/lib/sorting'\nimport stringHelpers from '@/lib/string'\n\nimport { searchMixin } from '@/components/mixins/search'\nimport { entitiesMixin } from '@/components/mixins/entities'\n\nimport AddMetadataModal from '@/components/modals/AddMetadataModal'\nimport AddThumbnailsModal from '@/components/modals/AddThumbnailsModal'\nimport ActionPanel from '@/components/tops/ActionPanel'\nimport BigThumbnailsButton from '@/components/widgets/BigThumbnailsButton'\nimport BuildFilterModal from '@/components/modals/BuildFilterModal'\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport CreateTasksModal from '@/components/modals/CreateTasksModal'\nimport DeleteModal from '@/components/modals/DeleteModal'\nimport EditSequenceModal from '@/components/modals/EditSequenceModal'\nimport SequenceList from '@/components/lists/SequenceList.vue'\nimport HardDeleteModal from '@/components/modals/HardDeleteModal'\nimport SearchField from '@/components/widgets/SearchField'\nimport SearchQueryList from '@/components/widgets/SearchQueryList'\nimport SortingInfo from '@/components/widgets/SortingInfo'\nimport ShowAssignationsButton from '@/components/widgets/ShowAssignationsButton'\nimport ShowInfosButton from '@/components/widgets/ShowInfosButton'\nimport TaskInfo from '@/components/sides/TaskInfo.vue'\n\nexport default {\n  name: 'sequences',\n  mixins: [searchMixin, entitiesMixin],\n\n  components: {\n    ActionPanel,\n    AddMetadataModal,\n    AddThumbnailsModal,\n    BigThumbnailsButton,\n    BuildFilterModal,\n    ButtonSimple,\n    CreateTasksModal,\n    DeleteModal,\n    EditSequenceModal,\n    SequenceList,\n    HardDeleteModal,\n    SearchField,\n    SearchQueryList,\n    SortingInfo,\n    ShowAssignationsButton,\n    ShowInfosButton,\n    TaskInfo\n  },\n\n  data () {\n    return {\n      type: 'sequence',\n      deleteAllTasksLockText: null,\n      descriptorToEdit: {},\n      departmentFilter: [],\n      sequenceToDelete: null,\n      sequenceToEdit: null,\n      formData: null,\n      genericColumns: [\n        'metadata_column_name => text value',\n        'task_type_name => task_status_name',\n        'task_type_name comment => comment text'\n      ],\n      historyEdit: {},\n      initialLoading: true,\n      isSearchActive: false,\n      optionalColumns: [\n        'Description'\n      ],\n      pageName: 'Sequences',\n      parsedCSV: [],\n      selectedDepartment: 'ALL',\n      taskTypeForTaskDeletion: null,\n      modals: {\n        isAddMetadataDisplayed: false,\n        isAddThumbnailsDisplayed: false,\n        isBuildFilterDisplayed: false,\n        isCreateTasksDisplayed: false,\n        isDeleteDisplayed: false,\n        isDeleteMetadataDisplayed: false,\n        isDeleteAllTasksDisplayed: false,\n        isImportRenderDisplayed: false,\n        isImportDisplayed: false,\n        isNewDisplayed: false\n      },\n      loading: {\n        addMetadata: false,\n        addThumbnails: false,\n        creatingTasks: false,\n        creatingTasksStay: false,\n        deleteAllTasks: false,\n        deleteMetadata: false,\n        sequence: false,\n        del: false,\n        importing: false,\n        stay: false\n      },\n      errors: {\n        addMetadata: false,\n        deleteMetadata: false,\n        creatingTasks: false,\n        deleteAllTasks: false,\n        importing: false,\n        importingError: null\n      }\n    }\n  },\n\n  beforeDestroy () {\n    this.clearSelectedSequences()\n  },\n\n  created () {\n    this.setLastProductionScreen('sequences')\n  },\n\n  mounted () {\n    let searchQuery = ''\n    if (this.sequenceSearchText && this.sequenceSearchText.length > 0) {\n      this.searchField.setValue(this.sequenceSearchText)\n    }\n    if (this.$route.query.search && this.$route.query.search.length > 0) {\n      searchQuery = '' + this.$route.query.search\n    }\n    if (searchQuery === 'undefined') searchQuery = ''\n    this.$refs['sequence-list'].setScrollPosition(\n      this.sequenceListScrollPosition\n    )\n    this.onSearchChange()\n    this.$refs['sequence-list'].setScrollPosition(\n      this.sequenceListScrollPosition\n    )\n    if (!this.isCurrentUserManager && this.user.departments.length > 0) {\n      this.selectedDepartment = 'MY_DEPARTMENTS'\n      this.departmentFilter = this.user.departments\n    } else {\n      this.departmentFilter = []\n    }\n\n    const finalize = () => {\n      this.initialLoading = false\n      if (this.$refs['sequence-list']) {\n        this.$refs['sequence-search-field'].setValue(searchQuery)\n        this.onSearchChange()\n        this.$refs['sequence-list'].setScrollPosition(\n          this.sequenceListScrollPosition\n        )\n      }\n    }\n\n    if (\n      this.sequenceMap.size < 1 ||\n      this.sequenceValidationColumns.length === 0 ||\n      this.sequenceMap.values().next().project_id !== this.currentProduction.id\n    ) {\n      this.loadSequencesWithTasks()\n        .then(() => {\n          this.initialLoading = false\n        })\n        .catch(console.error)\n    } else {\n      if (!this.isSequencesLoading) this.initialLoading = false\n      finalize()\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction',\n      'displayedSequences',\n      'deleteAllTasks',\n      'departments',\n      'sequenceMap',\n      'sequences',\n      'sequenceSearchQueries',\n      'isCurrentUserClient',\n      'isCurrentUserManager',\n      'isSequenceDescription',\n      'isSequenceEstimation',\n      'isSequenceTime',\n      'isSequencesLoading',\n      'isSequencesLoadingError',\n      'isShowAssignations',\n      'isTVShow',\n      'nbSelectedTasks',\n      'openProductions',\n      'selectedTasks',\n      'sequenceMap',\n      'sequenceFilledColumns',\n      'sequencesCsvFormData',\n      'sequenceSearchText',\n      'sequenceValidationColumns',\n      'sequenceListScrollPosition',\n      'sequenceSorting',\n      'taskTypeMap',\n      'user',\n      'departmentMap',\n      'productionSequenceTaskTypes'\n    ]),\n\n    renderColumns () {\n      var collection = [...this.dataMatchers, ...this.optionalColumns]\n\n      this.productionSequenceTaskTypes.forEach(item => {\n        collection.push(item.name)\n        collection.push(item.name + ' comment')\n      })\n      return collection\n    },\n\n    filteredSequences () {\n      const sequences = {}\n      this.displayedSequences.forEach(sequence => {\n        const sequenceKey = sequence.name\n        sequences[sequenceKey] = true\n      })\n      return sequences\n    },\n\n    metadataDescriptors () {\n      return this.sequenceMetadataDescriptors\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'addMetadataDescriptor',\n      'createTasks',\n      'changeSequenceSort',\n      'clearSelectedSequences',\n      'commentTaskWithPreview',\n      'deleteAllSequenceTasks',\n      'deleteSequence',\n      'deleteMetadataDescriptor',\n      'editSequence',\n      'getSequencesCsvLines',\n      'hideAssignations',\n      'loadSequencesWithTasks',\n      'newSequence',\n      'removeSequenceSearch',\n      'saveSequenceSearch',\n      'setLastProductionScreen',\n      'setPreview',\n      'setSequenceSearch',\n      'showAssignations',\n      'uploadSequenceFile'\n    ]),\n\n    confirmAddMetadata (form) {\n      this.loading.addMetadata = true\n      form.entity_type = 'Sequence'\n      this.addMetadataDescriptor(form)\n        .then(() => {\n          this.loading.addMetadata = false\n          this.modals.isAddMetadataDisplayed = false\n        })\n        .catch((err) => {\n          console.error(err)\n          this.loading.addMetadata = false\n          this.errors.addMetadata = true\n        })\n    },\n\n    showNewModal () {\n      this.sequenceToEdit = {}\n      this.modals.isNewDisplayed = true\n    },\n\n    confirmDeleteSequence () {\n      this.loading.del = true\n      this.errors.del = false\n      this.deleteSequence(this.sequenceToDelete)\n        .then(() => {\n          this.loading.del = false\n          this.modals.isDeleteDisplayed = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.del = false\n          this.errors.del = true\n        })\n    },\n\n    runTasksCreation (form, selectionOnly) {\n      this.errors.creatingTasks = false\n      return this.createTasks({\n        type: 'sequences',\n        task_type_id: form.task_type_id,\n        project_id: this.currentProduction.id,\n        selectionOnly\n      })\n    },\n\n    reset () {\n      this.initialLoading = false\n      this.loadSequencesWithTasks((err) => {\n        if (err) console.error(err)\n        this.initialLoading = false\n      })\n    },\n\n    resetEditModal () {\n      const form = { name: '' }\n      if (this.openProductions.length > 0) {\n        form.production_id = this.openProductions[0].id\n      }\n      this.sequenceToEdit = form\n    },\n\n    applySearch (searchQuery) {\n      this.setSequenceSearch(searchQuery)\n      this.setSearchInUrl()\n      this.isSearchActive = true\n    },\n\n    saveSearchQuery (searchQuery) {\n      this.saveSequenceSearch(searchQuery)\n        .catch(console.error)\n    },\n\n    removeSearchQuery (searchQuery) {\n      this.removeSequenceSearch(searchQuery)\n        .catch(console.error)\n    },\n\n    onExportClick () {\n      this.getSequencesCsvLines()\n        .then(sequenceLines => {\n          const nameData = [\n            moment().format('YYYY-MM-DD'),\n            'kitsu',\n            this.currentProduction.name,\n            this.$t('sequences.title')\n          ]\n          const name = stringHelpers.slugify(nameData.join('_'))\n          const headers = [\n            this.$t('sequences.fields.name'),\n            this.$t('sequences.fields.description')\n          ]\n          if (this.currentSequence) {\n            headers.splice(0, 0, 'Sequence')\n          }\n          sortByName([...this.currentProduction.descriptors])\n            .filter(d => d.entity_type === 'Sequence')\n            .forEach((descriptor) => {\n              headers.push(descriptor.name)\n            })\n          if (this.isSequenceTime) {\n            headers.push(this.$t('sequences.fields.time_spent'))\n          }\n          if (this.isSequenceEstimation) {\n            headers.push(this.$t('main.estimation_short'))\n          }\n          this.sequenceValidationColumns\n            .forEach(taskTypeId => {\n              headers.push(this.taskTypeMap.get(taskTypeId).name)\n              headers.push('Assignations')\n            })\n          csv.buildCsvFile(name, [headers].concat(sequenceLines))\n        })\n    },\n\n    onFieldChanged ({ entry, fieldName, value }) {\n      const data = {\n        id: entry.id,\n        description: entry.description\n      }\n      data[fieldName] = value\n      this.editSequence(data)\n    },\n\n    onMetadataChanged ({ entry, descriptor, value }) {\n      const metadata = {}\n      metadata[descriptor.field_name] = value\n      const data = {\n        id: entry.id,\n        data: metadata\n      }\n      this.editSequence(data)\n    },\n\n    onEditClicked (sequence) {\n      this.sequenceToEdit = sequence\n      this.modals.isNewDisplayed = true\n    },\n\n    onDeleteClicked (sequence) {\n      this.sequenceToDelete = sequence\n      this.modals.isDeleteDisplayed = true\n    },\n\n    confirmEditSequence (form) {\n      this.loading.edit = true\n      this.errors.edit = false\n\n      if (form.id) {\n        this.editSequence(form)\n          .then(() => {\n            this.loading.edit = false\n            this.modals.isNewDisplayed = false\n          })\n          .catch(() => {\n            this.loading.edit = false\n            this.errors.edit = true\n          })\n      } else {\n        form.project_id = this.currentProduction.id\n        if (this.currentEpisode) {\n          form.episode_id = this.currentEpisode.id\n        }\n        this.newSequence(form)\n          .then(() => {\n            this.loading.edit = false\n            this.modals.isNewDisplayed = false\n          })\n          .catch(() => {\n            this.loading.edit = false\n            this.errors.edit = true\n          })\n      }\n    },\n\n    deleteText () {\n      const sequence = this.sequenceToDelete\n      if (sequence) {\n        return this.$t('sequences.delete_text', { name: sequence.name })\n      } else {\n        return ''\n      }\n    }\n  },\n\n  watch: {\n    $route () {\n      if (!this.$route.query) return\n      const search = this.$route.query.search\n      const actualSearch = this.$refs['sequence-search-field'].getValue()\n      if (search !== actualSearch) {\n        this.searchField.setValue(search)\n        this.applySearch(search)\n      }\n    },\n\n    currentProduction () {\n      this.$refs['sequence-search-field'].setValue('')\n      this.$store.commit('SET_SEQUENCE_LIST_SCROLL_POSITION', 0)\n      this.initialLoading = false\n      this.reset()\n    },\n\n    currentEpisode () {\n      this.$refs['sequence-search-field'].setValue('')\n      this.$store.commit('SET_SEQUENCE_LIST_SCROLL_POSITION', 0)\n      this.initialLoading = false\n      this.reset()\n    },\n\n    isSequencesLoading () {\n      if (!this.isSequencesLoading) {\n        let searchQuery = ''\n        if (\n          this.$route.query.search &&\n          this.$route.query.search.length > 0\n        ) {\n          searchQuery = '' + this.$route.query.search\n        }\n        this.initialLoading = false\n        this.$refs['sequence-search-field'].setValue(searchQuery)\n        this.$nextTick(() => {\n          this.applySearch(searchQuery)\n        })\n        if (this.$refs['sequence-list']) {\n          this.$refs['sequence-list'].setScrollPosition(\n            this.sequenceListScrollPosition\n          )\n        }\n      }\n    }\n  },\n\n  metaInfo () {\n    return {\n      title: `${this.currentProduction.name} ${this.$t('sequences.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.data-list {\n  margin-top: 0;\n}\n\n.page-header {\n  margin-bottom: 1em;\n}\n\n.flexcolumn {\n  align-items: flex-start;\n}\n\n.sequences {\n  display: flex;\n  flex-direction: column;\n}\n\n.columns {\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n}\n\n.column {\n  overflow-y: auto;\n  padding: 0;\n}\n\n.main-column {\n  border-right: 3px solid $light-grey;\n}\n</style>\n"],"names":["_sfc_main","descriptorMixin","domMixin","formatListMixin","entityListMixin","selectionListMixin","ButtonSimple","DescriptionCell","EntityThumbnail","MetadataHeader","RowActionsCell","TableHeaderMenu","TableMetadataHeaderMenu","TableMetadataSelectorMenu","TableInfo","ValidationCell","ValidationHeader","mapGetters","count","columnId","mapActions","lineIndex","columnIndex","sequenceId","section","productionId","episodeId","getEntityPath","searchMixin","entitiesMixin","ActionPanel","AddMetadataModal","AddThumbnailsModal","BigThumbnailsButton","BuildFilterModal","CreateTasksModal","DeleteModal","EditSequenceModal","SequenceList","HardDeleteModal","SearchField","SearchQueryList","SortingInfo","ShowAssignationsButton","ShowInfosButton","TaskInfo","searchQuery","finalize","collection","item","sequences","sequence","sequenceKey","form","err","selectionOnly","sequenceLines","nameData","moment","name","stringHelpers","headers","sortByName","d","descriptor","taskTypeId","csv","entry","fieldName","value","data","metadata","search","actualSearch"],"mappings":"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"}