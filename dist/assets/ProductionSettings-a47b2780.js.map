{"version":3,"file":"ProductionSettings-a47b2780.js","sources":["../../src/components/pages/production/ProductionBrief.vue","../../src/components/pages/production/ProductionParameters.vue","../../src/components/pages/production/ProductionTaskType.vue","../../src/components/pages/production/ProductionTaskTypes.vue","../../src/components/widgets/StatusAutomationItem.vue","../../src/components/widgets/ComboboxStatusAutomation.vue","../../src/components/pages/production/ProductionStatusAutomations.vue","../../src/components/pages/ProductionSettings.vue"],"sourcesContent":["<template>\n    <div class=\"brief\">\n      <div v-if=\"!isEditing\" class=\"box\" @dblclick=\"openEditing\">\n        <div v-if=\"isEmpty(currentProduction.description)\">\n          <p>{{$t('productions.brief.empty')}}</p>\n        </div>\n        <div\n          class=\"content\"\n          v-html=\"compileMarkdown(currentProduction.description)\"\n          v-else\n        >\n        </div>\n      </div>\n      <div v-else class=\"box has-text-right\">\n        <textarea-field\n          class=\"editor\"\n          ref=\"textarea\"\n          input-class=\"textarea\"\n          @keyup.ctrl.enter=\"editBrief\"\n          v-model=\"brief\"\n        />\n        <p v-if=\"errors.editBrief\" class=\"error mt1 has-text-right\">\n          {{ $t('productions.brief.edit.errorText') }}\n        </p>\n        <p>\n          <button-simple\n            :is-primary=\"true\"\n            :is-loading=\"isLoading\"\n            :disabled=\"isLoading\"\n            :text=\"$t('main.save')\"\n            @click=\"editBrief\"\n          />\n        </p>\n      </div>\n    </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { renderMarkdown } from '@/lib/render'\nimport TextareaField from '@/components/widgets/TextareaField'\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\n\nexport default {\n  name: 'production-brief',\n  components: {\n    ButtonSimple,\n    TextareaField\n  },\n  data () {\n    return {\n      brief: '',\n      isEditing: false,\n      isLoading: false,\n      errors: {\n        editBrief: false\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'currentProduction'\n    ]),\n\n    textarea () { return this.$refs.textarea }\n  },\n  mounted () {\n    if (this.currentProduction) {\n      this.brief = this.currentProduction.description\n    }\n  },\n  methods: {\n    ...mapActions([\n      'editProduction',\n      'setProduction'\n    ]),\n\n    isEmpty (str) {\n      return (!str || str.length === 0)\n    },\n\n    openEditing () {\n      this.isEditing = true\n      this.$nextTick(() => { // Needed because of the v-if\n        this.textarea.focus()\n      })\n    },\n\n    async editBrief () {\n      this.isLoading = true\n      try {\n        await this.editProduction(\n          {\n            id: this.currentProduction.id,\n            description: this.brief\n          }\n        )\n      } catch {\n        this.errors.editBrief = true\n        this.isLoading = false\n        return\n      }\n      this.isEditing = false\n      this.isLoading = false\n    },\n\n    compileMarkdown (input) {\n      return renderMarkdown(input)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .content {\n    color: $white;\n  }\n}\n\n.brief {\n  flex: 1;\n}\n\n.box {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  height: calc(100% - 20px);\n  max-width: 800px;\n  overflow: auto;\n  margin-bottom: 0.5em;\n}\n\n.content {\n  padding-bottom: 1em;\n}\n\n.editor {\n  height: 100%;\n}\n\n.textarea {\n  color: red;\n}\n</style>\n","<template>\n  <div class=\"columns\">\n    <div class=\"column is-one-third box\">\n      <!-- Form -->\n      <form class=\"form\" v-on:submit.prevent>\n        <text-field\n          ref=\"nameField\"\n          :label=\"$t('productions.fields.name')\"\n          @enter=\"runConfirmation\"\n          v-focus\n          v-model=\"form.name\"\n        />\n        <div class=\"columns\">\n          <div class=\"mr1\">\n            <date-field\n              ref=\"startDateField\"\n              :label=\"$t('productions.fields.start_date')\"\n              :short-date=\"true\"\n              v-model=\"form.start_date\"\n            />\n          </div>\n          <div>\n            <date-field\n              ref=\"endDateField\"\n              :label=\"$t('productions.fields.end_date')\"\n              :short-date=\"true\"\n              v-model=\"form.end_date\"\n             />\n          </div>\n        </div>\n        <combobox\n          ref=\"productionTypeField\"\n          localeKeyPrefix=\"productions.type.\"\n          :label=\"$t('productions.fields.type')\"\n          :options=\"productionTypeOptions\"\n          @enter=\"runConfirmation\"\n          v-model=\"form.production_type\"\n        />\n\n        <text-field\n          ref=\"nbEpisodesField\"\n          :label=\"$t('productions.fields.nb_episodes')\"\n          @enter=\"runConfirmation\"\n          v-focus\n          v-model=\"form.nb_episodes\"\n          v-if=\"currentProduction && currentProduction.id && isLocalTVShow\"\n        />\n        <!--text-field\n          ref=\"episodesSpanField\"\n          :label=\"$t('productions.fields.episode_span')\"\n          @enter=\"runConfirmation\"\n          v-focus\n          v-model=\"form.episode_span\"\n          v-if=\"currentProduction && currentProduction.id && isLocalTVShow\"\n        /-->\n\n        <text-field\n          ref=\"fpsField\"\n          :label=\"$t('productions.fields.fps')\"\n          @enter=\"runConfirmation\"\n          v-focus\n          v-model=\"form.fps\"\n          v-if=\"currentProduction && currentProduction.id\"\n        />\n        <text-field\n          ref=\"ratioField\"\n          :label=\"$t('productions.fields.ratio')\"\n          @enter=\"runConfirmation\"\n          v-focus\n          v-model=\"form.ratio\"\n          v-if=\"currentProduction && currentProduction.id\"\n        />\n        <text-field\n          ref=\"resolutionField\"\n          :label=\"$t('productions.fields.resolution')\"\n          @enter=\"runConfirmation\"\n          v-focus\n          v-model=\"form.resolution\"\n          v-if=\"currentProduction && currentProduction.id\"\n        />\n        <combobox-boolean\n          ref=\"isClientsIsolatedField\"\n          :label=\"$t('productions.fields.is_clients_isolated')\"\n          @enter=\"runConfirmation\"\n          v-focus\n          v-model=\"form.is_clients_isolated\"\n          v-if=\"currentProduction && currentProduction.id\"\n        />\n        <text-field\n          ref=\"maxRetakesField\"\n          type=\"number\"\n          :step=\"1\"\n          :label=\"$t('productions.fields.max_retakes')\"\n          @enter=\"runConfirmation\"\n          v-focus\n          v-model=\"form.max_retakes\"\n          v-if=\"currentProduction && currentProduction.id\"\n        />\n\n        <div v-if=\"currentProduction && currentProduction.id\">\n          <label class=\"label\">{{ $t(\"productions.picture\") }}</label>\n          <file-upload\n            ref=\"fileField\"\n            :is-primary=\"false\"\n            :label=\"$t('main.csv.upload_file')\"\n            @fileselected=\"onFileSelected\"\n            accept=\".png,.jpg,.jpeg\"\n          />\n        </div>\n        <p v-if=\"isError\" class=\"error mt1\">\n          {{ $t('productions.edit_error') }}\n        </p>\n        <div class=\"has-text-right mt2\">\n          <button-simple\n            :is-primary=\"true\"\n            :class=\"{'is-loading': isLoading}\"\n            :disabled=\"isLoading\"\n            :text=\"$t('main.save')\"\n            @click=\"editParameters\"\n          />\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport { mapGetters, mapActions } from 'vuex'\nimport { formatSimpleDate, parseSimpleDate } from '@/lib/time'\nimport { PRODUCTION_TYPE_OPTIONS } from '@/lib/productions'\n\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxBoolean from '@/components/widgets/ComboboxBoolean'\nimport DateField from '@/components/widgets/DateField'\nimport FileUpload from '@/components/widgets/FileUpload'\nimport TextField from '@/components/widgets/TextField'\nimport ButtonSimple from '@/components/widgets/ButtonSimple.vue'\n\nexport default {\n  name: 'production-parameters',\n  components: {\n    Combobox,\n    ComboboxBoolean,\n    DateField,\n    FileUpload,\n    TextField,\n    ButtonSimple\n  },\n\n  data () {\n    return {\n      formData: null,\n      isLoading: false,\n      isError: false,\n      isLocalTVShow: false,\n      productionTypeOptions: PRODUCTION_TYPE_OPTIONS,\n      form: {\n        name: '',\n        start_date: new Date(),\n        end_date: new Date(),\n        nb_episodes: 0,\n        episode_span: 0,\n        fps: '',\n        max_retakes: 0,\n        is_clients_isolated: 'false',\n        ratio: '',\n        resolution: '',\n        production_type: 'short'\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'productionAvatarFormData',\n      'productionStatus',\n      'isTVShow'\n    ])\n  },\n  mounted () {\n    this.resetForm()\n  },\n  watch: {\n    currentProduction: {\n      handler () {\n        this.resetForm()\n        this.updateTvShowRelatedDatas(this.isTVShow)\n      },\n      deep: true\n    },\n    'form.production_type' (newProductionType) {\n      this.updateTvShowRelatedDatas(newProductionType === 'tvshow')\n    }\n  },\n  methods: {\n    ...mapActions([\n      'editProduction',\n      'storeProductionPicture',\n      'uploadProductionAvatar'\n    ]),\n\n    onFileSelected (formData) {\n      this.formData = formData\n      this.storeProductionPicture(formData)\n    },\n\n    isEmpty (str) {\n      return (!str || str.length === 0)\n    },\n\n    runConfirmation () {\n      this.$emit('confirm', this.form)\n    },\n\n    // Update the isLocalTVShow boolean and changes values linked to tvshow in form\n    updateTvShowRelatedDatas (isTVShow) {\n      this.isLocalTVShow = isTVShow\n      if (isTVShow && this.currentProduction) {\n        this.form.nb_episodes = this.currentProduction.nb_episodes\n        this.form.episode_span = this.currentProduction.episode_span\n      } else {\n        this.form.nb_episodes = 0\n        this.form.episode_span = 0\n      }\n    },\n\n    resetForm () {\n      if (this.currentProduction) {\n        this.form = {\n          name: this.currentProduction.name,\n          start_date:\n            parseSimpleDate(this.currentProduction.start_date).toDate(),\n          end_date: parseSimpleDate(this.currentProduction.end_date).toDate(),\n          production_type: this.currentProduction.production_type || 'short',\n          episode_span: this.currentProduction.episode_span,\n          fps: this.currentProduction.fps,\n          max_retakes: this.currentProduction.max_retakes,\n          nb_episodes: this.currentProduction.nb_episodes,\n          is_clients_isolated: this.currentProduction.is_clients_isolated\n            ? 'true'\n            : 'false',\n          ratio: this.currentProduction.ratio,\n          resolution: this.currentProduction.resolution\n        }\n      } else {\n        this.form = {\n          name: '',\n          start_date: new Date(),\n          end_date: new Date(),\n          production_type: 'short',\n          nb_episodes: 0,\n          episode_span: 0,\n          max_retakes: 0,\n          is_clients_isolated: 'false',\n          fps: '',\n          ratio: '',\n          resolution: ''\n        }\n      }\n    },\n\n    async editParameters () {\n      this.isLoading = true\n      try {\n        await this.editProduction(\n          {\n            id: this.currentProduction.id,\n            ...this.form,\n            start_date: formatSimpleDate(this.form.start_date),\n            end_date: formatSimpleDate(this.form.end_date)\n          }\n        )\n        if (this.productionAvatarFormData) {\n          await this.uploadProductionAvatar(this.currentProduction.id)\n        }\n      } catch {\n        this.isLoading = false\n        this.isError = true\n        return\n      }\n      this.isLoading = false\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.columns {\n  margin-bottom: 2em;\n}\n\n.column {\n  overflow-y: initial;\n  padding: initial;\n}\n\n.box {\n  padding: 1em;\n}\n</style>\n","<template>\n<tr\n  class=\"datatable-row\"\n  :key=\"taskType.id\"\n>\n  <task-type-cell\n    :task-type=\"taskType\"\n  />\n  <!--td class=\"start-date\">\n   <date-field\n      :disabled-dates=\"productionTimeRange\"\n      :can-delete=\"false\"\n      v-model=\"startDate\"\n   />\n  </td>\n  <td class=\"end-date\">\n   <date-field\n      :disabled-dates=\"endDateTimeRange\"\n      :can-delete=\"false\"\n      v-model=\"endDate\"\n   />\n  </td-->\n  <td class=\"remove\">\n    <button\n      class=\"button\"\n      @click=\"$emit('remove', { scheduleItem, taskType })\"\n    >\n      {{ $t('main.remove') }}\n    </button>\n  </td>\n</tr>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { mapGetters, mapActions } from 'vuex'\n\n// import DateField from '@/components/widgets/DateField'\nimport TaskTypeCell from '@/components/cells/TaskTypeName'\n\nimport { parseDate } from '@/lib/time'\n\nexport default {\n  name: 'production-task-type',\n\n  components: {\n    // DateField,\n    TaskTypeCell\n  },\n\n  props: {\n    taskType: {\n      required: true,\n      type: Object\n    },\n    scheduleItem: {\n      required: true,\n      type: Object\n    }\n  },\n\n  data () {\n    return {\n      startDate: null,\n      endDate: null,\n      silent: true\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'getTaskTypePriority'\n    ]),\n\n    productionTimeRange () {\n      const dates = {\n        to: parseDate(this.currentProduction.start_date).toDate(),\n        from: parseDate(this.currentProduction.end_date).toDate()\n      }\n      return dates\n    },\n\n    endDateTimeRange () {\n      const dates = {\n        to: this.startDate,\n        from: parseDate(this.currentProduction.end_date).toDate()\n      }\n      return dates\n    }\n  },\n\n  mounted () {\n    this.startDate = parseDate(this.scheduleItem.start_date).toDate()\n    this.endDate = parseDate(this.scheduleItem.end_date).toDate()\n    this.$nextTick(() => {\n      this.silent = false\n    })\n  },\n\n  methods: {\n    ...mapActions([\n    ])\n  },\n\n  watch: {\n    startDate () {\n      if (this.silent) return\n      const startDate = moment(this.startDate)\n      let endDate = moment(this.endDate)\n      this.silent = true\n      if (endDate.isBefore(startDate)) {\n        endDate = startDate.clone().add(1, 'days')\n        this.endDate = endDate.toDate()\n      }\n      const data = { ...this.scheduleItem }\n      data.startDate = startDate\n      data.endDate = endDate\n      this.$emit('date-changed', data)\n      this.$nextTick(() => {\n        this.silent = false\n      })\n    },\n\n    endDate () {\n      if (this.silent) return\n      let startDate = moment(this.startDate)\n      const endDate = moment(this.endDate)\n      this.silent = true\n      if (endDate.isBefore(startDate)) {\n        startDate = endDate.clone().add(-1, 'days')\n        this.startDate = startDate.toDate()\n      }\n      const data = { ...this.scheduleItem }\n      data.startDate = startDate\n      data.endDate = endDate\n      this.$emit('date-changed', data)\n      this.$nextTick(() => {\n        this.silent = false\n      })\n    },\n\n    scheduleItem () {\n      this.silent = true\n      this.startDate = parseDate(this.scheduleItem.start_date).toDate()\n      this.endDate = parseDate(this.scheduleItem.end_date).toDate()\n      this.$nextTick(() => {\n        this.silent = false\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.field {\n  margin-bottom: 0;\n  width: 105px;\n}\n.priority {\n  padding-left: 2rem;\n}\n</style>\n","<template>\n  <div class=\"columns\">\n    <div class=\"column\">\n\n      <template v-if=\"remainingTaskTypes.length > 0\">\n        <div class=\"flexrow mt1 mb1 add-task-type\">\n          <combobox-task-type\n            class=\"flexrow-item selector\"\n            :task-type-list=\"remainingTaskTypes\"\n            v-model=\"taskTypeId\"\n          />\n          <button\n            class=\"button flexrow-item\"\n            :disabled=\"loading.scheduleTimeDelete\"\n            @click=\"addTaskType\"\n          >\n            {{ $t('main.add') }}\n          </button>\n        </div>\n      </template>\n\n      <p v-if=\"errors.delete || errors.scheduleTimeUpdate\" class=\"error mt1 mb1\">\n        {{ $t('productions.edit_error') }}\n      </p>\n\n      <div\n        class=\"box\"\n        v-if=\"isEmpty(currentProduction.task_types)\"\n      >\n        {{ $t('settings.production.empty_list') }}\n      </div>\n\n      <template\n        v-for=\"(taskListObject, index) in [\n          assetTaskTypes,\n          shotTaskTypes,\n          editTaskTypes,\n          sequenceTaskTypes,\n          episodeTaskTypes\n        ]\"\n        v-else\n      >\n        <div\n          :key=\"index\"\n        >\n          <h2 class=\"section-title\">\n            {{ taskListObject.title }}\n          </h2>\n          <table\n            class=\"datatable list\"\n            v-if=\"taskListObject.list.length > 0\"\n          >\n            <thead>\n              <tr>\n                <th class=\"name\">\n                  {{ $t('task_types.fields.name') }}\n                </th>\n                <!--th class=\"start-date\">\n                  {{ $t('productions.fields.start_date') }}\n                </th>\n                <th class=\"end-date\">\n                  {{ $t('productions.fields.end_date') }}\n                </th-->\n                <th class=\"remove\"></th>\n              </tr>\n            </thead>\n            <draggable\n              v-model=\"taskListObject.list\"\n              draggable=\".task-type\"\n              class=\"datatable-body\"\n              tag=\"tbody\"\n              @end=\"updatePriorities(taskListObject.list)\"\n            >\n              <production-task-type\n                class=\"task-type\"\n                :key=\"taskTypeData.taskType.id\"\n                :task-type=\"taskTypeData.taskType\"\n                :schedule-item=\"taskTypeData.scheduleItem\"\n                @date-changed=\"onDateChanged\"\n                @remove=\"removeTaskType\"\n                v-for=\"taskTypeData in taskListObject.list\"\n              />\n            </draggable>\n          </table>\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n<script>\nimport async from 'async'\nimport draggable from 'vuedraggable'\nimport moment from 'moment'\nimport { mapGetters, mapActions } from 'vuex'\nimport func from '@/lib/func'\nimport { sortByName, sortTaskTypes } from '@/lib/sorting'\nimport { formatFullDate } from '@/lib/time'\n\nimport ComboboxTaskType from '@/components/widgets/ComboboxTaskType'\nimport ProductionTaskType from '@/components/pages/production/ProductionTaskType'\n\nexport default {\n  name: 'production-task-types',\n\n  components: {\n    ComboboxTaskType,\n    draggable,\n    ProductionTaskType\n  },\n\n  data () {\n    return {\n      assetTaskTypes: { list: [] },\n      editTaskTypes: { list: [] },\n      episode_span: 0,\n      episodeTaskTypes: { list: [] },\n      sequenceTaskTypes: { list: [] },\n      shotTaskTypes: { list: [] },\n      taskTypeId: '',\n      loading: {\n        episode_span: false,\n        scheduleTimeUpdate: false,\n        scheduleTimeDelete: false\n      },\n      errors: {\n        episode_span: false,\n        scheduleTimeUpdate: false,\n        delete: false\n      }\n    }\n  },\n\n  mounted () {\n    if (this.remainingTaskTypes.length > 0) {\n      this.taskTypeId = this.remainingTaskTypes[0].id\n    }\n\n    this.resetDisplayedTaskTypes()\n    if (this.currentProduction) {\n      this.episode_span = this.currentProduction.episode_span\n      this.loadAllScheduleItems(this.currentProduction)\n        .then(() => {\n          this.resetDisplayedTaskTypes()\n        })\n        .catch(err => {\n          console.error(err)\n        })\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'currentScheduleItems',\n      'productionTaskTypes',\n      'productionAssetTaskTypes',\n      'productionShotTaskTypes',\n      'productionEditTaskTypes',\n      'productionSequenceTaskTypes',\n      'productionEpisodeTaskTypes',\n      'taskStatusMap',\n      'taskTypeMap',\n      'taskTypes',\n      'isTVShow'\n    ]),\n\n    remainingTaskTypes () {\n      return sortByName(\n        this.taskTypes\n          .filter(t => !this.currentProduction.task_types.includes(t.id))\n      )\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'addTaskTypeToProduction',\n      'createScheduleItem',\n      'deleteScheduleItem',\n      'editProduction',\n      'editTaskTypeLink',\n      'loadAllScheduleItems',\n      'loadContext',\n      'removeTaskTypeFromProduction',\n      'saveScheduleItem'\n    ]),\n\n    isEmpty (list) {\n      return !list || list.length === 0\n    },\n\n    resetDisplayedTaskTypes () {\n      /*\n        Return an object with the following structure:\n        {\n          title: 'title of the first column of the tab (Assets or short)',\n          list:  [{taskTypes, scheduleItem}]\n          // A list of objects that represents a couple of taskType and their\n          linked scheduleItem.\n        }\n      */\n      ['Asset', 'Shot', 'Sequence', 'Episode', 'Edit'].forEach(type => {\n        const arr = this[`production${type}TaskTypes`]\n        let list = sortTaskTypes(\n          [...arr], this.currentProduction\n        )\n        list = list.map(taskType => {\n          return {\n            taskType,\n            scheduleItem: this.getScheduleItemForTaskType(taskType)\n          }\n        })\n        this[`${type.toLowerCase()}TaskTypes`] = {\n          title: this.$t(`${type.toLowerCase()}s.title`),\n          list\n        }\n      })\n    },\n\n    getScheduleItemForTaskType (taskType) {\n      const item = this.currentScheduleItems.find(\n        scheduleItem => scheduleItem.task_type_id === taskType.id\n      ) || {\n        start_date: formatFullDate(moment()),\n        end_date: formatFullDate(moment())\n      }\n      return item\n    },\n\n    async addTaskType () {\n      await this.addTaskTypeToProduction(\n        {\n          taskTypeId: this.taskTypeId,\n          priority: this.assetTaskTypes.length\n        }\n      )\n      await this.createScheduleItem(\n        {\n          startDate: moment(),\n          endDate: moment(),\n          project_id: this.currentProduction.id,\n          task_type_id: this.taskTypeId\n        }\n      )\n      if (this.remainingTaskTypes.length > 0) {\n        this.taskTypeId = this.remainingTaskTypes[0].id\n      } else {\n        this.taskTypeId = ''\n      }\n      this.resetDisplayedTaskTypes()\n    },\n\n    async removeTaskType ({ taskType, scheduleItem }) {\n      this.errors.delete = false\n      try {\n        await this.removeTaskTypeFromProduction(taskType.id)\n        if (scheduleItem !== null) {\n          this.loading.scheduleTimeDelete = true\n          await this.deleteScheduleItem(scheduleItem)\n          this.loading.scheduleTimeDelete = false\n        }\n      } catch {\n        this.errors.delete = true\n        this.loading.scheduleTimeDelete = false\n        return\n      }\n      await this.$nextTick()\n      if (this.remainingTaskTypes.length > 0) {\n        this.taskTypeId = this.remainingTaskTypes[0].id\n      }\n      this.resetDisplayedTaskTypes()\n    },\n\n    async editEpisodeSpan () {\n      this.loading.episode_span = true\n      this.errors.episode_span = false\n      try {\n        await this.editProduction({\n          id: this.currentProduction.id,\n          episode_span: this.episode_span\n        })\n      } catch (err) {\n        this.errors.episode_span = true\n        console.error(err)\n      }\n      this.loading.episode_span = false\n    },\n\n    async onDateChanged (scheduleItem) {\n      this.errors.scheduleTimeUpdate = false\n      try {\n        await this.saveScheduleItem(scheduleItem)\n      } catch (err) {\n        console.error(err)\n        this.errors.scheduleTimeUpdate = true\n      }\n    },\n\n    async savePriorities (forms) {\n      const now = new Date().getTime()\n      this.lastCall = this.lastCall || 0\n      if (now - this.lastCall > 1000 && !this.isSaving) {\n        this.lastCall = now\n        this.isSaving = true\n        await func.runPromiseAsSeries(forms.map(\n          async (form) => {\n            return await this.editTaskTypeLink(form)\n          }\n        ))\n        this.isSaving = false\n        if (this.newSaveCall) {\n          await this.savePriorities(forms)\n        }\n        setTimeout(() => {\n          this.$store.commit('SORT_VALIDATION_COLUMNS', this.taskTypeMap)\n        }, 100)\n      } else {\n        this.newSaveCall = true\n      }\n    },\n\n    async updatePriorities (taskTypes) {\n      const forms = []\n      taskTypes.forEach((item, index) => {\n        index += 1\n        const form = {\n          projectId: this.currentProduction.id,\n          taskTypeId: item.taskType.id,\n          priority: index\n        }\n        forms.push(form)\n      })\n      await this.savePriorities(forms)\n      await this.loadContext()\n    }\n  },\n\n  watch: {\n    currentProduction: {\n      handler () {\n        this.episode_span = this.currentProduction.episode_span\n        this.loadAllScheduleItems(this.currentProduction)\n        this.resetDisplayedTaskTypes()\n      },\n      deep: true\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.column {\n  overflow-y: initial;\n}\n\n.datatable th {\n  color: var(--text);\n}\n\ntable {\n  margin-bottom: 1.5em;\n}\n\nth {\n  padding-left: 10px;\n  padding-bottom: 5px;\n}\n\ntd p {\n  color: var(--text);\n}\n\n.column {\n  max-width: 400px;\n}\n\ntd.name {\n  flex: 1;\n}\n\n.start-date {\n  width: 135px;\n}\n\n.end-date {\n  width: 135px;\n}\n\n.remove {\n  width: 100px;\n}\n\ntd ::v-deep p.control.flexrow {\n  width: 105px;\n}\n\n.episode-span-column {\n  margin-left: 5rem;\n}\n\n.field {\n  margin-bottom: 0;\n}\n\n.section-title {\n  color: $grey;\n  font-size: 1.2em;\n  margin-bottom: 1em;\n  margin-top: 2em;\n  text-transform: uppercase;\n}\n\nh2 {\n  border: 0;\n}\n</style>\n","<template>\n<div\n  class=\"status-automation flexrow\"\n>\n  <span class=\"flexrow-item entity-type\">\n    {{ statusAutomation.entity_type }}\n  </span>\n  <span class=\"in-task-type flexrow-item\">\n    <task-type-name\n      class=\"in-task-type flexrow-item\"\n      :task-type=\"getTaskType(statusAutomation.in_task_type_id)\"\n    />\n  </span>\n  <span class=\"in-task-status flexrow-item\">\n    <task-status-name\n      :entry=\"getTaskStatus(statusAutomation.in_task_status_id)\"\n      v-if=\"statusAutomation.in_field_type !== 'ready_for'\"\n    />\n  </span>\n  <span class=\"flexrow-item trigger-type\">\n    changes {{\n      statusAutomation.out_field_type === 'ready_for'\n      ? 'ready for to'\n      : 'task status for'\n    }}\n  </span>\n  <span\n    class=\"out-task-type flexrow-item\"\n  >\n    <task-type-name\n      :task-type=\"getTaskType(statusAutomation.out_task_type_id)\"\n    />\n  </span>\n  <span\n    class=\"flexrow-item\"\n    v-if=\"statusAutomation.out_field_type === 'status'\"\n  >\n    to\n  </span>\n  <span class=\"out-task-status flexrow-item\">\n    <task-status-name\n      :entry=\"getTaskStatus(statusAutomation.out_task_status_id)\"\n      v-if=\"statusAutomation.out_field_type === 'status'\"\n    />\n  </span>\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport TaskTypeName from '@/components/widgets/TaskTypeName'\nimport TaskStatusName from '@/components/cells/TaskStatusName'\n\nexport default {\n  name: 'status-automation-item',\n  components: {\n    TaskTypeName,\n    TaskStatusName\n  },\n\n  props: {\n    statusAutomation: {\n      type: Object,\n      default: null\n    },\n    productionId: {\n      type: String,\n      default: null\n    },\n    deletable: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'isCurrentUserClient',\n      'getTaskStatus',\n      'getTaskType'\n    ]),\n\n    statusAutomationPath () {\n      const route = {\n        name: 'status-automation',\n        params: {\n          production_id: this.productionId,\n          status_automation_id: this.statusAutomation.id,\n          type: this.$tc(this.statusAutomation.for_entity.toLowerCase(), 2)\n        }\n      }\n\n      if (this.statusAutomation.episode_id || this.$route.params.episode_id) {\n        route.name = 'episode-status-automation'\n        route.params.episode_id =\n          this.statusAutomation.episode_id || this.$route.params.episode_id\n      }\n      return route\n    }\n\n  },\n\n  methods: {\n    ...mapActions([\n    ])\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.status-automation {\n  text-transform: none;\n  color: var(--text);\n  padding: 1em;\n}\n\n.flexrow-item {\n  text-align: left;\n}\n\n.entity-type {\n  text-transform: capitalize;\n  min-width: 40px;\n}\n\n.in-task-type {\n  text-align: left;\n}\n\n.out-task-status {\nmin-width: 100px;\n}\n\n.trigger-type {\n  min-width: 160px;\n}\n</style>\n","<template>\n<div\n  :class=\"{\n    field: withMargin,\n    'field--narrow': narrow\n  }\"\n>\n  <label class=\"label\" v-if=\"label.length > 0\">\n    {{ label }}\n  </label>\n  <div\n    class=\"status-automation-combo\"\n  >\n    <div\n      class=\"flexrow\"\n      @click=\"toggleStatusAutomationsList\"\n    >\n      <div\n        class=\"selected-status-automation-line flexrow-item\"\n      >\n        <status-automation-item\n          :status-automation=\"currentStatusAutomation\"\n          v-if=\"currentStatusAutomation\"\n        />\n      </div>\n      <chevron-down-icon class=\"down-icon flexrow-item\"/>\n    </div>\n    <div\n      class=\"select-input\"\n      ref=\"select\"\n      v-if=\"showStatusAutomationsList\"\n    >\n      <div\n        class=\"status-automation-line\"\n        v-for=\"statusAutomation in statusAutomationsList\"\n        @click=\"selectStatusAutomation(statusAutomation)\"\n        :key=\"statusAutomation.id\"\n      >\n        <status-automation-item\n          :status-automation=\"statusAutomation\"\n          v-if=\"statusAutomation\"\n        />\n      </div>\n    </div>\n  </div>\n  <combobox-mask\n    :displayed=\"showStatusAutomationsList\"\n    @click=\"toggleStatusAutomationsList\"\n  />\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport { ChevronDownIcon } from 'vue-feather-icons'\n\nimport colors from '@/lib/colors'\nimport ComboboxMask from '@/components/widgets/ComboboxMask'\nimport StatusAutomationItem from '@/components/widgets/StatusAutomationItem'\n\nexport default {\n  name: 'combobox-status-automation',\n\n  components: {\n    ChevronDownIcon,\n    ComboboxMask,\n    StatusAutomationItem\n  },\n\n  data () {\n    return {\n      showStatusAutomationsList: false\n    }\n  },\n\n  props: {\n    label: {\n      default: '',\n      type: String\n    },\n    statusAutomationsList: {\n      default: () => [],\n      type: Array\n    },\n    value: {\n      default: '',\n      type: String\n    },\n    narrow: {\n      default: false,\n      type: Boolean\n    },\n    withMargin: {\n      default: true,\n      type: Boolean\n    },\n    addPlaceholder: {\n      default: false,\n      type: Boolean\n    }\n  },\n\n  mounted () {\n    this.selectedStatusAutomation = this.statusAutomation\n  },\n\n  computed: {\n    ...mapGetters([\n      'isDarkTheme',\n      'statusAutomationMap',\n      'getTaskStatus',\n      'getTaskType'\n    ]),\n\n    currentStatusAutomation () {\n      if (this.value) {\n        return this.statusAutomationMap.get(this.value)\n      } else if (this.addPlaceholder) {\n        return {\n          short_name: '+ status',\n          color: '#999'\n        }\n      } else {\n        return this.statusAutomationsList[0]\n      }\n    }\n  },\n\n  methods: {\n    selectStatusAutomation (status) {\n      this.$emit('input', status.id)\n      this.showStatusAutomationsList = false\n    },\n\n    backgroundColor (statusAutomation) {\n      if (\n        (!statusAutomation || statusAutomation.is_default) &&\n        !this.isDarkTheme\n      ) {\n        return '#ECECEC'\n      } else if (\n        (!statusAutomation || statusAutomation.is_default) &&\n        this.isDarkTheme\n      ) {\n        return '#5F626A'\n      } else if (this.isDarkTheme) {\n        return colors.darkenColor(statusAutomation.color)\n      } else {\n        return statusAutomation.color\n      }\n    },\n\n    color (statusAutomation) {\n      if ((!statusAutomation || !statusAutomation.is_default) || this.isDarkTheme) {\n        return 'white'\n      } else {\n        return '#333'\n      }\n    },\n\n    toggleStatusAutomationsList () {\n      this.showStatusAutomationsList = !this.showStatusAutomationsList\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .select-input,\n  .status-automation-line,\n  .status-automation-combo {\n    background: $dark-grey-light;\n    border-color: $dark-grey;\n  }\n\n  .status-automation-line:hover {\n    background: $dark-purple;\n  }\n}\n\n.status-automation-combo {\n  background: $white;\n  border: 1px solid $light-grey-light;\n  user-select: none;\n  cursor: pointer;\n  margin: 0;\n  margin-top: 1px;\n  vertical-align: middle;\n  position: relative;\n}\n\n.status-automation-combo:hover {\n  border: 1px solid $green;\n}\n\n.field--narrow .status-automation-combo {\n  padding: 0;\n  margin: 0;\n}\n\n.selected-status-automation-line {\n  text-transform: uppercase;\n  flex: 1;\n}\n\n.status-automation-line {\n  background: $white;\n  cursor: pointer;\n  margin: 0;\n  text-transform: uppercase;\n\n  &:hover {\n    background: $purple;\n  }\n}\n\n.down-icon {\n  width: 15px;\n  min-width: 15px;\n  margin-right: 0.4em;\n  color: $green;\n  cursor: pointer;\n}\n\n.select-input {\n  background: $white;\n  position: absolute;\n  border: 1px solid $light-grey-light;\n  z-index: 300;\n  margin-left: -1px;\n  max-height: 180px;\n  top: 54px;\n  left: 0;\n  overflow-y: auto;\n}\n\n.field .label {\n  padding-top: 5px;\n}\n</style>\n","<template>\n  <div class=\"columns\">\n    <div class=\"column\">\n      <template v-if=\"remainingStatusAutomations.length > 0\">\n        <div\n          class=\"flexrow mt1 mb1 add-status-automation\"\n          v-if=\"remainingStatusAutomations\"\n        >\n          <combobox-status-automation\n            class=\"flexrow-item selector\"\n            :status-automations-list=\"remainingStatusAutomations\"\n            v-model=\"statusAutomationId\"\n          />\n          <button\n            class=\"button flexrow-item\"\n            @click=\"addStatusAutomation\"\n          >\n            {{ $t('main.add') }}\n          </button>\n        </div>\n      </template>\n\n      <div\n        class=\"box\"\n        v-if=\"isEmpty(productionStatusAutomations)\"\n      >\n        {{ $t('settings.production.empty_automation_list') }}\n      </div>\n\n      <status-automation-list\n        :entries=\"productionStatusAutomations\"\n        v-if=\"!isEmpty(productionStatusAutomations)\"\n      />\n  </div>\n</div>\n</template>\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport ComboboxStatusAutomation from '@/components/widgets/ComboboxStatusAutomation'\nimport StatusAutomationList from '@/components/lists/StatusAutomationList'\n\nexport default {\n  name: 'production-status-automations',\n\n  components: {\n    ComboboxStatusAutomation,\n    StatusAutomationList\n  },\n\n  data () {\n    return {\n      statusAutomations: [],\n      statusAutomationId: ''\n    }\n  },\n\n  mounted () {\n    if (this.remainingStatusAutomations.length > 0) {\n      this.statusAutomationId = this.remainingStatusAutomations[0].id\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'productionStatusAutomations',\n      'statusAutomationMap',\n      'remainingStatusAutomations'\n    ])\n  },\n\n  methods: {\n    ...mapActions([\n      'addStatusAutomationToProduction'\n    ]),\n\n    isEmpty (list) {\n      return !list || list.length === 0\n    },\n\n    addStatusAutomation () {\n      this.addStatusAutomationToProduction(this.statusAutomationId)\n      if (this.remainingStatusAutomations.length > 0) {\n        this.statusAutomationId = this.remainingStatusAutomations[0].id\n      } else {\n        // Clean data to avoid duplicated data in combobox\n        this.statusAutomationId = ''\n      }\n    }\n  },\n\n  watch: {\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.column {\n  overflow-y: initial;\n}\n\n.datatable th {\n  color: var(--text);\n}\n\ntable {\n  margin-bottom: 1.5em;\n}\n\nth {\n  padding-left: 10px;\n  padding-bottom: 5px;\n}\n\ntd p {\n  color: var(--text);\n}\n\ntd.name {\n  flex: 1;\n}\n\n.start-date {\n  width: 135px;\n}\n\n.end-date {\n  width: 135px;\n}\n\n.remove {\n  width: 100px;\n}\n\ntd ::v-deep p.control.flexrow {\n  width: 105px;\n}\n\n.field {\n  margin-bottom: 0;\n}\n\n.section-title {\n  color: $grey;\n  font-size: 1.2em;\n  margin-bottom: 1em;\n  margin-top: 2em;\n  text-transform: uppercase;\n}\n</style>\n","<template>\n  <div class=\"production-settings fixed-page\">\n    <div class=\"wrapper\">\n    <div class=\"tabs\">\n      <ul>\n        <li :class=\"{'is-active': isActiveTab('brief')}\">\n          <a @click=\"activeTab = 'brief'\">\n            {{ $t('productions.brief.title')}}\n          </a>\n        </li>\n        <li :class=\"{'is-active': isActiveTab('parameters')}\">\n          <a @click=\"activeTab = 'parameters'\">\n            {{ $t('productions.parameters.title')}}\n          </a>\n        </li>\n        <li :class=\"{'is-active': isActiveTab('taskStatus')}\">\n          <a @click=\"activeTab = 'taskStatus'\">\n            {{ $t('task_status.title')}}\n          </a>\n        </li>\n        <li :class=\"{'is-active': isActiveTab('taskTypes')}\">\n          <a @click=\"activeTab = 'taskTypes'\">\n            {{ $t('task_types.title')}}\n          </a>\n        </li>\n        <li :class=\"{'is-active': isActiveTab('assetTypes')}\">\n          <a @click=\"activeTab = 'assetTypes'\">\n            {{ $t('asset_types.title')}}\n          </a>\n        </li>\n        <li :class=\"{'is-active': isActiveTab('statusAutomations')}\">\n          <a @click=\"activeTab = 'statusAutomations'\">\n            {{ $t('status_automations.title')}}\n          </a>\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"tab\" v-show=\"isActiveTab('brief')\">\n      <ProductionBrief />\n    </div>\n\n    <div class=\"tab\" v-show=\"isActiveTab('parameters')\">\n      <production-parameters />\n    </div>\n\n    <div class=\"tab\" v-show=\"isActiveTab('assetTypes')\">\n      <div class=\"flexrow mt1 mb1 add-asset-type\">\n        <combobox\n          class=\"flexrow-item\"\n          :options=\"remainingAssetTypes\"\n          v-model=\"assetTypeId\"\n        />\n        <button\n          class=\"button flexrow-item\"\n          @click=\"addAssetType\"\n        >\n          {{ $t('main.add') }}\n        </button>\n      </div>\n      <div\n        class=\"box\"\n        v-if=\"isEmpty(currentProduction.asset_types)\"\n      >\n        {{ $t('settings.production.empty_list') }}\n      </div>\n      <table class=\"datatable list\" v-else>\n        <tbody class=\"datatable-body\">\n          <tr\n            class=\"datatable-row\"\n            :key=\"assetType.id\"\n            v-for=\"assetType in productionAssetTypes\"\n          >\n            <td class=\"name\">{{ assetType.name }}</td>\n            <td>\n              <button\n                class=\"button\"\n                @click=\"removeAssetType(assetType.id)\"\n              >\n                {{ $t('main.remove') }}\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"tab\" v-show=\"isActiveTab('taskTypes')\">\n      <production-task-types />\n    </div>\n\n    <div class=\"tab\" v-show=\"isActiveTab('taskStatus')\">\n      <div\n        class=\"flexrow mt1 mb1 add-task-status\"\n        v-if=\"!isEmpty(remainingTaskStatuses)\"\n      >\n        <combobox-status\n          class=\"flexrow-item selector\"\n          :task-status-list=\"remainingTaskStatuses\"\n          v-model=\"taskStatusId\"\n        />\n        <button\n          class=\"button flexrow-item\"\n          @click=\"addTaskStatus\"\n        >\n          {{ $t('main.add') }}\n        </button>\n      </div>\n      <div\n        class=\"box\"\n        v-if=\"isEmpty(currentProduction.task_statuses)\"\n      >\n        {{ $t('settings.production.empty_list') }}\n      </div>\n      <table class=\"datatable\" v-else>\n        <thead>\n          <tr>\n            <th class=\"th-name\">{{ $t('task_status.fields.name') }}</th>\n            <th class=\"th-short-name\">{{ $t('task_status.fields.short_name') }}</th>\n            <th class=\"th-bool\">{{ $t('task_status.fields.is_done') }}</th>\n            <th class=\"th-bool\">{{ $t('task_status.fields.is_retake') }}</th>\n            <th class=\"th-bool\">{{ $t('task_status.fields.is_artist_allowed') }}</th>\n            <th class=\"th-bool\">{{ $t('task_status.fields.is_client_allowed') }}</th>\n          </tr>\n        </thead>\n        <tbody class=\"datatable-body\">\n          <template v-for=\"taskStatus in productionTaskStatuses\">\n            <tr\n              class=\"datatable-row\"\n              :key=\"taskStatus.id\"\n              v-if=\"taskStatus\"\n            >\n              <td>\n                {{taskStatus.name}}\n              </td>\n              <td class=\"name\">\n                <validation-tag\n                  :is-static=\"true\"\n                  :task=\"{ task_status_id: taskStatus.id }\"\n                />\n              </td>\n              <boolean-cell :value=taskStatus.is_done />\n              <boolean-cell :value=taskStatus.is_retake />\n              <boolean-cell :value=taskStatus.is_artist_allowed />\n              <boolean-cell :value=taskStatus.is_client_allowed />\n              <td>\n                <button\n                  class=\"button\"\n                  @click=\"removeTaskStatus(taskStatus.id)\"\n                >\n                  {{ $t('main.remove') }}\n                </button>\n              </td>\n            </tr>\n          </template>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"tab\" v-show=\"isActiveTab('statusAutomations')\">\n      <production-status-automations />\n    </div>\n  </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport BooleanCell from '@/components/cells/BooleanCell'\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxStatus from '@/components/widgets/ComboboxStatus'\nimport ProductionBrief from '@/components/pages/production/ProductionBrief'\nimport ProductionParameters from '@/components/pages/production/ProductionParameters'\nimport ProductionTaskTypes from '@/components/pages/production/ProductionTaskTypes'\nimport ProductionStatusAutomations from '@/components/pages/production/ProductionStatusAutomations'\nimport ValidationTag from '@/components/widgets/ValidationTag'\n\nexport default {\n  name: 'production-settings',\n  components: {\n    BooleanCell,\n    Combobox,\n    ComboboxStatus,\n    ProductionBrief,\n    ProductionParameters,\n    ProductionTaskTypes,\n    ProductionStatusAutomations,\n    ValidationTag\n  },\n\n  data () {\n    return {\n      activeTab: 'brief',\n      assetTypeId: '',\n      taskStatusId: ''\n    }\n  },\n\n  mounted () {\n    if (this.remainingAssetTypes.length > 0) {\n      this.assetTypeId = this.remainingAssetTypes[0].value\n    }\n    if (this.remainingTaskStatuses.length > 0) {\n      this.taskStatusId = this.remainingTaskStatuses[0].id\n    }\n    if (this.$route.query.tab) {\n      this.activeTab = this.$route.query.tab\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetTypeMap',\n      'currentProduction',\n      'assetTypes',\n      'productionAssetTypes',\n      'productionTaskTypes',\n      'productionTaskStatuses',\n      'productionStatusAutomations',\n      'taskStatus',\n      'taskStatusMap',\n      'taskTypeMap',\n      'taskTypes',\n      'isTVShow'\n    ]),\n\n    remainingAssetTypes () {\n      return this.assetTypes\n        .filter(t => !this.currentProduction.asset_types.includes(t.id))\n        .map(t => ({ label: t.name, value: t.id }))\n    },\n\n    remainingTaskStatuses () {\n      return this.taskStatus\n        .filter(s => !this.currentProduction.task_statuses.includes(s.id))\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'addAssetTypeToProduction',\n      'addTaskStatusToProduction',\n      'removeAssetTypeFromProduction',\n      'removeTaskStatusFromProduction'\n    ]),\n\n    isEmpty (list) {\n      return !list || list.length === 0\n    },\n\n    isActiveTab (tab) {\n      return this.activeTab === tab\n    },\n\n    addAssetType () {\n      this.addAssetTypeToProduction(this.assetTypeId)\n      if (this.remainingAssetTypes.length > 0) {\n        this.assetTypeId = this.remainingAssetTypes[0].value\n      }\n    },\n\n    removeAssetType (assetTypeId) {\n      this.removeAssetTypeFromProduction(assetTypeId)\n    },\n\n    addTaskStatus () {\n      this.addTaskStatusToProduction(this.taskStatusId)\n      if (this.remainingTaskStatuses.length > 0) {\n        this.taskStatusId = this.remainingTaskStatuses[0].id\n      } else {\n        // Clean data to avoid duplicated data in combobox\n        this.taskStatusId = ''\n      }\n    },\n\n    async removeTaskStatus (taskStatusId) {\n      await this.removeTaskStatusFromProduction(taskStatusId)\n      await this.$nextTick()\n      // Reselect the remainingTaskStatuses to avoid empty taskStatusId\n      if (this.remainingTaskStatuses.length > 0) {\n        this.taskStatusId = this.remainingTaskStatuses[0].id\n      }\n    },\n\n    getBooleanTranslation (bool) {\n      return bool ? this.$t('main.yes') : this.$t('main.no')\n    }\n  },\n\n  watch: {\n    activeTab () {\n      if (this.$route.query.tab !== this.activeTab) {\n        this.$router.push({\n          query: {\n            tab: this.activeTab\n          }\n        })\n      }\n    }\n  },\n\n  metaInfo () {\n    return {\n      title: `${this.currentProduction.name} | ${this.$t('settings.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.datatable th {\n  color: var(--text);\n}\np {\n  color: var(--text);\n}\n.fixed-page {\n  display: flex;\n}\n\n.wrapper {\n  margin-top: 0px;\n  overflow-y: scroll;\n  padding: 2em;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.tabs {\n  min-height: 2em;\n}\n\n.tabs ul {\n  margin-left: 0;\n}\n\n.tab {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  padding-left: 2px;\n  padding-top: 0.5em;\n}\n\nh2.subtitle {\n  color: $grey;\n  font-size: 1.2em;\n  font-weight: bold;\n  margin-bottom: 0.4em;\n  text-transform: uppercase;\n}\n\n.field {\n  margin-bottom: 0;\n}\n\n.list {\n  width: 400px;\n  min-width: 400px;\n  max-width: 400px;\n\n  .name {\n    width: 100%;\n  }\n}\n\n.th-name {\n  width: 200px;\n}\n\n.th-short-name {\n  width: 120px;\n}\n\n.th-bool {\n  width: 140px;\n}\n\nth {\n  padding-left: 10px;\n  padding-bottom: 5px;\n}\n\n.box {\n  max-width: 400px;\n}\n</style>\n"],"names":["_sfc_main","ButtonSimple","TextareaField","mapGetters","mapActions","str","input","renderMarkdown","Combobox","ComboboxBoolean","DateField","FileUpload","TextField","PRODUCTION_TYPE_OPTIONS","newProductionType","formData","isTVShow","parseSimpleDate","formatSimpleDate","TaskTypeCell","parseDate","startDate","moment","endDate","data","ComboboxTaskType","draggable","ProductionTaskType","err","sortByName","t","list","type","arr","sortTaskTypes","taskType","scheduleItem","formatFullDate","forms","now","func","form","taskTypes","item","index","TaskTypeName","TaskStatusName","route","ChevronDownIcon","ComboboxMask","StatusAutomationItem","status","statusAutomation","colors","ComboboxStatusAutomation","StatusAutomationList","BooleanCell","ComboboxStatus","ProductionBrief","ProductionParameters","ProductionTaskTypes","ProductionStatusAutomations","ValidationTag","tab","assetTypeId","taskStatusId","bool"],"mappings":"waA4CA,MAAAA,EAAA,CACA,KAAA,mBACA,WAAA,CACA,aAAAC,EACA,cAAAC,CACA,EACA,MAAA,CACA,MAAA,CACA,MAAA,GACA,UAAA,GACA,UAAA,GACA,OAAA,CACA,UAAA,EACA,CACA,CACA,EACA,SAAA,CACA,GAAAC,EAAA,CACA,mBACA,CAAA,EAEA,UAAA,CAAA,OAAA,KAAA,MAAA,QAAA,CACA,EACA,SAAA,CACA,KAAA,oBACA,KAAA,MAAA,KAAA,kBAAA,YAEA,EACA,QAAA,CACA,GAAAC,EAAA,CACA,iBACA,eACA,CAAA,EAEA,QAAAC,EAAA,CACA,MAAA,CAAAA,GAAAA,EAAA,SAAA,CACA,EAEA,aAAA,CACA,KAAA,UAAA,GACA,KAAA,UAAA,IAAA,CACA,KAAA,SAAA,MAAA,CACA,CAAA,CACA,EAEA,MAAA,WAAA,CACA,KAAA,UAAA,GACA,GAAA,CACA,MAAA,KAAA,eACA,CACA,GAAA,KAAA,kBAAA,GACA,YAAA,KAAA,KACA,CACA,CACA,MAAA,CACA,KAAA,OAAA,UAAA,GACA,KAAA,UAAA,GACA,MACA,CACA,KAAA,UAAA,GACA,KAAA,UAAA,EACA,EAEA,gBAAAC,EAAA,CACA,OAAAC,EAAAD,CAAA,CACA,CACA,CACA,ujCC4BA,MAAAN,EAAA,CACA,KAAA,wBACA,WAAA,CACA,SAAAQ,EACA,gBAAAC,EACA,UAAAC,EACA,WAAAC,EACA,UAAAC,EACA,aAAAX,CACA,EAEA,MAAA,CACA,MAAA,CACA,SAAA,KACA,UAAA,GACA,QAAA,GACA,cAAA,GACA,sBAAAY,EACA,KAAA,CACA,KAAA,GACA,WAAA,IAAA,KACA,SAAA,IAAA,KACA,YAAA,EACA,aAAA,EACA,IAAA,GACA,YAAA,EACA,oBAAA,QACA,MAAA,GACA,WAAA,GACA,gBAAA,OACA,CACA,CACA,EACA,SAAA,CACA,GAAAV,EAAA,CACA,oBACA,2BACA,mBACA,UACA,CAAA,CACA,EACA,SAAA,CACA,KAAA,UAAA,CACA,EACA,MAAA,CACA,kBAAA,CACA,SAAA,CACA,KAAA,UAAA,EACA,KAAA,yBAAA,KAAA,QAAA,CACA,EACA,KAAA,EACA,EACA,uBAAAW,EAAA,CACA,KAAA,yBAAAA,IAAA,QAAA,CACA,CACA,EACA,QAAA,CACA,GAAAV,EAAA,CACA,iBACA,yBACA,wBACA,CAAA,EAEA,eAAAW,EAAA,CACA,KAAA,SAAAA,EACA,KAAA,uBAAAA,CAAA,CACA,EAEA,QAAAV,EAAA,CACA,MAAA,CAAAA,GAAAA,EAAA,SAAA,CACA,EAEA,iBAAA,CACA,KAAA,MAAA,UAAA,KAAA,IAAA,CACA,EAGA,yBAAAW,EAAA,CACA,KAAA,cAAAA,EACAA,GAAA,KAAA,mBACA,KAAA,KAAA,YAAA,KAAA,kBAAA,YACA,KAAA,KAAA,aAAA,KAAA,kBAAA,eAEA,KAAA,KAAA,YAAA,EACA,KAAA,KAAA,aAAA,EAEA,EAEA,WAAA,CACA,KAAA,kBACA,KAAA,KAAA,CACA,KAAA,KAAA,kBAAA,KACA,WACAC,EAAA,KAAA,kBAAA,UAAA,EAAA,OAAA,EACA,SAAAA,EAAA,KAAA,kBAAA,QAAA,EAAA,OAAA,EACA,gBAAA,KAAA,kBAAA,iBAAA,QACA,aAAA,KAAA,kBAAA,aACA,IAAA,KAAA,kBAAA,IACA,YAAA,KAAA,kBAAA,YACA,YAAA,KAAA,kBAAA,YACA,oBAAA,KAAA,kBAAA,oBACA,OACA,QACA,MAAA,KAAA,kBAAA,MACA,WAAA,KAAA,kBAAA,UACA,EAEA,KAAA,KAAA,CACA,KAAA,GACA,WAAA,IAAA,KACA,SAAA,IAAA,KACA,gBAAA,QACA,YAAA,EACA,aAAA,EACA,YAAA,EACA,oBAAA,QACA,IAAA,GACA,MAAA,GACA,WAAA,EACA,CAEA,EAEA,MAAA,gBAAA,CACA,KAAA,UAAA,GACA,GAAA,CACA,MAAA,KAAA,eACA,CACA,GAAA,KAAA,kBAAA,GACA,GAAA,KAAA,KACA,WAAAC,EAAA,KAAA,KAAA,UAAA,EACA,SAAAA,EAAA,KAAA,KAAA,QAAA,CACA,CACA,EACA,KAAA,0BACA,MAAA,KAAA,uBAAA,KAAA,kBAAA,EAAA,CAEA,MAAA,CACA,KAAA,UAAA,GACA,KAAA,QAAA,GACA,MACA,CACA,KAAA,UAAA,EACA,CACA,CACA,g4HClPA,MAAAlB,EAAA,CACA,KAAA,uBAEA,WAAA,CAEA,aAAAmB,CACA,EAEA,MAAA,CACA,SAAA,CACA,SAAA,GACA,KAAA,MACA,EACA,aAAA,CACA,SAAA,GACA,KAAA,MACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,UAAA,KACA,QAAA,KACA,OAAA,EACA,CACA,EAEA,SAAA,CACA,GAAAhB,EAAA,CACA,oBACA,qBACA,CAAA,EAEA,qBAAA,CAKA,MAJA,CACA,GAAAiB,EAAA,KAAA,kBAAA,UAAA,EAAA,OAAA,EACA,KAAAA,EAAA,KAAA,kBAAA,QAAA,EAAA,OAAA,CACA,CAEA,EAEA,kBAAA,CAKA,MAJA,CACA,GAAA,KAAA,UACA,KAAAA,EAAA,KAAA,kBAAA,QAAA,EAAA,OAAA,CACA,CAEA,CACA,EAEA,SAAA,CACA,KAAA,UAAAA,EAAA,KAAA,aAAA,UAAA,EAAA,OAAA,EACA,KAAA,QAAAA,EAAA,KAAA,aAAA,QAAA,EAAA,OAAA,EACA,KAAA,UAAA,IAAA,CACA,KAAA,OAAA,EACA,CAAA,CACA,EAEA,QAAA,CACA,GAAAhB,EAAA,CACA,CAAA,CACA,EAEA,MAAA,CACA,WAAA,CACA,GAAA,KAAA,OAAA,OACA,MAAAiB,EAAAC,EAAA,KAAA,SAAA,EACA,IAAAC,EAAAD,EAAA,KAAA,OAAA,EACA,KAAA,OAAA,GACAC,EAAA,SAAAF,CAAA,IACAE,EAAAF,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EACA,KAAA,QAAAE,EAAA,OAAA,GAEA,MAAAC,EAAA,CAAA,GAAA,KAAA,YAAA,EACAA,EAAA,UAAAH,EACAG,EAAA,QAAAD,EACA,KAAA,MAAA,eAAAC,CAAA,EACA,KAAA,UAAA,IAAA,CACA,KAAA,OAAA,EACA,CAAA,CACA,EAEA,SAAA,CACA,GAAA,KAAA,OAAA,OACA,IAAAH,EAAAC,EAAA,KAAA,SAAA,EACA,MAAAC,EAAAD,EAAA,KAAA,OAAA,EACA,KAAA,OAAA,GACAC,EAAA,SAAAF,CAAA,IACAA,EAAAE,EAAA,MAAA,EAAA,IAAA,GAAA,MAAA,EACA,KAAA,UAAAF,EAAA,OAAA,GAEA,MAAAG,EAAA,CAAA,GAAA,KAAA,YAAA,EACAA,EAAA,UAAAH,EACAG,EAAA,QAAAD,EACA,KAAA,MAAA,eAAAC,CAAA,EACA,KAAA,UAAA,IAAA,CACA,KAAA,OAAA,EACA,CAAA,CACA,EAEA,cAAA,CACA,KAAA,OAAA,GACA,KAAA,UAAAJ,EAAA,KAAA,aAAA,UAAA,EAAA,OAAA,EACA,KAAA,QAAAA,EAAA,KAAA,aAAA,QAAA,EAAA,OAAA,EACA,KAAA,UAAA,IAAA,CACA,KAAA,OAAA,EACA,CAAA,CACA,CACA,CACA,obClDA,MAAApB,EAAA,CACA,KAAA,wBAEA,WAAA,CACA,iBAAAyB,EACA,UAAAC,EACA,mBAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,eAAA,CAAA,KAAA,EAAA,EACA,cAAA,CAAA,KAAA,EAAA,EACA,aAAA,EACA,iBAAA,CAAA,KAAA,EAAA,EACA,kBAAA,CAAA,KAAA,EAAA,EACA,cAAA,CAAA,KAAA,EAAA,EACA,WAAA,GACA,QAAA,CACA,aAAA,GACA,mBAAA,GACA,mBAAA,EACA,EACA,OAAA,CACA,aAAA,GACA,mBAAA,GACA,OAAA,EACA,CACA,CACA,EAEA,SAAA,CACA,KAAA,mBAAA,OAAA,IACA,KAAA,WAAA,KAAA,mBAAA,CAAA,EAAA,IAGA,KAAA,wBAAA,EACA,KAAA,oBACA,KAAA,aAAA,KAAA,kBAAA,aACA,KAAA,qBAAA,KAAA,iBAAA,EACA,KAAA,IAAA,CACA,KAAA,wBAAA,CACA,CAAA,EACA,MAAAC,GAAA,CACA,QAAA,MAAAA,CAAA,CACA,CAAA,EAEA,EAEA,SAAA,CACA,GAAAzB,EAAA,CACA,oBACA,uBACA,sBACA,2BACA,0BACA,0BACA,8BACA,6BACA,gBACA,cACA,YACA,UACA,CAAA,EAEA,oBAAA,CACA,OAAA0B,EACA,KAAA,UACA,OAAAC,GAAA,CAAA,KAAA,kBAAA,WAAA,SAAAA,EAAA,EAAA,CAAA,CACA,CACA,CACA,EAEA,QAAA,CACA,GAAA1B,EAAA,CACA,0BACA,qBACA,qBACA,iBACA,mBACA,uBACA,cACA,+BACA,kBACA,CAAA,EAEA,QAAA2B,EAAA,CACA,MAAA,CAAAA,GAAAA,EAAA,SAAA,CACA,EAEA,yBAAA,CAUA,CAAA,QAAA,OAAA,WAAA,UAAA,MAAA,EAAA,QAAAC,GAAA,CACA,MAAAC,EAAA,KAAA,aAAAD,YAAA,EACA,IAAAD,EAAAG,EACA,CAAA,GAAAD,CAAA,EAAA,KAAA,iBACA,EACAF,EAAAA,EAAA,IAAAI,IACA,CACA,SAAAA,EACA,aAAA,KAAA,2BAAAA,CAAA,CACA,EACA,EACA,KAAA,GAAAH,EAAA,YAAA,YAAA,EAAA,CACA,MAAA,KAAA,GAAA,GAAAA,EAAA,YAAA,UAAA,EACA,KAAAD,CACA,CACA,CAAA,CACA,EAEA,2BAAAI,EAAA,CAOA,OANA,KAAA,qBAAA,KACAC,GAAAA,EAAA,eAAAD,EAAA,EACA,GAAA,CACA,WAAAE,EAAAf,GAAA,EACA,SAAAe,EAAAf,GAAA,CACA,CAEA,EAEA,MAAA,aAAA,CACA,MAAA,KAAA,wBACA,CACA,WAAA,KAAA,WACA,SAAA,KAAA,eAAA,MACA,CACA,EACA,MAAA,KAAA,mBACA,CACA,UAAAA,EAAA,EACA,QAAAA,EAAA,EACA,WAAA,KAAA,kBAAA,GACA,aAAA,KAAA,UACA,CACA,EACA,KAAA,mBAAA,OAAA,EACA,KAAA,WAAA,KAAA,mBAAA,CAAA,EAAA,GAEA,KAAA,WAAA,GAEA,KAAA,wBAAA,CACA,EAEA,MAAA,eAAA,CAAA,SAAAa,EAAA,aAAAC,CAAA,EAAA,CACA,KAAA,OAAA,OAAA,GACA,GAAA,CACA,MAAA,KAAA,6BAAAD,EAAA,EAAA,EACAC,IAAA,OACA,KAAA,QAAA,mBAAA,GACA,MAAA,KAAA,mBAAAA,CAAA,EACA,KAAA,QAAA,mBAAA,GAEA,MAAA,CACA,KAAA,OAAA,OAAA,GACA,KAAA,QAAA,mBAAA,GACA,MACA,CACA,MAAA,KAAA,UAAA,EACA,KAAA,mBAAA,OAAA,IACA,KAAA,WAAA,KAAA,mBAAA,CAAA,EAAA,IAEA,KAAA,wBAAA,CACA,EAEA,MAAA,iBAAA,CACA,KAAA,QAAA,aAAA,GACA,KAAA,OAAA,aAAA,GACA,GAAA,CACA,MAAA,KAAA,eAAA,CACA,GAAA,KAAA,kBAAA,GACA,aAAA,KAAA,YACA,CAAA,CACA,OAAAR,EAAA,CACA,KAAA,OAAA,aAAA,GACA,QAAA,MAAAA,CAAA,CACA,CACA,KAAA,QAAA,aAAA,EACA,EAEA,MAAA,cAAAQ,EAAA,CACA,KAAA,OAAA,mBAAA,GACA,GAAA,CACA,MAAA,KAAA,iBAAAA,CAAA,CACA,OAAAR,EAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,OAAA,mBAAA,EACA,CACA,EAEA,MAAA,eAAAU,EAAA,CACA,MAAAC,EAAA,IAAA,KAAA,EAAA,QAAA,EACA,KAAA,SAAA,KAAA,UAAA,EACAA,EAAA,KAAA,SAAA,KAAA,CAAA,KAAA,UACA,KAAA,SAAAA,EACA,KAAA,SAAA,GACA,MAAAC,EAAA,mBAAAF,EAAA,IACA,MAAAG,GACA,MAAA,KAAA,iBAAAA,CAAA,CAEA,CAAA,EACA,KAAA,SAAA,GACA,KAAA,aACA,MAAA,KAAA,eAAAH,CAAA,EAEA,WAAA,IAAA,CACA,KAAA,OAAA,OAAA,0BAAA,KAAA,WAAA,CACA,EAAA,GAAA,GAEA,KAAA,YAAA,EAEA,EAEA,MAAA,iBAAAI,EAAA,CACA,MAAAJ,EAAA,CAAA,EACAI,EAAA,QAAA,CAAAC,EAAAC,IAAA,CACAA,GAAA,EACA,MAAAH,EAAA,CACA,UAAA,KAAA,kBAAA,GACA,WAAAE,EAAA,SAAA,GACA,SAAAC,CACA,EACAN,EAAA,KAAAG,CAAA,CACA,CAAA,EACA,MAAA,KAAA,eAAAH,CAAA,EACA,MAAA,KAAA,YAAA,CACA,CACA,EAEA,MAAA,CACA,kBAAA,CACA,SAAA,CACA,KAAA,aAAA,KAAA,kBAAA,aACA,KAAA,qBAAA,KAAA,iBAAA,EACA,KAAA,wBAAA,CACA,EACA,KAAA,EACA,CACA,CACA,owDCtSA,MAAAtC,GAAA,CACA,KAAA,yBACA,WAAA,CACA,aAAA6C,EACA,eAAAC,CACA,EAEA,MAAA,CACA,iBAAA,CACA,KAAA,OACA,QAAA,IACA,EACA,aAAA,CACA,KAAA,OACA,QAAA,IACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EAEA,SAAA,CACA,GAAA3C,EAAA,CACA,sBACA,gBACA,aACA,CAAA,EAEA,sBAAA,CACA,MAAA4C,EAAA,CACA,KAAA,oBACA,OAAA,CACA,cAAA,KAAA,aACA,qBAAA,KAAA,iBAAA,GACA,KAAA,KAAA,IAAA,KAAA,iBAAA,WAAA,YAAA,EAAA,CAAA,CACA,CACA,EAEA,OAAA,KAAA,iBAAA,YAAA,KAAA,OAAA,OAAA,cACAA,EAAA,KAAA,4BACAA,EAAA,OAAA,WACA,KAAA,iBAAA,YAAA,KAAA,OAAA,OAAA,YAEAA,CACA,CAEA,EAEA,QAAA,CACA,GAAA3C,EAAA,CACA,CAAA,CACA,CACA,8wCC9CA,MAAAJ,GAAA,CACA,KAAA,6BAEA,WAAA,CACA,gBAAAgD,EACA,aAAAC,EACA,qBAAAC,EACA,EAEA,MAAA,CACA,MAAA,CACA,0BAAA,EACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,QAAA,GACA,KAAA,MACA,EACA,sBAAA,CACA,QAAA,IAAA,CAAA,EACA,KAAA,KACA,EACA,MAAA,CACA,QAAA,GACA,KAAA,MACA,EACA,OAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,WAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,eAAA,CACA,QAAA,GACA,KAAA,OACA,CACA,EAEA,SAAA,CACA,KAAA,yBAAA,KAAA,gBACA,EAEA,SAAA,CACA,GAAA/C,EAAA,CACA,cACA,sBACA,gBACA,aACA,CAAA,EAEA,yBAAA,CACA,OAAA,KAAA,MACA,KAAA,oBAAA,IAAA,KAAA,KAAA,EACA,KAAA,eACA,CACA,WAAA,WACA,MAAA,MACA,EAEA,KAAA,sBAAA,CAAA,CAEA,CACA,EAEA,QAAA,CACA,uBAAAgD,EAAA,CACA,KAAA,MAAA,QAAAA,EAAA,EAAA,EACA,KAAA,0BAAA,EACA,EAEA,gBAAAC,EAAA,CACA,OACA,CAAAA,GAAAA,EAAA,aACA,CAAA,KAAA,YAEA,WAEA,CAAAA,GAAAA,EAAA,aACA,KAAA,YAEA,UACA,KAAA,YACAC,EAAA,YAAAD,EAAA,KAAA,EAEAA,EAAA,KAEA,EAEA,MAAAA,EAAA,CACA,MAAA,CAAAA,GAAA,CAAAA,EAAA,YAAA,KAAA,YACA,QAEA,MAEA,EAEA,6BAAA,CACA,KAAA,0BAAA,CAAA,KAAA,yBACA,CACA,CACA,qkCC3HA,MAAApD,GAAA,CACA,KAAA,gCAEA,WAAA,CACA,yBAAAsD,GACA,qBAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,kBAAA,CAAA,EACA,mBAAA,EACA,CACA,EAEA,SAAA,CACA,KAAA,2BAAA,OAAA,IACA,KAAA,mBAAA,KAAA,2BAAA,CAAA,EAAA,GAEA,EAEA,SAAA,CACA,GAAApD,EAAA,CACA,oBACA,8BACA,sBACA,4BACA,CAAA,CACA,EAEA,QAAA,CACA,GAAAC,EAAA,CACA,iCACA,CAAA,EAEA,QAAA2B,EAAA,CACA,MAAA,CAAAA,GAAAA,EAAA,SAAA,CACA,EAEA,qBAAA,CACA,KAAA,gCAAA,KAAA,kBAAA,EACA,KAAA,2BAAA,OAAA,EACA,KAAA,mBAAA,KAAA,2BAAA,CAAA,EAAA,GAGA,KAAA,mBAAA,EAEA,CACA,EAEA,MAAA,CACA,CACA,q9BCqFA,MAAA/B,GAAA,CACA,KAAA,sBACA,WAAA,CACA,YAAAwD,EACA,SAAAhD,EACA,eAAAiD,EACA,gBAAAC,EACA,qBAAAC,EACA,oBAAAC,GACA,4BAAAC,GACA,cAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,UAAA,QACA,YAAA,GACA,aAAA,EACA,CACA,EAEA,SAAA,CACA,KAAA,oBAAA,OAAA,IACA,KAAA,YAAA,KAAA,oBAAA,CAAA,EAAA,OAEA,KAAA,sBAAA,OAAA,IACA,KAAA,aAAA,KAAA,sBAAA,CAAA,EAAA,IAEA,KAAA,OAAA,MAAA,MACA,KAAA,UAAA,KAAA,OAAA,MAAA,IAEA,EAEA,SAAA,CACA,GAAA3D,EAAA,CACA,eACA,oBACA,aACA,uBACA,sBACA,yBACA,8BACA,aACA,gBACA,cACA,YACA,UACA,CAAA,EAEA,qBAAA,CACA,OAAA,KAAA,WACA,OAAA2B,GAAA,CAAA,KAAA,kBAAA,YAAA,SAAAA,EAAA,EAAA,CAAA,EACA,IAAAA,IAAA,CAAA,MAAAA,EAAA,KAAA,MAAAA,EAAA,EAAA,EAAA,CACA,EAEA,uBAAA,CACA,OAAA,KAAA,WACA,OAAA,GAAA,CAAA,KAAA,kBAAA,cAAA,SAAA,EAAA,EAAA,CAAA,CACA,CACA,EAEA,QAAA,CACA,GAAA1B,EAAA,CACA,2BACA,4BACA,gCACA,gCACA,CAAA,EAEA,QAAA2B,EAAA,CACA,MAAA,CAAAA,GAAAA,EAAA,SAAA,CACA,EAEA,YAAAgC,EAAA,CACA,OAAA,KAAA,YAAAA,CACA,EAEA,cAAA,CACA,KAAA,yBAAA,KAAA,WAAA,EACA,KAAA,oBAAA,OAAA,IACA,KAAA,YAAA,KAAA,oBAAA,CAAA,EAAA,MAEA,EAEA,gBAAAC,EAAA,CACA,KAAA,8BAAAA,CAAA,CACA,EAEA,eAAA,CACA,KAAA,0BAAA,KAAA,YAAA,EACA,KAAA,sBAAA,OAAA,EACA,KAAA,aAAA,KAAA,sBAAA,CAAA,EAAA,GAGA,KAAA,aAAA,EAEA,EAEA,MAAA,iBAAAC,EAAA,CACA,MAAA,KAAA,+BAAAA,CAAA,EACA,MAAA,KAAA,UAAA,EAEA,KAAA,sBAAA,OAAA,IACA,KAAA,aAAA,KAAA,sBAAA,CAAA,EAAA,GAEA,EAEA,sBAAAC,EAAA,CACA,OAAAA,EAAA,KAAA,GAAA,UAAA,EAAA,KAAA,GAAA,SAAA,CACA,CACA,EAEA,MAAA,CACA,WAAA,CACA,KAAA,OAAA,MAAA,MAAA,KAAA,WACA,KAAA,QAAA,KAAA,CACA,MAAA,CACA,IAAA,KAAA,SACA,CACA,CAAA,CAEA,CACA,EAEA,UAAA,CACA,MAAA,CACA,MAAA,GAAA,KAAA,kBAAA,UAAA,KAAA,GAAA,gBAAA,WACA,CACA,CACA"}