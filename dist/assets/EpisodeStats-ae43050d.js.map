{"version":3,"file":"EpisodeStats-ae43050d.js","sources":["../../src/components/lists/EpisodeStatsList.vue","../../src/components/pages/EpisodeStats.vue"],"sourcesContent":["<template>\n<div class=\"data-list\">\n  <div\n    class=\"datatable-wrapper\"\n    ref=\"body\"\n    v-scroll=\"onBodyScroll\"\n  >\n    <table class=\"datatable\">\n      <thead class=\"datatable-head\">\n        <tr>\n          <th class=\"expander\">\n          </th>\n          <th scope=\"col\" class=\"name datatable-row-header\" ref=\"th-episode\">\n            {{ $t('shots.fields.episode') }}\n          </th>\n          <th scope=\"col\" class=\"validation\">{{ $t('main.all') }}</th>\n          <th\n            scope=\"col\"\n            class=\"validation validation-cell\"\n            :key=\"taskTypeMap.get(columnId).id\"\n            v-for=\"columnId in validationColumns\">\n            <div\n              class=\"flexrow validation-content\"\n              :style=\"getValidationStyle(columnId)\"\n            >\n              <router-link\n                class=\"flexrow-item\"\n                :to=\"taskTypePath(columnId)\"\n                v-if=\"!isCurrentUserClient\"\n              >\n                {{ taskTypeMap.get(columnId).name }}\n              </router-link>\n              <span\n                class=\"flexrow-item\"\n                v-else\n              >\n                {{ taskTypeMap.get(columnId).name }}\n              </span>\n            </div>\n          </th>\n          <th scope=\"col\" class=\"actions\"></th>\n        </tr>\n      </thead>\n      <tbody\n        class=\"datatable-body\"\n        v-if=\"!isLoading\"\n      >\n        <tr\n          class=\"all-line datatable-row\"\n          v-if=\"showAll && !isEmptyList\"\n        >\n          <td class=\"expander\">\n          </td>\n\n          <td scope=\"col\" class=\"name datatable-row-header\">\n            {{ $t('episodes.all_episodes') }}\n          </td>\n\n          <stats-cell\n            :colors=\"chartColors('all', 'all')\"\n            :data=\"chartData('all', 'all')\"\n            :frames-data=\"chartData('all', 'all', 'frames')\"\n            :countMode=\"countMode\"\n            :displayMode=\"displayMode\"\n          />\n\n          <stats-cell\n            :style=\"getValidationStyle(columnId)\"\n            :key=\"'all-' + columnId\"\n            :colors=\"chartColors('all', columnId)\"\n            :data=\"chartData('all', columnId)\"\n            :frames-data=\"chartData('all', columnId, 'frames')\"\n            :countMode=\"countMode\"\n            :displayMode=\"displayMode\"\n            v-for=\"columnId in validationColumns\"\n          />\n\n          <td class=\"actions\"></td>\n        </tr>\n\n        <template\n          v-for=\"entry in entries\"\n        >\n          <tr\n            :key=\"entry.id\"\n            class=\"datatable-row\"\n          >\n\n            <td class=\"expander\" @click=\"toggleExpanded(entry.id)\">\n              <chevron-right-icon v-if=\"isRetakes && expanded[entry.id] !== true\" />\n              <chevron-down-icon v-if=\"isRetakes && expanded[entry.id] === true\" />\n            </td>\n\n            <td class=\"name datatable-row-header\">\n              {{ entry.name }}\n            </td>\n\n            <stats-cell\n              :colors=\"chartColors(entry.id, 'all')\"\n              :data=\"chartData(entry.id, 'all')\"\n              :frames-data=\"chartData(entry.id, 'all', 'frames')\"\n              :countMode=\"countMode\"\n              :displayMode=\"displayMode\"\n              v-if=\"isStats(entry.id, 'all')\"\n            />\n            <td\n              v-else\n            >\n            </td>\n\n            <stats-cell\n              :key=\"entry.id + columnId\"\n              :style=\"getValidationStyle(columnId)\"\n              :colors=\"chartColors(entry.id, columnId)\"\n              :data=\"chartData(entry.id, columnId)\"\n              :frames-data=\"chartData(entry.id, columnId, 'frames')\"\n              :countMode=\"countMode\"\n              :displayMode=\"displayMode\"\n              :label=\"chartLabel(entry.id, columnId)\"\n              :label-color=\"chartLabelColor(entry.id, columnId)\"\n              v-for=\"columnId in validationColumns\"\n              v-if=\"isStats(entry.id, columnId)\"\n            />\n            <td\n              :style=\"getValidationStyle(columnId)\"\n              v-else\n            >\n            </td>\n\n            <td class=\"actions\"></td>\n          </tr>\n          <template v-if=\"expanded[entry.id]\">\n            <tr\n              class=\"datatable-row\"\n              :key=\"takeNumber + '-' + entry.id\"\n              v-for=\"takeNumber in takeRange(entry.id)\"\n            >\n              <td class=\"expander\"></td>\n              <td class=\"name datatable-row-header\">\n                - Take {{ takeNumber }}\n              </td>\n              <td class=\"description\"></td>\n              <td\n              >\n              </td>\n\n              <template\n                v-for=\"columnId in validationColumns\"\n              >\n                <stats-cell\n                  :key=\"takeNumber + entry.id + columnId\"\n                  :style=\"getValidationStyle(columnId)\"\n                  :colors=\"chartColors(entry.id, columnId)\"\n                  :data=\"chartTakeData(entry.id, columnId, takeNumber)\"\n                  :frames-data=\"chartTakeData(entry.id, columnId, takeNumber, 'frames')\"\n                  :countMode=\"countMode\"\n                  :displayMode=\"displayMode\"\n                  v-if=\"chartRetakeMaxCount(entry.id, columnId) + 1 > takeNumber\"\n                />\n\n                <stats-cell\n                  :key=\"takeNumber + entry.id + columnId\"\n                  :style=\"getValidationStyle(columnId)\"\n                  :colors=\"chartColors(entry.id, columnId)\"\n                  :data=\"chartData(entry.id, columnId)\"\n                  :frames-data=\"chartData(entry.id, columnId, 'frames')\"\n                  :countMode=\"countMode\"\n                  :displayMode=\"displayMode\"\n                  v-else-if=\"\n                    isStats(entry.id, columnId) &&\n                    chartRetakeMaxCount(entry.id, columnId) + 1 === takeNumber\"\n                />\n                <td\n                  :key=\"takeNumber + entry.id + columnId\"\n                  :style=\"getValidationStyle(columnId)\"\n                  v-else\n                >\n                </td>\n              </template>\n\n              <td class=\"actions\"></td>\n            </tr>\n          </template>\n        </template>\n      </tbody>\n    </table>\n  </div>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isError\"\n  />\n\n  <div\n    class=\"has-text-centered\"\n    v-if=\"!isLoading && isEmptyList && !isCurrentUserClient\"\n  >\n    <p class=\"info\">\n      <img src=\"../../assets/illustrations/empty_shot.png\" />\n    </p>\n    <p class=\"info\">{{ $t('episodes.empty_list') }}</p>\n  </div>\n  <div\n    class=\"has-text-centered\"\n    v-if=\"!isLoading && isEmptyList && isCurrentUserClient\"\n  >\n    <p class=\"info\">\n      <img src=\"../../assets/illustrations/empty_shot.png\" />\n    </p>\n    <p class=\"info\">{{ $t('episodes.empty_list_client') }}</p>\n  </div>\n\n  <p class=\"has-text-centered nb-episodes\" v-if=\"!isEmptyList\">\n    {{ displayedEpisodesLength }}\n    {{ $tc('episodes.number', displayedEpisodesLength) }}\n  </p>\n</div>\n</template>\n\n<script>\nimport Vue from 'vue/dist/vue'\nimport { mapGetters, mapActions } from 'vuex'\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon\n} from 'vue-feather-icons'\n\nimport { entityListMixin } from '@/components/mixins/entity_list'\nimport { range } from '@/lib/time'\nimport {\n  getChartColors,\n  getChartData,\n  getChartRetakeCount,\n  getRetakeChartData\n} from '@/lib/stats'\nimport StatsCell from '@/components/cells/StatsCell'\nimport TableInfo from '@/components/widgets/TableInfo'\n\nexport default {\n  name: 'episode-list',\n  mixins: [entityListMixin],\n\n  components: {\n    ChevronDownIcon,\n    ChevronRightIcon,\n    StatsCell,\n    TableInfo\n  },\n\n  props: {\n    countMode: {\n      type: String,\n      default: 'count'\n    },\n    dataMode: {\n      type: String,\n      default: 'retakes'\n    },\n    displayMode: {\n      type: String,\n      default: 'pie'\n    },\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    showAll: {\n      type: Boolean,\n      default: false\n    },\n    validationColumns: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data () {\n    return {\n      busy: false,\n      expanded: {},\n      lastSelection: null,\n      takeLabelColors: ['#FB8C00', '#EF6C00', '#d35400', '#e74c3c', '#c0392b']\n    }\n  },\n\n  mounted () {\n    this.entries.forEach(e => { Vue.set(this.expanded, e.id, false) })\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'displayedEpisodesLength',\n      'episodeSearchText',\n      'episodeStats',\n      'episodeRetakeStats',\n      'isCurrentUserClient',\n      'isCurrentUserManager',\n      'isSingleEpisode',\n      'taskTypeMap'\n    ]),\n\n    isEmptyList () {\n      return this.entries &&\n             this.entries.length === 0 &&\n             !this.isLoading &&\n             !this.isError &&\n             (!this.episodeSearchText || this.episodeSearchText.length === 0)\n    },\n\n    isRetakes () {\n      return this.dataMode === 'retakes'\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'displayMoreEpisodes'\n    ]),\n\n    chartColors (entryId, columnId) {\n      if (this.isRetakes) {\n        return ['#ff3860', '#6f727a', '#22d160']\n      } else {\n        return getChartColors(this.episodeStats, entryId, columnId)\n      }\n    },\n\n    chartData (entryId, columnId, dataType = 'count') {\n      if (this.isRetakes) {\n        return getRetakeChartData(\n          this.episodeRetakeStats, entryId, columnId, dataType\n        )\n      } else {\n        return getChartData(this.episodeStats, entryId, columnId, dataType)\n      }\n    },\n\n    chartTakeData (entryId, columnId, takeNumber, dataType = 'count') {\n      const evolutionStats =\n        this.episodeRetakeStats[entryId][columnId].evolution\n      const nbRetakes = evolutionStats[takeNumber].retake[dataType]\n      const nbDones = evolutionStats[takeNumber].done[dataType]\n      const nbOthers = evolutionStats[takeNumber].other[dataType]\n      // Order here is important\n      return [\n        ['retake', nbRetakes, '#ff3860'],\n        ['other', nbOthers, '#6f727a'],\n        ['done', nbDones, '#22d160']\n      ]\n    },\n\n    chartLabel (entryId, columnId) {\n      if (this.isRetakes) {\n        const count = getChartRetakeCount(\n          this.episodeRetakeStats, entryId, columnId\n        )\n        return count >= 1 ? `Take ${count + 1}` : ''\n      } else {\n        return ''\n      }\n    },\n\n    chartLabelColor (entryId, columnId) {\n      if (this.isRetakes) {\n        let count = getChartRetakeCount(\n          this.episodeRetakeStats, entryId, columnId\n        )\n        count = Math.min(count, 4)\n        return this.takeLabelColors[count]\n      } else {\n        return ''\n      }\n    },\n\n    chartRetakeMaxCount (entryId, columnId) {\n      return getChartRetakeCount(this.episodeRetakeStats, entryId, columnId)\n    },\n\n    takeRange (entryId) {\n      return range(1, this.chartRetakeMaxCount(entryId, 'all') + 1)\n    },\n\n    isStats (entryId, columnId) {\n      return this.episodeStats[entryId] &&\n             this.episodeStats[entryId][columnId]\n    },\n\n    onBodyScroll (event, position) {\n      this.$emit('scroll', position.scrollTop)\n    },\n\n    setScrollPosition (scrollPosition) {\n      this.$refs.body.scrollTop = scrollPosition\n    },\n\n    taskTypePath (taskTypeId) {\n      const route = {\n        name: 'task-type',\n        params: {\n          production_id: this.currentProduction.id,\n          task_type_id: taskTypeId,\n          type: 'count'\n        }\n      }\n\n      if (this.isTVShow) {\n        route.name = 'episode-task-type'\n        route.params.episode_id = this.currentEpisode.id\n      }\n\n      return route\n    },\n\n    getPath (section, episodeId) {\n      const route = {\n        name: section,\n        params: {\n          production_id: this.currentProduction.id,\n          episode_id: episodeId\n        }\n      }\n\n      return route\n    },\n\n    toggleExpanded (episodeId) {\n      this.expanded[episodeId] = !this.expanded[episodeId]\n    }\n  },\n\n  watch: {\n    entries () {\n      this.entries.forEach(e => {\n        const value = this.expanded[e.id] || false\n        Vue.set(this.expanded, e.id, value)\n      })\n    },\n\n    isRetakes () {\n      if (!this.isRetakes) {\n        this.entries.forEach(e => { Vue.set(this.expanded, e.id, false) })\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.datatable-body tr:first-child th,\n.datatable-body tr:first-child td {\n  border-top: 0;\n}\n.name {\n  min-width: 100px;\n  width: 100px;\n  font-weight: bold;\n}\n\n.name a {\n  color: inherit;\n}\n\ntd.name {\n  font-size: 1.2em;\n}\n\n.expander {\n  cursor: pointer;\n  min-width: 10px;\n  width: 10px;\n  padding-top: 10px;\n}\n\n.description {\n  min-width: 200px;\n  max-width: 200px;\n  width: 200px;\n}\n\n.validation {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n  word-wrap: break-word;\n}\n\n.actions {\n  min-width: 150px;\n  width: 150px;\n}\n\nth.actions {\n  padding: 0.4em;\n}\n\n.info img {\n  max-width: 80vh;\n}\n</style>\n","<template>\n  <div class=\"episodes page fixed-page\">\n    <div class=\"episode-list-header page-header flexrow\">\n      <search-field\n        class=\"flexrow-item mt1\"\n        ref=\"episode-search-field\"\n        @change=\"onSearchChange\"\n        placeholder=\"ex: e01 s01, anim=wip\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        locale-key-prefix=\"statistics.\"\n        :label=\"$t('statistics.data_mode')\"\n        :options=\"dataModeOptions\"\n        v-model=\"dataMode\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        locale-key-prefix=\"statistics.\"\n        :label=\"$t('statistics.display_mode')\"\n        :options=\"displayModeOptions\"\n        v-model=\"displayMode\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        :label=\"$t('statistics.count_mode')\"\n        locale-key-prefix=\"statistics.\"\n        :options=\"countModeOptions\"\n        v-model=\"countMode\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        :label=\"$t('statistics.episode_status')\"\n        locale-key-prefix=\"statistics.\"\n        :options=\"statusModeOptions\"\n        v-model=\"statusMode\"\n      />\n\n      <span class=\"filler\"></span>\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"refresh\"\n        :title=\"$t('main.reload')\"\n        @click=\"reset\"\n      />\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"download\"\n        @click=\"exportStatisticsToCsv\"\n      />\n    </div>\n\n    <episode-stats-list\n      ref=\"episode-list\"\n      :entries=\"statusMode === 'running'\n        ? displayedEpisodes.filter(e => e.status === 'running')\n        : displayedEpisodes\"\n      :is-loading=\"isLoading\"\n      :is-error=\"isLoadingError\"\n      :validation-columns=\"episodeValidationColumns\"\n      :episode-stats=\"episodeStats\"\n      :episode-retakes-stats=\"episodeRetakeStats\"\n      :data-mode=\"dataMode\"\n      :count-mode=\"countMode\"\n      :display-mode=\"displayMode\"\n      :show-all=\"episodeSearchText.length === 0\"\n      @field-changed=\"onFieldChanged\"\n      @scroll=\"saveScrollPosition\"\n    />\n  </div>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { mapGetters, mapActions } from 'vuex'\nimport csv from '@/lib/csv'\nimport preferences from '@/lib/preferences'\nimport stringHelpers from '@/lib/string'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport Combobox from '@/components/widgets/Combobox'\nimport EpisodeStatsList from '@/components/lists/EpisodeStatsList.vue'\nimport SearchField from '@/components/widgets/SearchField'\n\nexport default {\n  name: 'episodes',\n\n  components: {\n    ButtonSimple,\n    Combobox,\n    EpisodeStatsList,\n    SearchField\n  },\n\n  data () {\n    return {\n      countMode: 'count',\n      dataMode: 'retakes',\n      displayMode: 'pie',\n      episodeToDelete: null,\n      episodeToEdit: null,\n      isLoading: true,\n      isLoadingError: false,\n      statusMode: 'running',\n      countModeOptions: [\n        { label: 'shots', value: 'count' },\n        { label: 'frames', value: 'frames' }\n      ],\n      dataModeOptions: [\n        { label: 'retakes', value: 'retakes' },\n        { label: 'status', value: 'status' }\n      ],\n      displayModeOptions: [\n        { label: 'pie', value: 'pie' },\n        { label: 'count', value: 'count' }\n      ],\n      statusModeOptions: [\n        { label: 'only_running', value: 'running' },\n        { label: 'all', value: 'all' }\n      ],\n      errors: {\n        edit: false,\n        del: false\n      },\n      modals: {\n        isNewDisplayed: false,\n        isDeleteDisplayed: false\n      },\n      loading: {\n        edit: false,\n        del: false\n      }\n    }\n  },\n\n  mounted () {\n    const mode = preferences.getPreference('stats:episode-mode') || 'retakes'\n    this.dataMode = mode\n    this.setDefaultSearchText()\n    this.setDefaultListScrollPosition()\n    this.isLoading = true\n    this.isLoadingError = false\n    this.initEpisodes()\n      .then(() => {\n        this.isLoading = false\n      })\n      .catch(err => {\n        this.isLoading = false\n        this.isLoadingError = true\n        console.error(err)\n      })\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'displayedEpisodes',\n      'episodesPath',\n      'isCurrentUserManager',\n      'episodes',\n      'episodeMap',\n      'episodePath',\n      'episodeStats',\n      'episodeRetakeStats',\n      'episodeSearchText',\n      'episodeListScrollPosition',\n      'episodeValidationColumns',\n      'taskStatusMap',\n      'taskTypeMap'\n    ]),\n\n    isRetakeDataMode () { return this.dataMode === 'retakes' }\n  },\n\n  methods: {\n    ...mapActions([\n      'computeEpisodeStats',\n      'deleteEpisode',\n      'editEpisode',\n      'hideAssignations',\n      'initEpisodes',\n      'loadEpisodeStats',\n      'loadEpisodeRetakeStats',\n      'loadShots',\n      'setLastProductionScreen',\n      'setEpisodeSearch',\n      'setEpisodeListScrollPosition',\n      'showAssignations'\n    ]),\n\n    setDefaultSearchText () {\n      if (this.episodeSearchText.length > 0) {\n        this.$refs['episode-search-field'].setValue(this.episodeSearchText)\n      }\n    },\n\n    setDefaultListScrollPosition () {\n      this.$refs['episode-list'].setScrollPosition(\n        this.episodeListScrollPosition\n      )\n    },\n\n    navigateToList () {\n      this.$router.push(this.episodesPath)\n    },\n\n    onSearchChange (event) {\n      const searchQuery = this.$refs['episode-search-field'].getValue()\n      this.setEpisodeSearch(searchQuery)\n    },\n\n    saveScrollPosition (scrollPosition) {\n      this.setEpisodeListScrollPosition(scrollPosition)\n    },\n\n    exportStatisticsToCsv () {\n      const nameData = [\n        moment().format('YYYYMMDD'),\n        this.currentProduction.name,\n        'episodes',\n        'statistics'\n      ]\n      if (this.isRetakeDataMode) nameData.splice(3, 0, 'retake')\n      const name = stringHelpers.slugify(nameData.join('_'))\n      if (this.isRetakeDataMode) {\n        csv.generateRetakeStatReports(\n          name,\n          this.episodeRetakeStats,\n          this.taskTypeMap,\n          this.taskStatusMap,\n          this.episodeMap,\n          this.countMode\n        )\n      } else {\n        csv.generateStatReports(\n          name,\n          this.episodeStats,\n          this.taskTypeMap,\n          this.taskStatusMap,\n          this.episodeMap,\n          this.countMode\n        )\n      }\n    },\n\n    onFieldChanged ({ entry, fieldName, value }) {\n      const data = { id: entry.id }\n      data[fieldName] = value\n      this.editEpisode(data)\n    },\n\n    reset () {\n      this.isLoading = true\n      this.isLoadingError = false\n      this.loadEpisodeStats(this.currentProduction.id)\n        .then(() => {\n          return this.loadEpisodeRetakeStats(this.currentProduction.id)\n        })\n        .then(() => {\n          this.isLoading = false\n        })\n        .catch(err => {\n          this.isLoading = false\n          this.isLoadingError = true\n          console.error(err)\n        })\n    }\n  },\n\n  watch: {\n    currentProduction () {\n      this.$refs['episode-search-field'].setValue('')\n      this.$store.commit('SET_SEQUENCE_LIST_SCROLL_POSITION', 0)\n      this.reset()\n    },\n\n    displayedEpisodes () {\n    },\n\n    dataMode () {\n      preferences.setPreference('stats:episode-mode', this.dataMode)\n    }\n  },\n\n  metaInfo () {\n    return {\n      title: `${this.currentProduction.name} ${this.$t('episodes.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n"],"names":["_sfc_main","entityListMixin","ChevronDownIcon","ChevronRightIcon","StatsCell","TableInfo","e","Vue","mapGetters","mapActions","entryId","columnId","getChartColors","dataType","getRetakeChartData","getChartData","takeNumber","evolutionStats","nbRetakes","nbDones","nbOthers","count","getChartRetakeCount","range","event","position","scrollPosition","taskTypeId","route","section","episodeId","value","ButtonSimple","Combobox","EpisodeStatsList","SearchField","mode","preferences","err","searchQuery","nameData","moment","name","stringHelpers","csv","entry","fieldName","data"],"mappings":"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"}