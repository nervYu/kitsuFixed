{"version":3,"file":"StatsCell-74748da2.js","sources":["../../src/components/cells/StatsCell.vue"],"sourcesContent":["<template>\n<td class=\"validation\">\n  <div class=\"flexrow\" v-if=\"displayMode === 'pie'\">\n    <pie-chart\n      class=\"flexrow-item\"\n      width=\"70px\"\n      height=\"50px\"\n      :legend=\"false\"\n      :colors=\"colors\"\n      :data=\"selectedData\"\n    />\n    <span\n      class=\"tag flexrow-item\"\n      :style=\"{ 'background-color': labelColor }\"\n      v-if=\"label\"\n    >\n      {{ label }}\n    </span>\n  </div>\n  <div v-else>\n    <div\n      :key=\"data[0]\"\n      v-if=\"data[0]\"\n      v-for=\"data in selectedData\">\n      <span class=\"stats-name\" :style=\"{ color: data[2] }\">\n       {{ data[0] }}\n      </span>\n      <span>\n      :\n      </span>\n      <span class=\"stats-value\">\n        {{ data[1] }} ({{ percent(data[1]) }}%)\n      </span>\n    </div>\n    <span\n      class=\"tag flexrow-item\"\n      :style=\"{ 'background-color': labelColor }\"\n      v-if=\"label\"\n    >\n      {{ label }}\n    </span>\n  </div>\n</td>\n</template>\n\n<script>\n/**\n * Components to display statistics as a pie or as text depending on the\n * selected display mode. Stats are based on count data (nb of shots or assets)\n * or on frames data (sum of shot frames) depending on the selected count mode.\n * Data format:\n * [['name', count, 'color'], ...  ]\n */\nexport default {\n  name: 'stats-cell',\n  components: {},\n\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    countMode: {\n      type: String,\n      default: 'count'\n    },\n    data: {\n      type: Array,\n      default: () => []\n    },\n    displayMode: {\n      type: String,\n      default: 'pie'\n    },\n    framesData: {\n      type: Array,\n      default: () => []\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    labelColor: {\n      type: String,\n      default: '#e67e22'\n    }\n  },\n\n  computed: {\n    selectedData () {\n      if (this.countMode === 'frames') {\n        return this.framesData\n      } else {\n        return this.data\n      }\n    },\n\n    total () {\n      return this.selectedData.reduce((acc, entry) => {\n        if (entry[1]) {\n          return acc + entry[1]\n        } else {\n          return acc\n        }\n      }, 0)\n    }\n  },\n\n  methods: {\n    percent (value) {\n      let percent = 0\n      if (this.total > 0) {\n        percent = (value / this.total) * 100\n      }\n      return percent.toFixed(2)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.stats-name {\n  text-transform: uppercase;\n}\n\n.tag {\n  background: $orange-carrot;\n  color: white;\n  cursor: default;\n  font-weight: bold;\n  text-transform: uppercase;\n}\n</style>\n"],"names":["_sfc_main","acc","entry","value","percent"],"mappings":"wCAqDA,MAAAA,EAAA,CACA,KAAA,aACA,WAAA,CAAA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,MACA,SAAA,EACA,EACA,UAAA,CACA,KAAA,OACA,QAAA,OACA,EACA,KAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EACA,YAAA,CACA,KAAA,OACA,QAAA,KACA,EACA,WAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EACA,MAAA,CACA,KAAA,OACA,QAAA,EACA,EACA,WAAA,CACA,KAAA,OACA,QAAA,SACA,CACA,EAEA,SAAA,CACA,cAAA,CACA,OAAA,KAAA,YAAA,SACA,KAAA,WAEA,KAAA,IAEA,EAEA,OAAA,CACA,OAAA,KAAA,aAAA,OAAA,CAAAC,EAAAC,IACAA,EAAA,CAAA,EACAD,EAAAC,EAAA,CAAA,EAEAD,EAEA,CAAA,CACA,CACA,EAEA,QAAA,CACA,QAAAE,EAAA,CACA,IAAAC,EAAA,EACA,OAAA,KAAA,MAAA,IACAA,EAAAD,EAAA,KAAA,MAAA,KAEAC,EAAA,QAAA,CAAA,CACA,CACA,CACA"}