{"version":3,"file":"SequenceStats-8f86487f.js","sources":["../../src/components/lists/SequenceStatsList.vue","../../src/components/pages/SequenceStats.vue"],"sourcesContent":["<template>\n<div class=\"data-list\">\n  <div\n    class=\"datatable-wrapper\"\n    ref=\"body\"\n    v-scroll=\"onBodyScroll\"\n  >\n    <table class=\"datatable\">\n      <thead class=\"datatable-head\">\n        <tr>\n          <th scope=\"col\" class=\"name datatable-row-header\" ref=\"th-sequence\">\n            {{ $t('shots.fields.sequence') }}\n          </th>\n          <th scope=\"col\" class=\"validation\">{{ $t('main.all') }}</th>\n          <th\n            scope=\"col\"\n            class=\"validation validation-cell\"\n            :key=\"columnId\"\n            v-for=\"columnId in validationColumns\"\n            v-if=\"!isLoading\"\n          >\n            <div\n              class=\"flexrow validation-content\"\n              :style=\"getValidationStyle(columnId)\"\n            >\n              <router-link\n                class=\"flexrow-item\"\n                :to=\"taskTypePath(columnId)\"\n                v-if=\"!isCurrentUserClient\"\n              >\n                {{ taskTypeMap.get(columnId).name }}\n              </router-link>\n              <span\n                class=\"flexrow-item\"\n                v-else\n              >\n                {{ taskTypeMap.get(columnId).name }}\n              </span>\n            </div>\n          </th>\n          <th scope=\"col\" class=\"actions\"></th>\n        </tr>\n      </thead>\n      <tbody\n        class=\"datatable-body\"\n        v-if=\"!isLoading\"\n      >\n\n        <tr\n          class=\"all-line datatable-row\"\n          v-if=\"showAll && !isEmptyList\"\n        >\n          <th scope=\"row\" class=\"name datatable-row-header\">\n            {{ $t('sequences.all_sequences') }}\n          </th>\n\n          <stats-cell\n            class=\"all-validation\"\n            :colors=\"chartColors('all', 'all')\"\n            :data=\"chartData('all', 'all')\"\n            :frames-data=\"chartData('all', 'all', 'frames')\"\n            :countMode=\"countMode\"\n            :displayMode=\"displayMode\"\n          />\n\n          <stats-cell\n            :style=\"getValidationStyle(columnId)\"\n            :key=\"'all-' + columnId\"\n            :colors=\"chartColors('all', columnId)\"\n            :data=\"chartData('all', columnId)\"\n            :frames-data=\"chartData('all', columnId, 'frames')\"\n            :countMode=\"countMode\"\n            :displayMode=\"displayMode\"\n            v-for=\"columnId in validationColumns\"\n          />\n\n          <td class=\"actions\"></td>\n        </tr>\n\n        <tr\n          class=\"datatable-row\"\n          :key=\"entry.id\"\n          v-for=\"entry in entries\"\n          v-if=\"isEntryStats(entry.id)\"\n        >\n\n          <td scope=\"row\" class=\"name datatable-row-header\">\n            {{ entry.name }}\n          </td>\n\n          <stats-cell\n            :colors=\"chartColors(entry.id, 'all')\"\n            :data=\"chartData(entry.id, 'all')\"\n            :frames-data=\"chartData(entry.id, 'all', 'frames')\"\n            :countMode=\"countMode\"\n            :displayMode=\"displayMode\"\n            v-if=\"isStats(entry.id, 'all')\"\n          />\n          <td\n            v-else\n          >\n          </td>\n\n          <stats-cell\n            :key=\"entry.id + columnId\"\n            :style=\"getValidationStyle(columnId)\"\n            :colors=\"chartColors(entry.id, columnId)\"\n            :data=\"chartData(entry.id, columnId)\"\n            :frames-data=\"chartData(entry.id, columnId, 'frames')\"\n            :countMode=\"countMode\"\n            :displayMode=\"displayMode\"\n            v-if=\"isStats(entry.id, columnId)\"\n            v-for=\"columnId in validationColumns\"\n          />\n          <td\n            :style=\"getValidationStyle(columnId)\"\n            v-else\n          >\n          </td>\n\n          <td class=\"actions\"></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isError\"\n  />\n\n  <div\n    class=\"has-text-centered\"\n    v-if=\"isEmptyList && !isCurrentUserClient && !isLoading\"\n  >\n    <p class=\"info\">\n      <img src=\"../../assets/illustrations/empty_shot.png\" />\n    </p>\n    <p class=\"info\">{{ $t('sequences.empty_list') }}</p>\n  </div>\n  <div\n    class=\"has-text-centered\"\n    v-if=\"isEmptyList && isCurrentUserClient && !isLoading\"\n  >\n    <p class=\"info\">\n      <img src=\"../../assets/illustrations/empty_shot.png\" />\n    </p>\n    <p class=\"info\">{{ $t('sequences.empty_list_client') }}</p>\n  </div>\n\n  <p\n    class=\"has-text-centered nb-sequences\"\n    v-if=\"!isEmptyList && !isLoading\"\n  >\n    {{ displayedSequencesLength }}\n    {{ $tc('sequences.number', displayedSequencesLength) }}\n  </p>\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { getChartColors, getChartData } from '@/lib/stats'\nimport { entityListMixin } from '@/components/mixins/entity_list'\n\nimport TableInfo from '@/components/widgets/TableInfo'\nimport StatsCell from '@/components/cells/StatsCell'\n\nexport default {\n  name: 'sequence-stats-list',\n  mixins: [entityListMixin],\n\n  components: {\n    StatsCell,\n    TableInfo\n  },\n\n  props: {\n    countMode: {\n      type: String,\n      default: 'count'\n    },\n    displayMode: {\n      type: String,\n      default: 'pie'\n    },\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    sequenceStats: {\n      type: Object,\n      default: () => {}\n    },\n    showAll: {\n      type: Boolean,\n      default: false\n    },\n    validationColumns: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data () {\n    return {\n      busy: false,\n      lastSelection: null\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'currentEpisode',\n      'displayedSequencesLength',\n      'isDarkTheme',\n      'isCurrentUserClient',\n      'isCurrentUserManager',\n      'isTVShow',\n      'sequenceSearchText',\n      'taskTypeMap'\n    ]),\n\n    isEmptyList () {\n      return this.entries &&\n             this.entries.length === 0 &&\n             !this.isLoading &&\n             !this.isError &&\n             (!this.sequenceSearchText || this.sequenceSearchText.length === 0)\n    }\n  },\n\n  methods: {\n    ...mapActions([\n    ]),\n\n    chartColors (entryId, columnId) {\n      return getChartColors(this.sequenceStats, entryId, columnId)\n    },\n\n    chartData (entryId, columnId, dataType = 'count') {\n      return getChartData(this.sequenceStats, entryId, columnId, dataType)\n    },\n\n    isStats (entryId, columnId) {\n      return this.sequenceStats[entryId] &&\n             this.sequenceStats[entryId][columnId]\n    },\n\n    isEntryStats (entryId) {\n      if (!this.sequenceStats[entryId] && this.sequenceSearchText) return false\n      if (!this.sequenceStats[entryId]) return true\n      let isStats = false\n      Object.keys(this.sequenceStats[entryId]).forEach((statKey) => {\n        isStats = isStats || this.sequenceStats[entryId][statKey]\n      })\n      return isStats\n    },\n\n    onBodyScroll (event, position) {\n      this.$emit('scroll', position.scrollTop)\n    },\n\n    setScrollPosition (scrollPosition) {\n      if (this.$refs.body) {\n        this.$refs.body.scrollTop = scrollPosition\n      }\n    },\n\n    editPath (sequenceId) {\n      return this.getPath('edit-sequence', sequenceId)\n    },\n\n    deletePath (sequenceId) {\n      return this.getPath('delete-sequence', sequenceId)\n    },\n\n    taskTypePath (taskTypeId) {\n      const route = {\n        name: 'task-type',\n        params: {\n          production_id: this.currentProduction.id,\n          task_type_id: taskTypeId,\n          type: 'shots'\n        }\n      }\n\n      if (this.isTVShow && this.currentEpisode) {\n        route.name = 'episode-task-type'\n        route.params.episode_id = this.currentEpisode.id\n      }\n\n      return route\n    },\n\n    getPath (section, sequenceId) {\n      const route = {\n        name: section,\n        params: {\n          production_id: this.currentProduction.id\n        }\n      }\n\n      if (this.isTVShow && this.currentEpisode) {\n        route.name = `episode-${section}`\n        route.params.episode_id = this.currentEpisode.id\n      }\n\n      if (sequenceId) {\n        route.params.sequence_id = sequenceId\n      }\n      return route\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.datatable-body tr:first-child th,\n.datatable-body tr:first-child td {\n  border-top: 0;\n}\n.episode {\n  min-width: 100px;\n  width: 100px;\n}\n\n.name {\n  min-width: 150px;\n  width: 150px;\n  font-weight: bold;\n}\n\n.name a {\n  color: inherit;\n}\n\ntd.name {\n  font-size: 1.2em;\n}\n\n.description {\n  min-width: 200px;\n  width: 200px;\n}\n\n.validation {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n  word-wrap: break-word;\n}\n\n.actions {\n  min-width: 100px;\n}\n\nth.actions {\n  padding: 0.4em;\n}\n\n.info img {\n  max-width: 80vh;\n}\n\n.actions {\n  width: 100%;\n  min-width: 150px;\n}\n</style>\n","<template>\n  <div class=\"sequences page fixed-page\">\n    <div class=\"sequence-list-header page-header flexrow\">\n      <search-field\n        class=\"flexrow-item mt1\"\n        ref=\"sequence-search-field\"\n        :can-save=\"true\"\n        @change=\"onSearchChange\"\n        @enter=\"saveSearchQuery\"\n        @save=\"saveSearchQuery\"\n        placeholder=\"ex: e01 s01 anim=wip\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        :label=\"$t('statistics.display_mode')\"\n        locale-key-prefix=\"statistics.\"\n        :options=\"displayModeOptions\"\n        v-model=\"displayMode\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        :label=\"$t('statistics.count_mode')\"\n        locale-key-prefix=\"statistics.\"\n        :options=\"countModeOptions\"\n        v-model=\"countMode\"\n      />\n      <span class=\"filler\">\n      </span>\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"refresh\"\n        :title=\"$t('main.reload')\"\n        @click=\"reloadData\"\n      />\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"download\"\n        :title=\"$t('main.csv.export_file')\"\n        @click=\"exportStatisticsToCsv\"\n      />\n    </div>\n\n    <div class=\"query-list mt1\">\n      <search-query-list\n        :queries=\"sequenceSearchQueries\"\n        @change-search=\"changeSearch\"\n        @remove-search=\"removeSearchQuery\"\n      />\n    </div>\n\n    <sequence-stats-list\n      ref=\"sequence-list\"\n      :count-mode=\"countMode\"\n      :display-mode=\"displayMode\"\n      :entries=\"displayedSequences\"\n      :is-loading=\"isShotsLoading || initialLoading\"\n      :is-error=\"isShotsLoadingError\"\n      :validation-columns=\"shotValidationColumns\"\n      :sequence-stats=\"sequenceStats\"\n      :show-all=\"sequenceSearchText.length === 0\"\n      @field-changed=\"onFieldChanged\"\n      @scroll=\"saveScrollPosition\"\n    />\n\n  </div>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { mapGetters, mapActions } from 'vuex'\nimport csv from '@/lib/csv'\nimport stringHelpers from '@/lib/string'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport Combobox from '@/components/widgets/Combobox'\nimport SearchField from '@/components/widgets/SearchField'\nimport SearchQueryList from '@/components/widgets/SearchQueryList'\nimport SequenceStatsList from '@/components/lists/SequenceStatsList.vue'\n\nexport default {\n  name: 'sequence-stats',\n\n  components: {\n    ButtonSimple,\n    Combobox,\n    SearchField,\n    SearchQueryList,\n    SequenceStatsList\n  },\n\n  data () {\n    return {\n      countMode: 'count',\n      displayMode: 'pie',\n      initialLoading: true,\n      countModeOptions: [\n        { label: 'shots', value: 'count' },\n        { label: 'frames', value: 'frames' }\n      ],\n      displayModeOptions: [\n        { label: 'pie', value: 'pie' },\n        { label: 'count', value: 'count' }\n      ]\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction',\n      'displayedSequences',\n      'isCurrentUserManager',\n      'isShotsLoading',\n      'isShotsLoadingError',\n      'isTVShow',\n      'searchSequenceFilters',\n      'sequences',\n      'sequenceMap',\n      'sequencesPath',\n      'sequenceStats',\n      'sequenceSearchText',\n      'sequenceSearchQueries',\n      'sequenceListScrollPosition',\n      'shotValidationColumns',\n      'taskTypeMap',\n      'taskStatusMap'\n    ])\n  },\n\n  mounted () {\n    this.loadShots(() => {\n      this.initSequences()\n        .then(() => {\n          this.initialLoading = false\n        })\n        .catch(err => console.error(err))\n      this.setDefaultSearchText()\n      this.setDefaultListScrollPosition()\n    })\n  },\n\n  methods: {\n    ...mapActions([\n      'computeSequenceStats',\n      'hideAssignations',\n      'initSequences',\n      'loadShots',\n      'removeSequenceSearch',\n      'saveSequenceSearch',\n      'setLastProductionScreen',\n      'setSequenceStatsSearch',\n      'setSequenceListScrollPosition',\n      'showAssignations'\n    ]),\n\n    reloadData () {\n      this.initialLoading = true\n      this.loadShots(() => {\n        this.initialLoading = false\n        this.computeSequenceStats()\n      })\n    },\n\n    setDefaultSearchText () {\n      if (this.sequenceSearchText.length > 0) {\n        this.$refs['sequence-search-field'].setValue(this.sequenceSearchText)\n      }\n    },\n\n    setDefaultListScrollPosition () {\n      if (this.$refs['sequence-list']) {\n        this.$refs['sequence-list'].setScrollPosition(\n          this.sequenceListScrollPosition\n        )\n      }\n    },\n\n    navigateToList () {\n      this.$router.push(this.sequencesPath)\n    },\n\n    onSearchChange (event) {\n      const searchQuery = this.$refs['sequence-search-field'].getValue()\n      this.setSequenceStatsSearch(searchQuery)\n    },\n\n    changeSearch (searchQuery) {\n      this.$refs['sequence-search-field'].setValue(searchQuery.search_query)\n      this.$refs['sequence-search-field']\n        .$emit('change', searchQuery.search_query)\n    },\n\n    saveSearchQuery (searchQuery) {\n      this.saveSequenceSearch(searchQuery)\n        .catch(console.error)\n    },\n\n    removeSearchQuery (searchQuery) {\n      this.removeSequenceSearch(searchQuery)\n        .catch(console.error)\n    },\n\n    saveScrollPosition (scrollPosition) {\n      this.setSequenceListScrollPosition(scrollPosition)\n    },\n\n    exportStatisticsToCsv () {\n      const nameData = [\n        moment().format('YYYYMMDD'),\n        this.currentProduction.name,\n        'sequences',\n        'statistics'\n      ]\n      if (this.currentEpisode) {\n        nameData.splice(2, 0, this.currentEpisode.name)\n      }\n      const name = stringHelpers.slugify(nameData.join('_'))\n      csv.generateStatReports(\n        name,\n        this.sequenceStats,\n        this.taskTypeMap,\n        this.taskStatusMap,\n        this.sequenceMap,\n        this.countMode\n      )\n    },\n\n    onFieldChanged ({ entry, fieldName, value }) {\n      const data = { id: entry.id }\n      data[fieldName] = value\n      this.editSequence(data)\n    }\n  },\n\n  watch: {\n    currentProduction () {\n      this.$refs['sequence-search-field'].setValue('')\n      this.$store.commit('SET_SEQUENCE_LIST_SCROLL_POSITION', 0)\n\n      if (!this.isTVShow) {\n        this.loadShots(() => {\n          this.initSequences()\n            .then(this.handleModalsDisplay)\n            .catch(err => console.error(err))\n        })\n      }\n    },\n\n    currentEpisode () {\n      if (this.isTVShow && this.currentEpisode) {\n        this.loadShots(() => {\n          this.initSequences()\n            .then(this.handleModalsDisplay)\n            .then(() => {\n              this.initialLoading = false\n            })\n            .catch(err => console.error(err))\n        })\n      }\n    },\n\n    searchSequenceFilters () {\n      this.computeSequenceStats()\n    }\n  },\n\n  metaInfo () {\n    if (this.isTVShow) {\n      return {\n        title: `${this.currentProduction ? this.currentProduction.name : ''}` +\n               ` - ${this.currentEpisode ? this.currentEpisode.name : ''}` +\n               ` | ${this.$t('sequences.title')} - Kitsu`\n      }\n    } else {\n      return {\n        title: `${this.currentProduction ? this.currentProduction.name : ''}` +\n               ` ${this.$t('sequences.title')} - Kitsu`\n      }\n    }\n  }\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.mb0 {\n  margin-bottom: 0;\n}\n</style>\n"],"names":["_sfc_main","entityListMixin","StatsCell","TableInfo","mapGetters","mapActions","entryId","columnId","getChartColors","dataType","getChartData","isStats","statKey","event","position","scrollPosition","sequenceId","taskTypeId","route","section","ButtonSimple","Combobox","SearchField","SearchQueryList","SequenceStatsList","err","searchQuery","nameData","moment","name","stringHelpers","csv","entry","fieldName","value","data"],"mappings":"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"}