{"version":3,"file":"Person-424dc833.js","sources":["../../src/components/pages/Person.vue"],"sourcesContent":["<template>\n<div ref=\"page\" class=\"columns fixed-page\">\n  <div class=\"column main-column\">\n    <div class=\"person page\">\n\n      <div ref=\"header\" class=\"flexrow page-header\">\n        <div class=\"flexrow-item\" v-if=\"person\">\n          <people-avatar\n            :person=\"person\"\n            :size=\"80\"\n            :font-size=\"30\"\n            :is-text=\"false\"\n          />\n        </div>\n        <div class=\"flexrow-item entity-title\">\n          {{ person ? person.name : '' }}\n        </div>\n      </div>\n\n      <div ref=\"tabs\" class=\"task-tabs tabs\">\n        <ul v-if=\"person\">\n          <li\n            :class=\"{'is-active': isActiveTab('todos')}\"\n          >\n            <router-link :to=\"{\n              name: 'person',\n              params: {\n                person_id: person.id\n              }\n            }\">\n              {{ $t('tasks.current')}}\n            </router-link>\n          </li>\n          <li\n            :class=\"{'is-active': isActiveTab('done')}\"\n          >\n            <router-link :to=\"{\n              name: 'person-tab',\n              params: {\n                tab: 'done',\n                person_id: person.id\n              }\n            }\">\n              {{ $t('tasks.done') }} ({{ displayedPersonDoneTasks.length }})\n            </router-link>\n          </li>\n          <li\n            :class=\"{'is-active': isActiveTab('timesheets')}\"\n            v-if=\"isCurrentUserManager\"\n          >\n            <router-link :to=\"{\n              name: 'person-tab',\n              params: {\n                tab: 'timesheets',\n                person_id: person.id\n              }\n            }\">\n              {{ $t('timesheets.title') }}\n            </router-link>\n          </li>\n          <li\n            :class=\"{'is-active': isActiveTab('schedule')}\"\n          >\n            <router-link :to=\"{\n              name: 'person-tab',\n              params: {\n                tab: 'schedule',\n                person_id: person.id\n              }\n            }\">\n              {{ $t('schedule.title')}}\n            </router-link>\n          </li>\n        </ul>\n      </div>\n\n      <div ref=\"search\" class=\"flexrow\">\n        <search-field\n          :class=\"{\n            'search-field': true,\n            'flexrow-item': true\n          }\"\n          ref=\"person-tasks-search-field\"\n          @change=\"onSearchChange\"\n          @save=\"saveSearchQuery\"\n          :can-save=\"true\"\n        />\n        <span class=\"filler\"></span>\n        <combobox-number\n          class=\"flexrow-item zoom-level\"\n          :label=\"$t('schedule.zoom_level')\"\n          :options=\"zoomOptions\"\n          v-model=\"zoomLevel\"\n          v-if=\"isActiveTab('schedule')\"\n        />\n        <combobox\n          class=\"flexrow-item\"\n          :label=\"$t('main.sorted_by')\"\n          :options=\"sortOptions\"\n          locale-key-prefix=\"tasks.fields.\"\n          v-model=\"currentSort\"\n        />\n      </div>\n\n      <div\n        ref=\"query\"\n      >\n        <div\n          class=\"query-list\"\n          v-show=\"isActiveTab('todos') || isActiveTab('timesheets')\"\n        >\n          <search-query-list\n            :queries=\"personTaskSearchQueries\"\n            @change-search=\"changeSearch\"\n            @remove-search=\"removeSearchQuery\"\n          />\n        </div>\n      </div>\n\n      <todos-list\n        ref=\"task-list\"\n        :tasks=\"sortedTasks\"\n        :is-loading=\"isTasksLoading\"\n        :is-error=\"isTasksLoadingError\"\n        :selection-grid=\"personTaskSelectionGrid\"\n        @scroll=\"setPersonTasksScrollPosition\"\n        v-if=\"isActiveTab('todos')\"\n      />\n\n      <todos-list\n        ref=\"done-list\"\n        :tasks=\"displayedPersonDoneTasks\"\n        :is-loading=\"isTasksLoading\"\n        :is-error=\"isTasksLoadingError\"\n        :done=\"true\"\n        :selectionGrid=\"personTaskSelectionGrid\"\n        v-if=\"isActiveTab('done')\"\n      />\n\n      <timesheet-list\n        :tasks=\"loggablePersonTasks\"\n        :done-tasks=\"loggableDoneTasks\"\n        :is-loading=\"isTasksLoading\"\n        :is-error=\"isTasksLoadingError\"\n        :time-spent-map=\"personTimeSpentMap\"\n        :time-spent-total=\"personTimeSpentTotal\"\n        :hide-done=\"personTasksSearchText.length === 0\"\n        :hide-day-off=\"!(isCurrentUserAdmin || this.user.id == this.person.id)\"\n        @date-changed=\"onDateChanged\"\n        @time-spent-change=\"onTimeSpentChange\"\n        @set-day-off=\"onSetDayOff\"\n        @unset-day-off=\"onUnsetDayOff\"\n        v-if=\"isActiveTab('timesheets')\"\n      />\n\n      <div\n        v-if=\"isActiveTab('schedule')\"\n      >\n        <schedule\n          ref=\"schedule-widget\"\n          :start-date=\"tasksStartDate\"\n          :end-date=\"tasksEndDate\"\n          :hierarchy=\"scheduleItems\"\n          :zoom-level=\"zoomLevel\"\n          :height=\"scheduleHeight\"\n          :is-loading=\"isTasksLoading\"\n          :is-estimation-linked=\"true\"\n          v-if=\"scheduleItems.length > 0\"\n        />\n        <div class=\"has-text-centered\" v-else>\n          There is no tasks scheduled for current person.\n        </div>\n      </div>\n    </div>\n  </div>\n  <div\n    class=\"column side-column\"\n    v-if=\"nbSelectedTasks === 1\"\n  >\n    <task-info\n      :task=\"selectedTasks.values().next().value\"\n    />\n  </div>\n</div>\n</template>\n\n<script>\nimport moment from 'moment-timezone'\nimport firstBy from 'thenby'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { formatListMixin } from '@/components/mixins/format'\nimport colors from '@/lib/colors'\nimport {\n  getFirstStartDate,\n  getLastEndDate,\n  parseDate\n} from '@/lib/time'\n\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxNumber from '@/components/widgets/ComboboxNumber'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport Schedule from '@/components/pages/schedule/Schedule'\nimport SearchField from '@/components/widgets/SearchField'\nimport SearchQueryList from '@/components/widgets/SearchQueryList'\nimport TimesheetList from '@/components/lists/TimesheetList'\nimport TodosList from '@/components/lists/TodosList'\nimport TaskInfo from '@/components/sides/TaskInfo'\n\nexport default {\n  name: 'person',\n  mixins: [formatListMixin],\n  components: {\n    Combobox,\n    ComboboxNumber,\n    PeopleAvatar,\n    Schedule,\n    SearchField,\n    SearchQueryList,\n    TaskInfo,\n    TodosList,\n    TimesheetList\n  },\n\n  data () {\n    return {\n      activeTab: 'todos',\n      currentSort: 'entity_name',\n      isTasksLoading: false,\n      isTasksLoadingError: false,\n      person: null,\n      scheduleHeight: 0,\n      selectedDate: moment().format('YYYY-MM-DD'),\n      sortOptions: [\n        'entity_name',\n        'priority',\n        'task_status_short_name',\n        'start_date',\n        'due_date',\n        'estimation',\n        'last_comment_date'\n      ].map((name) => ({ label: name, value: name })),\n      zoomLevel: 1,\n      zoomOptions: [\n        { label: 'Week', value: 0 },\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 }\n      ]\n    }\n  },\n\n  mounted () {\n    this.updateActiveTab()\n    if (this.personTasksSearchText.length > 0) {\n      this.searchField.setValue(this.personTasksSearchText)\n    }\n    setTimeout(() => {\n      if (this.searchField) this.searchField.focus()\n    }, 100)\n    this.loadPerson(this.$route.params.person_id)\n    window.addEventListener('resize', this.resetScheduleHeight)\n  },\n\n  afterDestroy () {\n    window.removeEventListener('resize', this.resetScheduleHeight)\n    this.$store.commit(\n      'LOAD_PERSON_TASKS_END',\n      { tasks: [], userFilters: {}, taskTypeMap: this.taskTypeMap }\n    )\n  },\n\n  computed: {\n    ...mapGetters([\n      'displayedPersonTasks',\n      'displayedPersonDoneTasks',\n      'isCurrentUserAdmin',\n      'isCurrentUserManager',\n      'nbSelectedTasks',\n      'personMap',\n      'personTasksScrollPosition',\n      'personTasksSearchText',\n      'personTaskSearchQueries',\n      'personTaskSelectionGrid',\n      'personTimeSpentMap',\n      'personTimeSpentTotal',\n      'productionMap',\n      'selectedTasks',\n      'taskTypeMap',\n      'user'\n    ]),\n\n    loggablePersonTasks () {\n      return this.displayedPersonTasks\n        .filter((task) => {\n          return this.taskTypeMap.get(task.task_type_id).allow_timelog\n        })\n    },\n\n    loggableDoneTasks () {\n      return this.displayedPersonDoneTasks\n        .filter((task) => {\n          return this.taskTypeMap.get(task.task_type_id).allow_timelog\n        })\n    },\n\n    searchField () {\n      return this.$refs['person-tasks-search-field']\n    },\n\n    taskList () {\n      return this.$refs['task-list']\n    },\n\n    haveDoneList () {\n      return this.$refs['done-list']\n    },\n\n    sortedTasks () {\n      const isName = this.currentSort === 'entity_name'\n      const isPriority = this.currentSort === 'priority'\n      const isDueDate = this.currentSort === 'due_date'\n      const isStartDate = this.currentSort === 'start_date'\n      const tasks = [...this.displayedPersonTasks]\n      if (isName) {\n        return tasks.sort(\n          firstBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('full_entity_name')\n        )\n      } else if (isPriority) {\n        return tasks.sort(\n          firstBy('priority', -1)\n            .thenBy(\n              (a, b) => {\n                if (!a.due_date) return 1\n                else if (!b.due_date) return -1\n                else return a.due_date.localeCompare(b.due_date)\n              }\n            )\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      } else if (isDueDate) {\n        return tasks.sort(\n          firstBy(\n            (a, b) => {\n              if (!a.due_date) return 1\n              else if (!b.due_date) return -1\n              else return a.due_date.localeCompare(b.due_date)\n            }\n          )\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      } else if (isStartDate) {\n        return tasks.sort(\n          firstBy(\n            (a, b) => {\n              if (!a.start_date) return 1\n              else if (!b.start_date) return -1\n              else return a.start_date.localeCompare(b.start_date)\n            }\n          )\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      } else {\n        return tasks.sort(\n          firstBy(this.currentSort, -1)\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      }\n    },\n\n    tasksStartDate () {\n      if (this.scheduleItems.length > 0) {\n        return getFirstStartDate(this.scheduleTasks)\n      } else {\n        return moment()\n      }\n    },\n\n    tasksEndDate () {\n      if (this.scheduleItems.length > 0) {\n        return getLastEndDate(this.scheduleTasks)\n      } else {\n        return moment().add(15, 'days')\n      }\n    },\n\n    scheduleTasks () {\n      let children = []\n      this.scheduleItems.forEach(item => {\n        children = children.concat(item.children)\n      })\n      return children\n    },\n\n    scheduleItems () {\n      const rootMap = new Map()\n      this.sortedTasks.forEach(task => {\n        if (!rootMap.get(task.project_id)) {\n          const project = this.productionMap.get(task.project_id)\n          const rootElement = this.buildProjectScheduleItem(project)\n          rootMap.set(task.project_id, rootElement)\n        }\n        const rootElement = rootMap.get(task.project_id)\n        const taskItem = this.buildTaskScheduleItem(rootElement, task)\n        if (taskItem) rootElement.children.push(taskItem)\n      })\n\n      const rootElements = Array.from(rootMap.values())\n      rootElements.forEach(rootElement => {\n        let rootStartDate = moment()\n        let rootEndDate = moment().add(1, 'days')\n        let manDays = 0\n        if (rootElement.children.length > 0) {\n          rootStartDate = getFirstStartDate(rootElement.children)\n          rootEndDate = getLastEndDate(rootElement.children)\n        }\n        rootElement.children.forEach(task => {\n          const estimation = this.formatDuration(task.estimation)\n          if (estimation) manDays += task.estimation\n        })\n        Object.assign(rootElement, {\n          startDate: rootStartDate,\n          endDate: rootEndDate,\n          man_days: manDays\n        })\n      })\n      return rootElements\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'loadPersonTasks',\n      'setPersonTasksSearch',\n      'savePersonTasksSearch',\n      'removePersonTasksSearch',\n      'setDayOff',\n      'setPersonTasksScrollPosition',\n      'setTimeSpent',\n      'unsetDayOff'\n    ]),\n\n    resetScheduleHeight () {\n      this.$nextTick(() => {\n        if (this.isActiveTab('schedule')) {\n          const pageHeight = this.$refs.page.offsetHeight\n          const headerHeight = this.$refs.header.offsetHeight\n          const tabsHeight = this.$refs.tabs.offsetHeight\n          const searchHeight = this.$refs.search.offsetHeight\n          const queryHeight = this.$refs.query.offsetHeight\n          this.scheduleHeight =\n            pageHeight - headerHeight - tabsHeight - searchHeight - queryHeight\n          if (this.$refs['schedule-widget']) {\n            this.$refs['schedule-widget'].resetScheduleSize()\n          }\n        }\n      })\n    },\n\n    buildProjectScheduleItem (project) {\n      return {\n        ...project,\n        avatar: true,\n        color: colors.fromString(project.name, true),\n        priority: 1,\n        expanded: true,\n        loading: false,\n        children: [],\n        editable: false\n      }\n    },\n\n    buildTaskScheduleItem (rootElement, task) {\n      let startDate = moment()\n      let endDate\n\n      if (!task.start_date && !task.real_start_date &&\n          !task.due_date && !task.end_date) return null\n\n      if (task.start_date) {\n        startDate = parseDate(task.start_date)\n      } else if (task.real_start_date) {\n        startDate = parseDate(task.real_start_date)\n      }\n\n      const estimation = this.formatDuration(task.estimation)\n      if (task.due_date) {\n        endDate = parseDate(task.due_date)\n      } else if (task.end_date) {\n        endDate = parseDate(task.end_date)\n      } else if (task.estimation) {\n        endDate = startDate.clone().add(estimation, 'days')\n      }\n\n      if (!endDate || endDate.isBefore(startDate)) {\n        endDate = startDate.clone().add(1, 'days')\n      }\n      const taskType = this.taskTypeMap.get(task.task_type_id)\n      return {\n        ...task,\n        name: task.full_entity_name + ' / ' + taskType.name,\n        startDate: startDate,\n        endDate: endDate,\n        expanded: false,\n        loading: false,\n        man_days: estimation,\n        editable: false,\n        unresizable: false,\n        parentElement: rootElement,\n        color: taskType.color,\n        children: []\n      }\n    },\n\n    isActiveTab (tab) {\n      return this.activeTab === tab\n    },\n\n    selectTab (tab) {\n      this.activeTab = tab\n      if (this.isActiveTab('todos')) {\n        setTimeout(() => {\n          if (this.searchField) this.searchField.focus()\n        }, 100)\n      }\n    },\n\n    onSearchChange (text) {\n      this.setPersonTasksSearch(text)\n    },\n\n    loadPerson (personId) {\n      this.person = this.personMap.get(personId)\n      this.isTasksLoading = true\n      this.loadPersonTasks({\n        personId: this.person.id,\n        date: this.selectedDate,\n        callback: (err) => {\n          if (err) console.error(err)\n          this.isTasksLoading = false\n          this.isTasksLoadingError = false\n          setTimeout(() => {\n            if (this.taskList) {\n              this.$nextTick(() => {\n                this.taskList.setScrollPosition(\n                  this.personTasksScrollPosition\n                )\n              })\n            }\n            this.resizeHeaders()\n          }, 0)\n        }\n      })\n    },\n\n    resizeHeaders () {\n      this.$nextTick(() => {\n        if (this.taskList) this.taskList.resizeHeaders()\n        if (this.haveDoneList) this.haveDoneList.resizeHeaders()\n      })\n    },\n\n    selectCurrent () {\n      this.activeTab = 'current'\n      setTimeout(() => {\n        this.$refs['person-tasks-search-field'].focus()\n      }, 100)\n    },\n\n    selectDone () {\n      this.activeTab = 'done'\n    },\n\n    changeSearch (searchQuery) {\n      this.$refs['person-tasks-search-field'].setValue(searchQuery.search_query)\n      this.$refs['person-tasks-search-field'].$emit(\n        'change', searchQuery.search_query\n      )\n    },\n\n    saveSearchQuery (searchQuery) {\n      this.savePersonTasksSearch(searchQuery)\n        .then(() => {\n        })\n        .catch((err) => {\n          if (err) console.error(err)\n        })\n    },\n\n    removeSearchQuery (searchQuery) {\n      this.removePersonTasksSearch(searchQuery)\n        .then(() => {\n        })\n        .catch((err) => {\n          if (err) console.error(err)\n        })\n    },\n\n    updateActiveTab () {\n      const availableTabs = ['done', 'timesheets', 'schedule']\n      if (availableTabs.includes(this.$route.params.tab)) {\n        this.activeTab = this.$route.params.tab\n      } else {\n        this.activeTab = 'todos'\n      }\n    },\n\n    onTimeSpentChange (timeSpentInfo) {\n      timeSpentInfo.personId = this.person.id\n      timeSpentInfo.date = this.selectedDate\n      this.setTimeSpent(timeSpentInfo)\n    },\n\n    onDateChanged (date) {\n      this.selectedDate = moment(date).format('YYYY-MM-DD')\n      this.loadPerson(this.person.id)\n    },\n\n    onSetDayOff () {\n      const dayOff = {\n        personId: this.person.id,\n        date: this.selectedDate\n      }\n      this.setDayOff(dayOff)\n    },\n\n    onUnsetDayOff () {\n      const dayOff = {\n        personId: this.person.id,\n        date: this.selectedDate\n      }\n      this.unsetDayOff(dayOff)\n    }\n  },\n\n  metaInfo () {\n    return {\n      title: this.person ? `${this.person.name} - Kitsu` : '... - Kitsu'\n    }\n  },\n\n  watch: {\n    $route () {\n      const personId = this.$route.params.person_id\n\n      this.updateActiveTab()\n      if (this.person &&\n          this.person.id !== personId\n      ) {\n        this.loadPerson(personId)\n      }\n    },\n\n    activeTab () {\n      this.resetScheduleHeight()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.name {\n  width: 230px;\n  min-width: 230px;\n}\n\n.page {\n  overflow: hidden;\n}\n\n.email {\n  width: 210px;\n  min-width: 210px;\n}\n.phone {\n  width: 140px;\n  min-width: 140px;\n}\n.skills {\n  width: 250px;\n}\n\n.query-list {\n  margin-top: 1em;\n}\n\n.task-tabs {\n  margin-top: 2em;\n}\n\n.task-tabs ul {\n  margin: 0;\n}\n\n.data-list {\n  margin-top: 0;\n}\n\n.dark .main-column {\n  border-right: 3px solid $grey-strong;\n}\n\n.person {\n  display: flex;\n  flex-direction: column;\n}\n\n.columns {\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n}\n\n.column {\n  overflow-y: auto;\n  padding: 0;\n}\n\n.main-column {\n  border-right: 3px solid $light-grey;\n}\n</style>\n"],"names":["_sfc_main","formatListMixin","Combobox","ComboboxNumber","PeopleAvatar","Schedule","SearchField","SearchQueryList","TaskInfo","TodosList","TimesheetList","moment","name","mapGetters","task","isName","isPriority","isDueDate","isStartDate","tasks","firstBy","a","b","getFirstStartDate","getLastEndDate","children","item","rootMap","project","rootElement","taskItem","rootElements","rootStartDate","rootEndDate","manDays","mapActions","pageHeight","headerHeight","tabsHeight","searchHeight","queryHeight","colors","startDate","endDate","parseDate","estimation","taskType","tab","text","personId","err","searchQuery","timeSpentInfo","date","dayOff"],"mappings":"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"}