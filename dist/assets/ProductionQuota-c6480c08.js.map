{"version":3,"file":"ProductionQuota-c6480c08.js","sources":["../../src/components/lists/QuotaShotList.vue","../../src/components/sides/PeopleQuotaInfo.vue","../../src/components/pages/quota/Quota.vue","../../src/components/pages/ProductionQuota.vue"],"sourcesContent":["<template>\n<div class=\"data-list\">\n  <table class=\"details table\" v-if=\"!isLoading\">\n    <thead>\n      <tr>\n        <th>{{ $t('quota.details_name') }}</th>\n        <th>\n        {{\n          this.countMode === 'seconds'\n            ? $t('quota.details_seconds')\n            : $t('quota.details_frames')\n        }}\n        </th>\n        <th>{{ $t('quota.weight') }}</th>\n      </tr>\n    </thead>\n    <tbody>\n     <tr\n       :key=\"`shot-quota-${shot.id}`\"\n       v-for=\"shot in shots\"\n     >\n       <td>{{ shot.full_name }}</td>\n       <td>{{ getQuota(shot) }}</td>\n       <td>{{ shot.weight }}</td>\n     </tr>\n    </tbody>\n  </table>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isLoadingError\"\n  />\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { frameToSeconds } from '@/lib/video'\nimport TableInfo from '@/components/widgets/TableInfo'\n\nexport default {\n  name: 'quota-shot-list',\n\n  components: {\n    TableInfo\n  },\n\n  data () {\n    return {\n      projectNames: {}\n    }\n  },\n\n  props: {\n    shots: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isLoadingError: {\n      type: Boolean,\n      default: false\n    },\n    countMode: {\n      type: String,\n      default: 'frames'\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'lastProductionScreen',\n      'taskTypeMap'\n    ])\n  },\n\n  methods: {\n    ...mapActions([\n    ]),\n\n    getQuota (shot) {\n      if (this.countMode === 'seconds') {\n        return frameToSeconds(shot.nb_frames, this.currentProduction, shot)\n      } else {\n        return shot.nb_frames\n      }\n    }\n  },\n\n  watch: {\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  header tr:hover {\n    background: transparent;\n  }\n\n  .table {\n    thead,\n    tbody tr:nth-child(odd) {\n      color: $white-grey;\n      background: #36393F;\n    }\n\n    tbody tr:nth-child(even) {\n      color: $white-grey;\n      background: #46494F;\n    }\n\n    thead th,\n    thead:hover {\n      color: $white-grey;\n      background: #36393F;\n      border-color: #666666;\n    }\n\n    tbody td {\n      border-color: #25282E;\n    }\n\n    tbody tr:hover {\n      color: $white-grey;\n      background: #5E6169;\n    }\n  }\n}\n\ntbody {\n  tr:nth-child(even) {\n    background: #F6F6F6;\n  }\n\n  tr:hover {\n    background: $light-green-lightest;\n  }\n}\n\n.name {\n  width: 300px;\n}\n</style>\n","<template>\n<div class=\"people-timesheet-info\">\n  <div class=\"close\">\n    <router-link class=\"close-button\" :to=\"closeRoute\">\n      <x-icon />\n    </router-link>\n  </div>\n\n  <div class=\"flexrow\">\n    <people-avatar class=\"flexrow-item\" :person=\"person\" :no-cache=true />\n    <page-title class=\"flexrow-item\" :text=\"person.full_name\" />\n  </div>\n  <div\n    class=\"info-date\"\n    v-if=\"isMonthInfo\"\n  >\n    {{ monthString }} {{ year }}\n  </div>\n\n  <div\n    class=\"info-date\"\n    v-else-if=\"isWeekInfo\"\n  >\n    week {{ week }}, {{ startDay }} - {{ endDay }} {{ weekMonth }} {{ year }}\n  </div>\n\n  <div\n    class=\"info-date\"\n    v-else-if=\"isDayInfo\"\n  >\n    {{ day }} {{ monthString }} {{ year }}\n  </div>\n\n  <quota-shot-list\n    class=\"time-spent-list\"\n    :count-mode=\"countMode\"\n    :shots=\"shots\"\n    :is-loading=\"isLoading\"\n    :is-error=\"isLoadingError\"\n  />\n</div>\n</template>\n\n<script>\nimport moment from 'moment-timezone'\n\nimport { mapGetters, mapActions } from 'vuex'\nimport { XIcon } from 'vue-feather-icons'\nimport PageTitle from '@/components/widgets/PageTitle'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport QuotaShotList from '@/components/lists/QuotaShotList'\nimport { monthToString } from '@/lib/time'\n\nexport default {\n  name: 'shot-quota-info',\n\n  components: {\n    XIcon,\n    PageTitle,\n    PeopleAvatar,\n    QuotaShotList\n  },\n\n  props: {\n    person: {\n      type: Object,\n      default: () => {}\n    },\n    year: {\n      type: Number,\n      default: 0\n    },\n    month: {\n      type: Number,\n      default: 0\n    },\n    week: {\n      type: Number,\n      default: 0\n    },\n    day: {\n      type: Number,\n      default: 0\n    },\n    countMode: {\n      type: String,\n      default: 'frames'\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isLoadingError: {\n      type: Boolean,\n      default: false\n    },\n    shots: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction'\n    ]),\n\n    startDay () {\n      return moment()\n        .day('Monday')\n        .year(this.year)\n        .week(this.week)\n        .date()\n    },\n\n    endDay () {\n      return moment()\n        .day('Monday')\n        .year(this.year)\n        .week(this.week)\n        .add('days', 6)\n        .date()\n    },\n\n    weekMonth () {\n      return moment()\n        .day('Monday')\n        .year(this.year)\n        .week(this.week)\n        .format('MMM')\n    },\n\n    monthString () {\n      return monthToString(this.month)\n    },\n\n    isMonthInfo () {\n      return this.$route.path.indexOf('month') > 0\n    },\n\n    isWeekInfo () {\n      return this.$route.path.indexOf('week') > 0\n    },\n\n    isDayInfo () {\n      return this.$route.path.indexOf('day') > 0\n    },\n\n    closeRoute () {\n      if (!this.currentProduction) return {}\n      let route = {\n        name: 'quota',\n        production_id: this.currentProduction.id\n      }\n      if (this.isMonthInfo) {\n        route = {\n          name: 'quota-month',\n          params: {\n            year: this.year\n          }\n        }\n      } else if (this.isWeekInfo) {\n        route = {\n          name: 'quota-week',\n          params: {\n            year: this.year\n          }\n        }\n      } else if (this.isDayInfo) {\n        route = {\n          name: 'quota-day',\n          params: {\n            year: this.year,\n            month: this.month\n          }\n        }\n      }\n      if (this.currentEpisode) {\n        route.name = `episode-${route.name}`\n        route.params.episode_id = this.currentEpisode.id\n      }\n      return route\n    }\n  },\n\n  methods: {\n    ...mapActions([\n    ]),\n\n    onCloseClicked () {\n      this.$emit('close')\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark .close-button:hover {\n  background: $dark-grey-lightest;\n}\n\n.data-list {\n  padding-bottom: 5em;\n}\n\n.people-timesheet-info {\n  padding: 1em;\n}\n\n.info-date {\n  font-size: 1.5em;\n  margin-top: 1em;\n  text-transform: capitalize;\n}\n\n.close {\n  text-align: right;\n}\n\n.close-button {\n  cursor: pointer;\n  display: inline-block;\n  text-align: center;\n  padding-top: 3px;\n  width: 30px;\n  height: 30px;\n}\n\n.close-button:hover {\n  display: inline-block;\n  background: $white-grey;\n  border-radius: 50%;\n}\n</style>\n","<template>\n<div class=\"data-list\">\n  <div\n    class=\"datatable-wrapper\"\n    ref=\"body\"\n  >\n    <table class=\"datatable\">\n      <thead class=\"datatable-head\">\n        <tr>\n          <th\n            scope=\"col\"\n            class=\"name datatable-row-header\"\n            ref=\"rowHeaderName\"\n          >\n            {{ $t('quota.name') }}\n          </th>\n          <th\n            scope=\"col\"\n            class=\"average datatable-row-header\"\n            :style=\"{left: averageColumnX}\"\n          >\n            {{ $t('quota.average') }}\n          </th>\n          <th\n            scope=\"col\"\n            :key=\"'month-' + month\"\n            v-for=\"month in monthRange\"\n            v-if=\"detailLevel === 'month'\"\n          >\n            {{ monthToString(month) }}\n          </th>\n          <th\n            scope=\"col\"\n            :key=\"'week-' + week\"\n            v-for=\"week in weekRange\"\n            v-if=\"detailLevel === 'week'\"\n          >\n            {{ week }}\n          </th>\n\n          <th\n            scope=\"col\"\n            :key=\"'day-' + day\"\n            v-for=\"day in dayRange\"\n            v-if=\"detailLevel === 'day'\"\n          >\n            {{ day }}\n          </th>\n        </tr>\n      </thead>\n      <tbody\n        class=\"datatable-body\"\n        v-if=\"this.quotaLength > 0 && !isLoading\"\n      >\n        <tr\n          class=\"datatable-row\"\n          v-for=\"key in filteredPersonIds\"\n          :key=\"'name-' + key\"\n        >\n          <th scope=\"row\" class=\"name datatable-row-header\">\n            <div class=\"flexrow\">\n              <people-avatar :size=\"30\" :person=\"personMap.get(key)\"/>\n              {{ personMap.get(key).full_name }}\n            </div>\n          </th>\n          <td\n            class=\"average datatable-row-header\"\n            :style=\"{left: averageColumnX}\"\n            v-if=\"detailLevel === 'month'\"\n          >\n            {{ getQuotaAverage(key, { year }) }}\n          </td>\n          <td\n            class=\"average datatable-row-header\"\n            :style=\"{left: averageColumnX}\"\n            v-if=\"detailLevel === 'week'\"\n          >\n            {{ getQuotaAverage(key, { year }) }}\n          </td>\n          <td\n            class=\"average datatable-row-header\"\n            :style=\"{left: averageColumnX}\"\n            v-if=\"detailLevel === 'day'\"\n          >\n            {{ getQuotaAverage(key, { year, month }) }}\n          </td>\n          <td\n            :class=\"{\n              selected: isMonthSelected(key, year, month),\n              'quota-low': isMonthQuotaLow(key, year, month)\n            }\"\n            :key=\"'month-' + month\"\n            v-for=\"month in monthRange\"\n            v-if=\"detailLevel === 'month'\"\n          >\n            <router-link\n              class=\"quota-button\"\n              :to=\"episodifyRoute({\n                name: 'quota-month-person',\n                params: {\n                  person_id: key,\n                  year: year,\n                  month: month\n                }\n              })\"\n              v-if=\"getQuota(key, {year, month})\"\n            >\n              {{\n                countMode === 'seconds'\n                ? getQuota(key, {year, month}).toFixed(2)\n                : getQuota(key, {year, month})\n              }}\n            </router-link>\n            <span v-else>-</span>\n          </td>\n\n          <td\n            :class=\"{\n              selected: isWeekSelected(key, year, week),\n              'quota-low': isWeekQuotaLow(key, year, month)\n            }\"\n            :key=\"'week-' + week\"\n            v-for=\"week in weekRange\"\n            v-if=\"detailLevel === 'week'\"\n          >\n            <router-link\n              class=\"quota-button\"\n              :to=\"episodifyRoute({\n                name: 'quota-week-person',\n                params: {\n                  person_id: key,\n                  year: year,\n                  week: week\n                }\n              })\"\n              v-if=\"getQuota(key, {year, week})\"\n            >\n              {{\n                countMode === 'seconds'\n                ? getQuota(key, {year, week}).toFixed(2)\n                : getQuota(key, {year, week})\n              }}\n            </router-link>\n            <span v-else>\n            -\n            </span>\n          </td>\n\n          <td\n            :class=\"{\n              weekend: isWeekend(year, month, day),\n              selected: isDaySelected(key, year, month, day),\n              'quota-low': isDayQuotaLow(key, year, month, day)\n            }\"\n            :key=\"'day-' + day\"\n            v-for=\"day in dayRange\"\n            v-if=\"detailLevel === 'day'\"\n          >\n            <router-link\n              class=\"quota-button\"\n              :to=\"episodifyRoute({\n                name: 'quota-day-person',\n                params: {\n                  person_id: key,\n                  year: year,\n                  month: month,\n                  day: day\n                }\n              })\"\n              v-if=\"getQuota(key, {year, month, day})\"\n            >\n              {{\n                countMode === 'seconds'\n                ? getQuota(key, {year, month, day}).toFixed(2)\n                : getQuota(key, {year, month, day})\n              }}\n            </router-link>\n            <span v-else>\n            -\n            </span>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div\n    class=\"has-text-centered empty-quota\"\n    v-if=\"this.quotaLength === 0 && !isLoading\"\n  >\n    <p class=\"info\">{{ $t('quota.no_quota') }}</p>\n  </div>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isError\"\n  />\n</div>\n</template>\n\n<script>\n\nimport moment from 'moment-timezone'\nimport { mapGetters, mapActions } from 'vuex'\nimport { episodifyRoute } from '@/lib/path'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport {\n  buildNameIndex,\n  indexSearch\n} from '@/lib/indexing'\nimport {\n  monthToString,\n  getMonthRange,\n  getWeekRange,\n  getDayRange\n} from '@/lib/time'\n\nexport default {\n  name: 'quota',\n\n  components: {\n    PeopleAvatar,\n    TableInfo\n  },\n\n  props: {\n    taskTypeId: {\n      type: String,\n      required: true\n    },\n    detailLevel: {\n      type: String,\n      default: 'day',\n      required: true\n    },\n    countMode: {\n      type: String,\n      default: 'frames',\n      required: true\n    },\n    computeMode: {\n      type: String,\n      default: 'weighted',\n      required: true\n    },\n    year: {\n      type: Number,\n      default: 0\n    },\n    month: {\n      type: Number,\n      default: 0\n    },\n    week: {\n      type: Number,\n      default: 0\n    },\n    day: {\n      type: Number,\n      default: 0\n    },\n    searchText: {\n      type: String,\n      default: ''\n    },\n    maxQuota: {\n      default: 0\n    }\n  },\n\n  data () {\n    return {\n      currentMonth: moment().month() + 1,\n      currentYear: moment().year(),\n      currentWeek: moment().week(),\n      detailsTitle: '',\n      detailsMap: {},\n      isPanelShown: false,\n      isLoading: true,\n      isError: false,\n      personIds: [],\n      quotaMap: {},\n      quotaLength: 0,\n      selected: undefined,\n      averageColumnX: '12rem'\n    }\n  },\n\n  mounted () {\n    if (this.shotMap.size < 2) {\n      this.isLoading = true\n      setTimeout(() => {\n        this.loadShots((err) => {\n          if (!err) {\n            this.loadData()\n          }\n        })\n      }, 100)\n    } else {\n      if (!this.isShotsLoading) this.isLoading = false\n      this.loadData()\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'isShotsLoading',\n      'shotMap',\n      'personMap'\n    ]),\n\n    monthRange () {\n      return getMonthRange(this.year, this.currentYear, this.currentMonth)\n    },\n\n    dayRange () {\n      return getDayRange(\n        this.year,\n        this.month,\n        this.currentYear,\n        this.currentMonth\n      )\n    },\n\n    weekRange () {\n      return getWeekRange(this.year, this.currentYear, this.currentWeek)\n    },\n\n    filteredPersonIds () {\n      let personIds = this.personIds\n      if (this.searchText.length > 0) {\n        personIds = indexSearch(this.personIndex, this.searchText.split(' '))\n          .map(person => person.id)\n      }\n      return personIds\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'loadShots',\n      'computeQuota',\n      'getPeriodDetails'\n    ]),\n\n    episodifyRoute (route) {\n      if (this.currentEpisode) {\n        episodifyRoute(route, this.currentEpisode.id)\n      }\n      return route\n    },\n\n    isWeekend (year, month, day) {\n      let date = moment(`${year}-${month}-${day}`, 'YYYY-MM-DD')\n      if (day < 10) date = moment(`${year}-${month}-0${day}`, 'YYYY-MM-DD')\n      return [0, 6].includes(date.day())\n    },\n\n    loadData () {\n      if (this.taskTypeId) {\n        this.isLoading = true\n        this.computeQuota({\n          taskTypeId: this.taskTypeId,\n          detailLevel: this.detailLevel,\n          countMode: this.countMode,\n          computeMode: this.computeMode\n        })\n          .then(quotas => {\n            this.quotaMap = quotas\n            this.quotaLength = Object.keys(this.quotaMap).length\n            this.calcAverageColumnX()\n            this.$nextTick(() => {\n              this.isLoading = false\n            })\n          })\n      }\n    },\n\n    loadDetails (personId, dateString) {\n      this.loadShots((err) => {\n        this.isLoading = true\n        if (err) {\n          console.error(err)\n        } else {\n          if (this.taskTypeId) {\n            this.getPeriodDetails({\n              taskTypeId: this.taskTypeId,\n              detailLevel: this.detailLevel,\n              personId,\n              dateString\n            })\n              .then(shots => {\n                this.detailsMap = shots\n              })\n          }\n        }\n      })\n    },\n    monthToString,\n\n    dateDigit (date) {\n      return date.toString().padStart(2, '0')\n    },\n\n    getQuota (personId, opt = {}) {\n      if (opt.day) {\n        const dayKey =\n          `${opt.year}-${this.dateDigit(opt.month)}-${this.dateDigit(opt.day)}`\n        return this.quotaMap[personId].day[this.countMode][dayKey]\n      } else if (opt.week) {\n        const weekKey = `${opt.year}-${opt.week}`\n        return this.quotaMap[personId].week[this.countMode][weekKey]\n      } else {\n        const monthKey = `${opt.year}-${this.dateDigit(opt.month)}`\n        return this.quotaMap[personId].month[this.countMode][monthKey]\n      }\n    },\n\n    getQuotaAverage (personId, opt = {}) {\n      let average = 0\n      let total = 0\n      let nbEntries\n      if (this.detailLevel === 'day') {\n        const monthKey = `${opt.year}-${this.dateDigit(opt.month)}`\n        total = this.quotaMap[personId].month[this.countMode][monthKey]\n        nbEntries = this.quotaMap[personId].day.entries[monthKey]\n      } else if (this.detailLevel === 'week') {\n        const yearKey = opt.year\n        total = this.quotaMap[personId].year[this.countMode][yearKey]\n        nbEntries = this.quotaMap[personId].week.entries[yearKey]\n      } else if (this.detailLevel === 'month') {\n        const yearKey = opt.year\n        total = this.quotaMap[personId].year[this.countMode][yearKey]\n        nbEntries = this.quotaMap[personId].month.entries[yearKey]\n      }\n      average = total / nbEntries\n      return average ? average.toFixed(2) : '-'\n    },\n\n    isDaySelected (personId, year, month, day) {\n      return (\n        this.$route.params.person_id &&\n        this.$route.params.person_id === personId &&\n        '' + this.$route.params.year === '' + year &&\n        '' + this.$route.params.month === '' + month &&\n        '' + this.$route.params.day === '' + day\n      )\n    },\n\n    isWeekSelected (personId, year, week) {\n      return (\n        this.$route.params.person_id &&\n        this.$route.params.person_id === personId &&\n        '' + this.$route.params.year === '' + year &&\n        '' + this.$route.params.week === '' + week\n      )\n    },\n\n    isMonthSelected (personId, year, month) {\n      return (\n        this.$route.params.person_id &&\n        this.$route.params.person_id === personId &&\n        '' + this.$route.params.year === '' + year &&\n        '' + this.$route.params.month === '' + month\n      )\n    },\n\n    isDayQuotaLow (personId, year, month, day) {\n      const quota = this.getQuota(personId, { year, month, day })\n      return (\n        quota !== null &&\n        this.maxQuota > quota\n      )\n    },\n\n    isWeekQuotaLow (personId, year, week) {\n      return this.maxQuota > this.getQuota(personId, { year, week })\n    },\n\n    isMonthQuotaLow (personId, year, month) {\n      return this.maxQuota > this.getQuota(personId, { year, month })\n    },\n\n    calcAverageColumnX () {\n      if (this.quotaLength > 0) {\n        this.averageColumnX = `${this.$refs.rowHeaderName.offsetWidth}px`\n      }\n    },\n\n    resetPersonIds () {\n      const personIds = Object.keys(this.quotaMap)\n      const persons = personIds.map(pId => this.personMap.get(pId))\n      this.personIndex = buildNameIndex(persons)\n      this.personIds = personIds.sort((a, b) => {\n        const personAName = this.personMap.get(a).full_name\n        const personBName = this.personMap.get(b).full_name\n        return personAName.localeCompare(personBName)\n      })\n    }\n  },\n\n  watch: {\n    $route () {\n      const els = document.getElementsByClassName('selected')\n      if (els.length === 0) { // selected element is not visible\n        setTimeout(() => {\n          this.$refs.body.scrollLeft += 380\n        }, 100)\n      }\n    },\n\n    computeMode () {\n      if (this.taskTypeId) {\n        this.loadData()\n      }\n    },\n\n    quotaMap () {\n      this.resetPersonIds()\n    },\n\n    taskTypeId () {\n      if (this.taskTypeId) {\n        this.loadData()\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .weekend {\n    background-color: $dark-grey;\n  }\n .quota-button:hover {\n    color: #333;\n  }\n  .info {\n    color: $white;\n  }\n}\n\n.data-list {\n  margin-top: 0;\n}\n\n.datatable-wrapper {\n  overflow: auto;\n  margin-bottom: 1rem;\n}\n\n.datatable {\n  min-width: auto;\n  .name {\n    min-width: 12rem;\n    text-align: left;\n    justify-content: flex-start;\n    .avatar {\n      margin-right: .5rem;\n    }\n  }\n  .average {\n    width: 8rem;\n  }\n  th,\n  td {\n    text-align: center\n  }\n}\n\n.datatable-head th {\n  min-width: 4rem;\n}\n\n.datatable-body th {\n  padding: 1rem;\n}\n\n.datatable-body {\n  th, td {\n    border: 0;\n  }\n}\n\n.quota-low {\n  color: red;\n}\n\n.quota-button {\n  border-radius: .5rem;\n  padding: .5rem;\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  color: inherit;\n  font-size: inherit;\n  &:hover,\n  &:focus,\n  &.is-selected {\n    background-color: $dark-grey-lightest;\n  }\n}\n\n.empty-quota {\n  width: 100%;\n}\n\n.selected .quota-button {\n  background: $purple;\n  color: #333;\n}\n\n.quota-button:hover {\n  background: #BBEEBB;\n}\n\n.weekend {\n  background-color: $white-grey;\n}\n</style>\n","<template>\n<div\n  class=\"columns fixed-page\"\n>\n  <div\n    class=\"column main-column\"\n  >\n    <div class=\"flexrow filters\">\n      <div class=\"flexrow-item\">\n        <combobox-task-type\n          class=\"flexrow-item\"\n          :label=\"$t('quota.type_label')\"\n          :task-type-list=\"productionShotTaskTypes\"\n          v-model=\"taskTypeId\"\n        />\n      </div>\n      <div class=\"flexrow-item\">\n        <combobox\n          class=\"flexrow-item\"\n          :label=\"$t('quota.detail_label')\"\n          :options=\"detailLevelOptions\"\n          v-model=\"detailLevelString\"\n        />\n      </div>\n\n      <combobox\n        class=\"flexrow-item\"\n        :label=\"$t('quota.month_label')\"\n        :options=\"monthOptions\"\n        v-model=\"monthString\"\n        v-if=\"detailLevelString === 'day'\"\n      />\n\n      <combobox\n        class=\"flexrow-item\"\n        :label=\"$t('quota.year_label')\"\n        :options=\"yearOptions\"\n        v-model=\"yearString\"\n      />\n\n      <div class=\"flexrow-item\">\n        <combobox\n          class=\"flexrow-item\"\n          :label=\"$t('quota.count_label')\"\n          :options=\"countModeOptions\"\n          v-model=\"countMode\"\n        />\n      </div>\n      <combobox\n        class=\"flexrow-item\"\n        :label=\"$t('quota.compute_mode')\"\n        :options=\"computeModeOptions\"\n        v-model=\"computeMode\"\n      />\n      <div class=\"flexrow-item\">\n        <info-question-mark\n          class=\"mt2\"\n          :text=\"computeMode === 'weighted'\n                 ? $t('quota.explaination')\n                 : $t('quota.explaination_feedback')\n                \"\n        />\n      </div>\n      <div class=\"filler\"></div>\n      <button-simple\n        class=\"flexrow-item\"\n        :title=\"$t('quota.export_quotas')\"\n        icon=\"download\"\n        @click=\"exportQuotas\"\n      />\n    </div>\n\n    <div class=\"flexrow mb2 mt0\">\n      <search-field\n        ref=\"search-field\"\n        class=\"search-field flexrow-item\"\n        @change=\"onSearchChange\"\n      />\n\n      <span class=\"label flexrow-item\">\n        {{ $t('quota.highlight_quotas') }}\n      </span>\n\n      <text-field\n        class=\"flexrow-item max-quota-input\"\n        type=\"number\"\n        v-model=\"maxQuota\"\n      />\n    </div>\n\n    <quota\n      ref=\"quota-list\"\n      :taskTypeId=\"taskTypeId\"\n      :detailLevel=\"detailLevelString\"\n      :year=\"currentYear\"\n      :month=\"currentMonth\"\n      :week=\"currentWeek\"\n      :day=\"currentDay\"\n      :currentPerson=\"currentPerson\"\n      :countMode=\"currentMode\"\n      :computeMode=\"computeMode\"\n      :searchText=\"searchText\"\n      :maxQuota=\"maxQuota\"\n    />\n  </div>\n  <div\n    class=\"column side-column\"\n    v-if=\"showInfo\"\n  >\n    <people-quota-info\n      :person=\"currentPerson\"\n      :year=\"currentYear\"\n      :month=\"currentMonth\"\n      :week=\"currentWeek\"\n      :day=\"currentDay\"\n      :is-loading=\"isPersonShotsLoading\"\n      :is-loading-error=\"false\"\n      :shots=\"personShots\"\n      :count-mode=\"countMode\"\n      @close=\"hideSideInfo\"\n    />\n  </div>\n</div>\n</template>\n\n<script>\nimport moment from 'moment-timezone'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport csv from '@/lib/csv'\nimport stringHelpers from '@/lib/string'\n\nimport { monthToString, range } from '@/lib/time'\nimport { episodifyRoute } from '@/lib/path'\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxTaskType from '@/components/widgets/ComboboxTaskType'\nimport InfoQuestionMark from '@/components/widgets/InfoQuestionMark'\nimport PeopleQuotaInfo from '@/components/sides/PeopleQuotaInfo'\nimport Quota from '@/components/pages/quota/Quota'\nimport SearchField from '@/components/widgets/SearchField'\nimport TextField from '@/components/widgets/TextField'\n\nexport default {\n  name: 'production-quota',\n  components: {\n    ButtonSimple,\n    Combobox,\n    ComboboxTaskType,\n    InfoQuestionMark,\n    PeopleQuotaInfo,\n    Quota,\n    SearchField,\n    TextField\n  },\n\n  data () {\n    return {\n      taskTypeId: '',\n      countMode: 'frames',\n      countModeOptions: [\n        { label: this.$t('quota.frames'), value: 'frames' },\n        { label: this.$t('quota.seconds'), value: 'seconds' },\n        { label: this.$t('quota.count'), value: 'count' }\n      ],\n      detailLevelOptions: [\n        { label: this.$t('quota.day'), value: 'day' },\n        { label: this.$t('quota.week'), value: 'week' },\n        { label: this.$t('quota.month'), value: 'month' }\n      ],\n      computeModeOptions: [\n        { label: this.$t('quota.weighted'), value: 'weighted' },\n        { label: this.$t('quota.feedback_date'), value: 'feedback' }\n      ],\n      computeMode: 'weighted',\n      currentYear: moment().year(),\n      currentMonth: moment().month() + 1,\n      currentWeek: moment().week(),\n      currentDay: moment().date(),\n      currentPerson: this.getCurrentPerson(),\n      currentMode: 'frames',\n\n      detailLevelString: 'day',\n      detailLevel: 'day',\n\n      isLoading: false,\n      isLoadingError: false,\n      isPersonShotsLoading: false,\n      maxQuota: 0,\n      monthString: `${moment().month() + 1}`,\n\n      personShots: [],\n      searchText: '',\n      showInfo: false,\n      yearString: `${moment().year()}`\n    }\n  },\n\n  mounted () {\n    this.loadRoute()\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction',\n      'productionShotTaskTypes',\n      'shotTaskTypes',\n      'personMap'\n    ]),\n\n    yearOptions () {\n      const year = 2018\n      const currentYear = moment().year()\n      return range(year, currentYear)\n        .map(year => ({\n          label: year,\n          value: `${year}`\n        }))\n    },\n\n    monthOptions () {\n      const currentYear = `${moment().year()}`\n      const month = 1\n      const currentMonth = moment().month() + 1\n      let monthRange = range(month, 12)\n      if (currentYear === this.yearString) {\n        monthRange = range(month, currentMonth)\n      }\n      return monthRange.map(month => ({\n        label: monthToString(month),\n        value: `${month}`\n      }))\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'getPersonQuotaShots',\n      'loadShots'\n    ]),\n\n    getCurrentPerson () {\n      const personId = this.$route.params.person_id\n      if (personId && this.personMap) {\n        return this.personMap.get(personId)\n      } else {\n        return {}\n      }\n    },\n\n    loadRoute () {\n      const { month, year, week, day } = this.$route.params\n      const { countMode, taskTypeId, computeMode } = this.$route.query\n\n      if (this.$route.path.indexOf('week') > 0) this.detailLevel = 'week'\n      if (this.$route.path.indexOf('month') > 0) this.detailLevel = 'month'\n      if (this.$route.path.indexOf('day') > 0) this.detailLevel = 'day'\n\n      this.currentPerson = this.getCurrentPerson()\n      this.detailLevelString = this.detailLevel\n      if (countMode) {\n        this.countMode = countMode\n        this.currentMode = this.countMode\n      }\n      if (taskTypeId) {\n        this.taskTypeId = taskTypeId\n      } else {\n        const key = `quota:${this.currentProduction.id}:task-type-id`\n        this.taskTypeId =\n          localStorage.getItem(key) || this.shotTaskTypes[0].id\n      }\n      if (computeMode) {\n        this.computeMode = computeMode\n      }\n      if (month) {\n        this.currentMonth = Number(month)\n        this.monthString = `${month}`\n      }\n      if (year) {\n        this.currentYear = Number(year)\n        this.yearString = `${year}`\n      }\n      if (week) {\n        this.currentWeek = Number(week)\n        this.weekString = `${week}`\n      }\n      if (day) {\n        this.currentDay = Number(day)\n      }\n\n      if (this.$route.path.indexOf('person') > 0) {\n        this.isPersonShotsLoading = true\n        this.getPersonQuotaShots({\n          personId: this.currentPerson.id,\n          detailLevel: this.detailLevel,\n          taskTypeId: this.taskTypeId,\n          year,\n          month,\n          week,\n          day,\n          computeMode: this.computeMode\n        })\n          .then(shots => {\n            this.isPersonShotsLoading = false\n            this.personShots = shots\n            this.showSideInfo()\n          })\n      } else {\n        this.hideSideInfo()\n      }\n    },\n\n    showSideInfo () {\n      this.showInfo = true\n    },\n\n    hideSideInfo () {\n      this.showInfo = false\n    },\n\n    episodifyRoute (route) {\n      if (this.currentEpisode) {\n        episodifyRoute(route, this.currentEpisode.id)\n      }\n      return route\n    },\n\n    exportQuotas () {\n      const quotas = this.$refs['quota-list'].quotaMap\n      const nameData = [\n        'quotas',\n        this.detailLevel,\n        this.currentYear\n      ]\n      if (this.detailLevel === 'day') nameData.push(this.currentMonth)\n      const name = stringHelpers.slugify(nameData.join('_'))\n      const people = Object.keys(quotas)\n        .map(personId => this.personMap.get(personId))\n        .sort((a, b) => a.full_name.localeCompare(b.full_name))\n      csv.generateQuotas(\n        name,\n        quotas,\n        people,\n        this.countMode,\n        this.detailLevel,\n        moment().year(),\n        moment().month() + 1,\n        this.currentYear,\n        this.currentMonth,\n        this.currentWeek\n      )\n    },\n\n    onSearchChange (searchText) {\n      this.searchText = searchText\n    }\n  },\n\n  watch: {\n    detailLevelString () {\n      if (this.detailLevel !== this.detailLevelString) {\n        const route = {\n          name: `quota-${this.detailLevelString}`,\n          params: {\n            year: this.currentYear\n          },\n          query: {\n            countMode: this.countMode,\n            computeMode: this.computeMode\n          }\n        }\n        if (this.detailLevelString === 'day') {\n          route.params.month = this.currentMonth\n        }\n        this.$router.push(this.episodifyRoute(route))\n      }\n    },\n\n    yearString () {\n      const year = Number(this.yearString)\n      const currentMonth = moment().month() + 1\n      if (this.currentYear !== year) {\n        const route = {\n          name: `quota-${this.detailLevelString}`,\n          params: {\n            year: year\n          },\n          query: {\n            countMode: this.countMode,\n            computeMode: this.computeMode\n          }\n        }\n        if (this.detailLevelString === 'day') {\n          route.params.month = `${Math.min(Number(this.monthString), currentMonth)}`\n        }\n        this.$router.push(this.episodifyRoute(route))\n      }\n    },\n\n    monthString () {\n      if (this.currentMonth !== Number(this.monthString)) {\n        const route = {\n          name: 'quota-day',\n          params: {\n            year: this.currentYear,\n            month: Number(this.monthString)\n          },\n          query: {\n            countMode: this.countMode,\n            computeMode: this.computeMode\n          }\n        }\n        this.$router.push(this.episodifyRoute(route))\n      }\n    },\n\n    countMode () {\n      if (this.currentMode !== this.countMode) {\n        if (this.$route.query.countMode !== this.countMode) {\n          this.$router.push({\n            query: {\n              countMode: this.countMode,\n              computeMode: this.computeMode\n            }\n          })\n        }\n        this.currentMode = this.countMode\n      }\n    },\n\n    computeMode () {\n      if (this.$route.query.computeMode !== this.computeMode) {\n        this.$router.push({\n          query: {\n            computeMode: this.computeMode\n          }\n        })\n      }\n    },\n\n    taskTypeId () {\n      const key = `quota:${this.currentProduction.id}:task-type-id`\n      localStorage.setItem(key, this.taskTypeId)\n      if (this.$route.query.taskTypeId !== this.taskTypeId) {\n        this.$router.push({\n          query: {\n            taskTypeId: this.taskTypeId\n          }\n        })\n      }\n    },\n\n    currentProduction () {\n      this.isLoading = true\n      this.loadShots(() => {\n        this.loadRoute()\n        this.isLoading = false\n      })\n    },\n\n    currentEpisode () {\n      this.isLoading = true\n      this.loadShots(() => {\n        this.loadRoute()\n        this.isLoading = false\n      })\n    },\n\n    $route () {\n      this.loadRoute()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .filters {\n    color: $white-grey;\n  }\n}\n\n.filters {\n  padding-bottom: 2rem;\n\n  .field {\n    padding-bottom: 0;\n    margin-bottom: 0;\n  }\n\n  .overall-man-days {\n    width: 120px;\n    font-size: 0.9em;\n    margin-right: 1em;\n  }\n}\n\n.fixed-page {\n  padding: 1em;\n  padding-top: 90px;\n  padding-left: 2em;\n}\n\n.main-column {\n  display: flex;\n  border: 0;\n  overflow: hidden;\n  flex-direction: column;\n}\n\n.zoom-level {\n  margin-top: -10px;\n}\n\n.side-column {\n  margin: 0;\n}\n\n.search-field {\n  color: var(--text);\n}\n\n.label {\n  font-weight: 300;\n  color: var(--text);\n}\n\n.max-quota-input {\n  width: 80px;\n}\n</style>\n"],"names":["_sfc_main","TableInfo","mapGetters","mapActions","shot","frameToSeconds","XIcon","PageTitle","PeopleAvatar","QuotaShotList","moment","monthToString","route","err","getMonthRange","getDayRange","getWeekRange","personIds","indexSearch","person","episodifyRoute","year","month","day","date","quotas","personId","dateString","shots","opt","dayKey","weekKey","monthKey","average","total","nbEntries","yearKey","week","quota","persons","pId","buildNameIndex","a","b","personAName","personBName","ButtonSimple","Combobox","ComboboxTaskType","InfoQuestionMark","PeopleQuotaInfo","Quota","SearchField","TextField","currentYear","range","currentMonth","monthRange","countMode","taskTypeId","computeMode","key","nameData","name","stringHelpers","people","csv","searchText"],"mappings":"6NAyCA,MAAAA,EAAA,CACA,KAAA,kBAEA,WAAA,CACA,UAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,aAAA,CAAA,CACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,eAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,UAAA,CACA,KAAA,OACA,QAAA,QACA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CACA,oBACA,uBACA,aACA,CAAA,CACA,EAEA,QAAA,CACA,GAAAC,EAAA,CACA,CAAA,EAEA,SAAAC,EAAA,CACA,OAAA,KAAA,YAAA,UACAC,EAAAD,EAAA,UAAA,KAAA,kBAAAA,CAAA,EAEAA,EAAA,SAEA,CACA,EAEA,MAAA,CACA,CACA,ssBC3CA,MAAAJ,EAAA,CACA,KAAA,kBAEA,WAAA,CACA,MAAAM,EACA,UAAAC,EACA,aAAAC,EACA,cAAAC,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,EACA,KAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,MAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,KAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,IAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,UAAA,CACA,KAAA,OACA,QAAA,QACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,eAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,MAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,CACA,EAEA,SAAA,CACA,GAAAP,EAAA,CACA,iBACA,mBACA,CAAA,EAEA,UAAA,CACA,OAAAQ,EAAA,EACA,IAAA,QAAA,EACA,KAAA,KAAA,IAAA,EACA,KAAA,KAAA,IAAA,EACA,KAAA,CACA,EAEA,QAAA,CACA,OAAAA,EAAA,EACA,IAAA,QAAA,EACA,KAAA,KAAA,IAAA,EACA,KAAA,KAAA,IAAA,EACA,IAAA,OAAA,CAAA,EACA,KAAA,CACA,EAEA,WAAA,CACA,OAAAA,EAAA,EACA,IAAA,QAAA,EACA,KAAA,KAAA,IAAA,EACA,KAAA,KAAA,IAAA,EACA,OAAA,KAAA,CACA,EAEA,aAAA,CACA,OAAAC,EAAA,KAAA,KAAA,CACA,EAEA,aAAA,CACA,OAAA,KAAA,OAAA,KAAA,QAAA,OAAA,EAAA,CACA,EAEA,YAAA,CACA,OAAA,KAAA,OAAA,KAAA,QAAA,MAAA,EAAA,CACA,EAEA,WAAA,CACA,OAAA,KAAA,OAAA,KAAA,QAAA,KAAA,EAAA,CACA,EAEA,YAAA,CACA,GAAA,CAAA,KAAA,kBAAA,MAAA,CAAA,EACA,IAAAC,EAAA,CACA,KAAA,QACA,cAAA,KAAA,kBAAA,EACA,EACA,OAAA,KAAA,YACAA,EAAA,CACA,KAAA,cACA,OAAA,CACA,KAAA,KAAA,IACA,CACA,EACA,KAAA,WACAA,EAAA,CACA,KAAA,aACA,OAAA,CACA,KAAA,KAAA,IACA,CACA,EACA,KAAA,YACAA,EAAA,CACA,KAAA,YACA,OAAA,CACA,KAAA,KAAA,KACA,MAAA,KAAA,KACA,CACA,GAEA,KAAA,iBACAA,EAAA,KAAA,WAAAA,EAAA,OACAA,EAAA,OAAA,WAAA,KAAA,eAAA,IAEAA,CACA,CACA,EAEA,QAAA,CACA,GAAAT,EAAA,CACA,CAAA,EAEA,gBAAA,CACA,KAAA,MAAA,OAAA,CACA,CACA,CACA,ogCCuBA,MAAAH,EAAA,CACA,KAAA,QAEA,WAAA,CACA,aAAAQ,EACA,UAAAP,CACA,EAEA,MAAA,CACA,WAAA,CACA,KAAA,OACA,SAAA,EACA,EACA,YAAA,CACA,KAAA,OACA,QAAA,MACA,SAAA,EACA,EACA,UAAA,CACA,KAAA,OACA,QAAA,SACA,SAAA,EACA,EACA,YAAA,CACA,KAAA,OACA,QAAA,WACA,SAAA,EACA,EACA,KAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,MAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,KAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,IAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,WAAA,CACA,KAAA,OACA,QAAA,EACA,EACA,SAAA,CACA,QAAA,CACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,aAAAS,EAAA,EAAA,MAAA,EAAA,EACA,YAAAA,EAAA,EAAA,KAAA,EACA,YAAAA,EAAA,EAAA,KAAA,EACA,aAAA,GACA,WAAA,CAAA,EACA,aAAA,GACA,UAAA,GACA,QAAA,GACA,UAAA,CAAA,EACA,SAAA,CAAA,EACA,YAAA,EACA,SAAA,OACA,eAAA,OACA,CACA,EAEA,SAAA,CACA,KAAA,QAAA,KAAA,GACA,KAAA,UAAA,GACA,WAAA,IAAA,CACA,KAAA,UAAAG,GAAA,CACAA,GACA,KAAA,SAAA,CAEA,CAAA,CACA,EAAA,GAAA,IAEA,KAAA,iBAAA,KAAA,UAAA,IACA,KAAA,SAAA,EAEA,EAEA,SAAA,CACA,GAAAX,EAAA,CACA,iBACA,iBACA,UACA,WACA,CAAA,EAEA,YAAA,CACA,OAAAY,EAAA,KAAA,KAAA,KAAA,YAAA,KAAA,YAAA,CACA,EAEA,UAAA,CACA,OAAAC,EACA,KAAA,KACA,KAAA,MACA,KAAA,YACA,KAAA,YACA,CACA,EAEA,WAAA,CACA,OAAAC,EAAA,KAAA,KAAA,KAAA,YAAA,KAAA,WAAA,CACA,EAEA,mBAAA,CACA,IAAAC,EAAA,KAAA,UACA,OAAA,KAAA,WAAA,OAAA,IACAA,EAAAC,EAAA,KAAA,YAAA,KAAA,WAAA,MAAA,GAAA,CAAA,EACA,IAAAC,GAAAA,EAAA,EAAA,GAEAF,CACA,CACA,EAEA,QAAA,CACA,GAAAd,EAAA,CACA,YACA,eACA,kBACA,CAAA,EAEA,eAAAS,EAAA,CACA,OAAA,KAAA,gBACAQ,EAAAR,EAAA,KAAA,eAAA,EAAA,EAEAA,CACA,EAEA,UAAAS,EAAAC,EAAAC,EAAA,CACA,IAAAC,EAAAd,EAAA,GAAAW,KAAAC,KAAAC,IAAA,YAAA,EACA,OAAAA,EAAA,KAAAC,EAAAd,EAAA,GAAAW,KAAAC,MAAAC,IAAA,YAAA,GACA,CAAA,EAAA,CAAA,EAAA,SAAAC,EAAA,KAAA,CACA,EAEA,UAAA,CACA,KAAA,aACA,KAAA,UAAA,GACA,KAAA,aAAA,CACA,WAAA,KAAA,WACA,YAAA,KAAA,YACA,UAAA,KAAA,UACA,YAAA,KAAA,WACA,CAAA,EACA,KAAAC,GAAA,CACA,KAAA,SAAAA,EACA,KAAA,YAAA,OAAA,KAAA,KAAA,QAAA,EAAA,OACA,KAAA,mBAAA,EACA,KAAA,UAAA,IAAA,CACA,KAAA,UAAA,EACA,CAAA,CACA,CAAA,EAEA,EAEA,YAAAC,EAAAC,EAAA,CACA,KAAA,UAAAd,GAAA,CACA,KAAA,UAAA,GACAA,EACA,QAAA,MAAAA,CAAA,EAEA,KAAA,YACA,KAAA,iBAAA,CACA,WAAA,KAAA,WACA,YAAA,KAAA,YACA,SAAAa,EACA,WAAAC,CACA,CAAA,EACA,KAAAC,GAAA,CACA,KAAA,WAAAA,CACA,CAAA,CAGA,CAAA,CACA,EACA,cAAAjB,EAEA,UAAAa,EAAA,CACA,OAAAA,EAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CACA,EAEA,SAAAE,EAAAG,EAAA,GAAA,CACA,GAAAA,EAAA,IAAA,CACA,MAAAC,EACA,GAAAD,EAAA,QAAA,KAAA,UAAAA,EAAA,KAAA,KAAA,KAAA,UAAAA,EAAA,GAAA,IACA,OAAA,KAAA,SAAAH,CAAA,EAAA,IAAA,KAAA,SAAA,EAAAI,CAAA,CACA,SAAAD,EAAA,KAAA,CACA,MAAAE,EAAA,GAAAF,EAAA,QAAAA,EAAA,OACA,OAAA,KAAA,SAAAH,CAAA,EAAA,KAAA,KAAA,SAAA,EAAAK,CAAA,CACA,KAAA,CACA,MAAAC,EAAA,GAAAH,EAAA,QAAA,KAAA,UAAAA,EAAA,KAAA,IACA,OAAA,KAAA,SAAAH,CAAA,EAAA,MAAA,KAAA,SAAA,EAAAM,CAAA,CACA,CACA,EAEA,gBAAAN,EAAAG,EAAA,GAAA,CACA,IAAAI,EAAA,EACAC,EAAA,EACAC,EACA,GAAA,KAAA,cAAA,MAAA,CACA,MAAAH,EAAA,GAAAH,EAAA,QAAA,KAAA,UAAAA,EAAA,KAAA,IACAK,EAAA,KAAA,SAAAR,CAAA,EAAA,MAAA,KAAA,SAAA,EAAAM,CAAA,EACAG,EAAA,KAAA,SAAAT,CAAA,EAAA,IAAA,QAAAM,CAAA,CACA,SAAA,KAAA,cAAA,OAAA,CACA,MAAAI,EAAAP,EAAA,KACAK,EAAA,KAAA,SAAAR,CAAA,EAAA,KAAA,KAAA,SAAA,EAAAU,CAAA,EACAD,EAAA,KAAA,SAAAT,CAAA,EAAA,KAAA,QAAAU,CAAA,CACA,SAAA,KAAA,cAAA,QAAA,CACA,MAAAA,EAAAP,EAAA,KACAK,EAAA,KAAA,SAAAR,CAAA,EAAA,KAAA,KAAA,SAAA,EAAAU,CAAA,EACAD,EAAA,KAAA,SAAAT,CAAA,EAAA,MAAA,QAAAU,CAAA,CACA,CACA,OAAAH,EAAAC,EAAAC,EACAF,EAAAA,EAAA,QAAA,CAAA,EAAA,GACA,EAEA,cAAAP,EAAAL,EAAAC,EAAAC,EAAA,CACA,OACA,KAAA,OAAA,OAAA,WACA,KAAA,OAAA,OAAA,YAAAG,GACA,GAAA,KAAA,OAAA,OAAA,MAAA,GAAAL,GACA,GAAA,KAAA,OAAA,OAAA,OAAA,GAAAC,GACA,GAAA,KAAA,OAAA,OAAA,KAAA,GAAAC,CAEA,EAEA,eAAAG,EAAAL,EAAAgB,EAAA,CACA,OACA,KAAA,OAAA,OAAA,WACA,KAAA,OAAA,OAAA,YAAAX,GACA,GAAA,KAAA,OAAA,OAAA,MAAA,GAAAL,GACA,GAAA,KAAA,OAAA,OAAA,MAAA,GAAAgB,CAEA,EAEA,gBAAAX,EAAAL,EAAAC,EAAA,CACA,OACA,KAAA,OAAA,OAAA,WACA,KAAA,OAAA,OAAA,YAAAI,GACA,GAAA,KAAA,OAAA,OAAA,MAAA,GAAAL,GACA,GAAA,KAAA,OAAA,OAAA,OAAA,GAAAC,CAEA,EAEA,cAAAI,EAAAL,EAAAC,EAAAC,EAAA,CACA,MAAAe,EAAA,KAAA,SAAAZ,EAAA,CAAA,KAAAL,EAAA,MAAAC,EAAA,IAAAC,EAAA,EACA,OACAe,IAAA,MACA,KAAA,SAAAA,CAEA,EAEA,eAAAZ,EAAAL,EAAAgB,EAAA,CACA,OAAA,KAAA,SAAA,KAAA,SAAAX,EAAA,CAAA,KAAAL,EAAA,KAAAgB,EAAA,CACA,EAEA,gBAAAX,EAAAL,EAAAC,EAAA,CACA,OAAA,KAAA,SAAA,KAAA,SAAAI,EAAA,CAAA,KAAAL,EAAA,MAAAC,EAAA,CACA,EAEA,oBAAA,CACA,KAAA,YAAA,IACA,KAAA,eAAA,GAAA,KAAA,MAAA,cAAA,gBAEA,EAEA,gBAAA,CACA,MAAAL,EAAA,OAAA,KAAA,KAAA,QAAA,EACAsB,EAAAtB,EAAA,IAAAuB,GAAA,KAAA,UAAA,IAAAA,CAAA,CAAA,EACA,KAAA,YAAAC,EAAAF,CAAA,EACA,KAAA,UAAAtB,EAAA,KAAA,CAAAyB,EAAAC,IAAA,CACA,MAAAC,EAAA,KAAA,UAAA,IAAAF,CAAA,EAAA,UACAG,EAAA,KAAA,UAAA,IAAAF,CAAA,EAAA,UACA,OAAAC,EAAA,cAAAC,CAAA,CACA,CAAA,CACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,SAAA,uBAAA,UAAA,EACA,SAAA,GACA,WAAA,IAAA,CACA,KAAA,MAAA,KAAA,YAAA,GACA,EAAA,GAAA,CAEA,EAEA,aAAA,CACA,KAAA,YACA,KAAA,SAAA,CAEA,EAEA,UAAA,CACA,KAAA,eAAA,CACA,EAEA,YAAA,CACA,KAAA,YACA,KAAA,SAAA,CAEA,CACA,CACA,6uHCjYA,MAAA7C,EAAA,CACA,KAAA,mBACA,WAAA,CACA,aAAA8C,EACA,SAAAC,EACA,iBAAAC,EACA,iBAAAC,EACA,gBAAAC,EACA,MAAAC,EACA,YAAAC,EACA,UAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,WAAA,GACA,UAAA,SACA,iBAAA,CACA,CAAA,MAAA,KAAA,GAAA,cAAA,EAAA,MAAA,QAAA,EACA,CAAA,MAAA,KAAA,GAAA,eAAA,EAAA,MAAA,SAAA,EACA,CAAA,MAAA,KAAA,GAAA,aAAA,EAAA,MAAA,OAAA,CACA,EACA,mBAAA,CACA,CAAA,MAAA,KAAA,GAAA,WAAA,EAAA,MAAA,KAAA,EACA,CAAA,MAAA,KAAA,GAAA,YAAA,EAAA,MAAA,MAAA,EACA,CAAA,MAAA,KAAA,GAAA,aAAA,EAAA,MAAA,OAAA,CACA,EACA,mBAAA,CACA,CAAA,MAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,UAAA,EACA,CAAA,MAAA,KAAA,GAAA,qBAAA,EAAA,MAAA,UAAA,CACA,EACA,YAAA,WACA,YAAA3C,EAAA,EAAA,KAAA,EACA,aAAAA,EAAA,EAAA,MAAA,EAAA,EACA,YAAAA,EAAA,EAAA,KAAA,EACA,WAAAA,EAAA,EAAA,KAAA,EACA,cAAA,KAAA,iBAAA,EACA,YAAA,SAEA,kBAAA,MACA,YAAA,MAEA,UAAA,GACA,eAAA,GACA,qBAAA,GACA,SAAA,EACA,YAAA,GAAAA,EAAA,EAAA,MAAA,EAAA,IAEA,YAAA,CAAA,EACA,WAAA,GACA,SAAA,GACA,WAAA,GAAAA,IAAA,KAAA,GACA,CACA,EAEA,SAAA,CACA,KAAA,UAAA,CACA,EAEA,SAAA,CACA,GAAAR,EAAA,CACA,iBACA,oBACA,0BACA,gBACA,WACA,CAAA,EAEA,aAAA,CAEA,MAAAoD,EAAA5C,EAAA,EAAA,KAAA,EACA,OAAA6C,EAAA,KAAAD,CAAA,EACA,IAAAjC,IAAA,CACA,MAAAA,EACA,MAAA,GAAAA,GACA,EAAA,CACA,EAEA,cAAA,CACA,MAAAiC,EAAA,GAAA5C,EAAA,EAAA,KAAA,IACAY,EAAA,EACAkC,EAAA9C,IAAA,MAAA,EAAA,EACA,IAAA+C,EAAAF,EAAAjC,EAAA,EAAA,EACA,OAAAgC,IAAA,KAAA,aACAG,EAAAF,EAAAjC,EAAAkC,CAAA,GAEAC,EAAA,IAAAnC,IAAA,CACA,MAAAX,EAAAW,CAAA,EACA,MAAA,GAAAA,GACA,EAAA,CACA,CACA,EAEA,QAAA,CACA,GAAAnB,EAAA,CACA,sBACA,WACA,CAAA,EAEA,kBAAA,CACA,MAAAuB,EAAA,KAAA,OAAA,OAAA,UACA,OAAAA,GAAA,KAAA,UACA,KAAA,UAAA,IAAAA,CAAA,EAEA,CAAA,CAEA,EAEA,WAAA,CACA,KAAA,CAAA,MAAAJ,EAAA,KAAAD,EAAA,KAAAgB,EAAA,IAAAd,GAAA,KAAA,OAAA,OACA,CAAA,UAAAmC,EAAA,WAAAC,EAAA,YAAAC,CAAA,EAAA,KAAA,OAAA,MAYA,GAVA,KAAA,OAAA,KAAA,QAAA,MAAA,EAAA,IAAA,KAAA,YAAA,QACA,KAAA,OAAA,KAAA,QAAA,OAAA,EAAA,IAAA,KAAA,YAAA,SACA,KAAA,OAAA,KAAA,QAAA,KAAA,EAAA,IAAA,KAAA,YAAA,OAEA,KAAA,cAAA,KAAA,iBAAA,EACA,KAAA,kBAAA,KAAA,YACAF,IACA,KAAA,UAAAA,EACA,KAAA,YAAA,KAAA,WAEAC,EACA,KAAA,WAAAA,MACA,CACA,MAAAE,EAAA,SAAA,KAAA,kBAAA,kBACA,KAAA,WACA,aAAA,QAAAA,CAAA,GAAA,KAAA,cAAA,CAAA,EAAA,EACA,CACAD,IACA,KAAA,YAAAA,GAEAtC,IACA,KAAA,aAAA,OAAAA,CAAA,EACA,KAAA,YAAA,GAAAA,KAEAD,IACA,KAAA,YAAA,OAAAA,CAAA,EACA,KAAA,WAAA,GAAAA,KAEAgB,IACA,KAAA,YAAA,OAAAA,CAAA,EACA,KAAA,WAAA,GAAAA,KAEAd,IACA,KAAA,WAAA,OAAAA,CAAA,GAGA,KAAA,OAAA,KAAA,QAAA,QAAA,EAAA,GACA,KAAA,qBAAA,GACA,KAAA,oBAAA,CACA,SAAA,KAAA,cAAA,GACA,YAAA,KAAA,YACA,WAAA,KAAA,WACA,KAAAF,EACA,MAAAC,EACA,KAAAe,EACA,IAAAd,EACA,YAAA,KAAA,WACA,CAAA,EACA,KAAAK,GAAA,CACA,KAAA,qBAAA,GACA,KAAA,YAAAA,EACA,KAAA,aAAA,CACA,CAAA,GAEA,KAAA,aAAA,CAEA,EAEA,cAAA,CACA,KAAA,SAAA,EACA,EAEA,cAAA,CACA,KAAA,SAAA,EACA,EAEA,eAAAhB,EAAA,CACA,OAAA,KAAA,gBACAQ,EAAAR,EAAA,KAAA,eAAA,EAAA,EAEAA,CACA,EAEA,cAAA,CACA,MAAAa,EAAA,KAAA,MAAA,YAAA,EAAA,SACAqC,EAAA,CACA,SACA,KAAA,YACA,KAAA,WACA,EACA,KAAA,cAAA,OAAAA,EAAA,KAAA,KAAA,YAAA,EACA,MAAAC,EAAAC,EAAA,QAAAF,EAAA,KAAA,GAAA,CAAA,EACAG,EAAA,OAAA,KAAAxC,CAAA,EACA,IAAAC,GAAA,KAAA,UAAA,IAAAA,CAAA,CAAA,EACA,KAAA,CAAAgB,EAAAC,IAAAD,EAAA,UAAA,cAAAC,EAAA,SAAA,CAAA,EACAuB,EAAA,eACAH,EACAtC,EACAwC,EACA,KAAA,UACA,KAAA,YACAvD,EAAA,EAAA,KAAA,EACAA,EAAA,EAAA,MAAA,EAAA,EACA,KAAA,YACA,KAAA,aACA,KAAA,WACA,CACA,EAEA,eAAAyD,EAAA,CACA,KAAA,WAAAA,CACA,CACA,EAEA,MAAA,CACA,mBAAA,CACA,GAAA,KAAA,cAAA,KAAA,kBAAA,CACA,MAAAvD,EAAA,CACA,KAAA,SAAA,KAAA,oBACA,OAAA,CACA,KAAA,KAAA,WACA,EACA,MAAA,CACA,UAAA,KAAA,UACA,YAAA,KAAA,WACA,CACA,EACA,KAAA,oBAAA,QACAA,EAAA,OAAA,MAAA,KAAA,cAEA,KAAA,QAAA,KAAA,KAAA,eAAAA,CAAA,CAAA,CACA,CACA,EAEA,YAAA,CACA,MAAAS,EAAA,OAAA,KAAA,UAAA,EACAmC,EAAA9C,IAAA,MAAA,EAAA,EACA,GAAA,KAAA,cAAAW,EAAA,CACA,MAAAT,EAAA,CACA,KAAA,SAAA,KAAA,oBACA,OAAA,CACA,KAAAS,CACA,EACA,MAAA,CACA,UAAA,KAAA,UACA,YAAA,KAAA,WACA,CACA,EACA,KAAA,oBAAA,QACAT,EAAA,OAAA,MAAA,GAAA,KAAA,IAAA,OAAA,KAAA,WAAA,EAAA4C,CAAA,KAEA,KAAA,QAAA,KAAA,KAAA,eAAA5C,CAAA,CAAA,CACA,CACA,EAEA,aAAA,CACA,GAAA,KAAA,eAAA,OAAA,KAAA,WAAA,EAAA,CACA,MAAAA,EAAA,CACA,KAAA,YACA,OAAA,CACA,KAAA,KAAA,YACA,MAAA,OAAA,KAAA,WAAA,CACA,EACA,MAAA,CACA,UAAA,KAAA,UACA,YAAA,KAAA,WACA,CACA,EACA,KAAA,QAAA,KAAA,KAAA,eAAAA,CAAA,CAAA,CACA,CACA,EAEA,WAAA,CACA,KAAA,cAAA,KAAA,YACA,KAAA,OAAA,MAAA,YAAA,KAAA,WACA,KAAA,QAAA,KAAA,CACA,MAAA,CACA,UAAA,KAAA,UACA,YAAA,KAAA,WACA,CACA,CAAA,EAEA,KAAA,YAAA,KAAA,UAEA,EAEA,aAAA,CACA,KAAA,OAAA,MAAA,cAAA,KAAA,aACA,KAAA,QAAA,KAAA,CACA,MAAA,CACA,YAAA,KAAA,WACA,CACA,CAAA,CAEA,EAEA,YAAA,CACA,MAAAiD,EAAA,SAAA,KAAA,kBAAA,kBACA,aAAA,QAAAA,EAAA,KAAA,UAAA,EACA,KAAA,OAAA,MAAA,aAAA,KAAA,YACA,KAAA,QAAA,KAAA,CACA,MAAA,CACA,WAAA,KAAA,UACA,CACA,CAAA,CAEA,EAEA,mBAAA,CACA,KAAA,UAAA,GACA,KAAA,UAAA,IAAA,CACA,KAAA,UAAA,EACA,KAAA,UAAA,EACA,CAAA,CACA,EAEA,gBAAA,CACA,KAAA,UAAA,GACA,KAAA,UAAA,IAAA,CACA,KAAA,UAAA,EACA,KAAA,UAAA,EACA,CAAA,CACA,EAEA,QAAA,CACA,KAAA,UAAA,CACA,CACA,CACA"}