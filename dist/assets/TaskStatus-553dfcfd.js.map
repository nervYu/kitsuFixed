{"version":3,"file":"TaskStatus-553dfcfd.js","sources":["../../src/components/modals/EditTaskStatusModal.vue","../../src/components/lists/TaskStatusList.vue","../../src/components/pages/TaskStatus.vue"],"sourcesContent":["<template>\n<div :class=\"{\n  'modal': true,\n  'is-active': active\n}\">\n  <div class=\"modal-background\" @click=\"$emit('cancel')\" ></div>\n\n  <div class=\"modal-content\">\n    <div class=\"box\">\n\n      <h1 class=\"title\" v-if=\"isEditing()\">\n        {{ $t(\"task_status.edit_title\") }} {{ taskStatusToEdit.name }}\n      </h1>\n      <h1 class=\"title\" v-else>\n        {{ $t(\"task_status.new_task_status\") }}\n      </h1>\n\n      <form v-on:submit.prevent>\n        <text-field\n          ref=\"nameField\"\n          input-class=\"task-status-name\"\n          :label=\"$t('task_status.fields.name')\"\n          @enter=\"confirmClicked\"\n          v-model=\"form.name\"\n          v-focus\n          v-if=\"taskStatusToEdit.short_name !== 'todo'\"\n        />\n        <text-field\n          ref=\"shortNameField\"\n          input-class=\"task-status-short-name\"\n          :label=\"$t('task_status.fields.short_name')\"\n          :maxlength=\"8\"\n          @enter=\"confirmClicked\"\n          v-model=\"form.short_name\"\n          v-focus\n          v-if=\"taskStatusToEdit.short_name !== 'todo'\"\n        />\n        <boolean-field\n          :label=\"$t('task_status.fields.is_default')\"\n          @enter=\"confirmClicked\"\n          v-model=\"form.is_default\"\n        />\n        <boolean-field\n          :label=\"$t('task_status.fields.is_done')\"\n          @enter=\"confirmClicked\"\n          v-model=\"form.is_done\"\n          v-if=\"form.is_default === 'false'\"\n        />\n        <boolean-field\n          :label=\"$t('task_status.fields.is_retake')\"\n          @enter=\"confirmClicked\"\n          v-model=\"form.is_retake\"\n          v-if=\"form.is_default === 'false'\"\n        />\n        <boolean-field\n          :label=\"$t('task_status.fields.is_artist_allowed')\"\n          @enter=\"confirmClicked\"\n          v-model=\"form.is_artist_allowed\"\n        />\n        <boolean-field\n          :label=\"$t('task_status.fields.is_client_allowed')\"\n          @enter=\"confirmClicked\"\n          v-model=\"form.is_client_allowed\"\n        />\n        <boolean-field\n          :label=\"$t('task_status.fields.is_feedback_request')\"\n          @enter=\"confirmClicked\"\n          v-model=\"form.is_feedback_request\"\n          v-if=\"form.is_default === 'false'\"\n        />\n\n        <color-field\n          ref=\"colorField\"\n          :label=\"$t('task_status.fields.color')\"\n          :colors=\"colors\"\n          v-model=\"form.color\"\n          v-if=\"taskStatusToEdit.short_name !== 'todo'\"\n        />\n      </form>\n\n      <modal-footer\n        :error-text=\"$t('task_status.create_error')\"\n        :is-error=\"isError\"\n        :is-loading=\"isLoading\"\n        @confirm=\"confirmClicked\"\n        @cancel=\"$emit('cancel')\"\n      />\n    </div>\n\n  </div>\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { modalMixin } from '@/components/modals/base_modal'\nimport BooleanField from '@/components/widgets/BooleanField'\nimport ColorField from '@/components/widgets/ColorField'\nimport ModalFooter from '@/components/modals/ModalFooter'\nimport TextField from '@/components/widgets/TextField'\n\nexport default {\n  name: 'edit-task-status-modal',\n  mixins: [modalMixin],\n  components: {\n    BooleanField,\n    ColorField,\n    ModalFooter,\n    TextField\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    taskStatusToEdit: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data () {\n    return {\n      form: {\n        name: '',\n        short_name: '',\n        color: '$grey999',\n        is_done: 'false',\n        is_feedback_request: 'false',\n        is_default: 'false'\n      },\n      isRetakeOptions: [\n        { label: this.$t('main.yes'), value: 'true' },\n        { label: this.$t('main.no'), value: 'false' }\n      ],\n      isDoneOptions: [\n        { label: this.$t('main.yes'), value: 'true' },\n        { label: this.$t('main.no'), value: 'false' }\n      ],\n      isArtistAllowedOptions: [\n        { label: this.$t('main.yes'), value: 'true' },\n        { label: this.$t('main.no'), value: 'false' }\n      ],\n      colors: [\n        '#999999',\n        '#CCCCCC',\n        '#CC9999',\n        '#FF3860',\n        '#E81123',\n        '#E74C3C',\n        '#FF5722',\n        '#FF7043',\n        '#FFA000',\n        '#FBC02D',\n        '#AFB42B',\n        '#8BC34A',\n        '#66BB6A',\n        '#22D160',\n        '#4DB6AC',\n        '#03A9F4',\n        '#3273DC',\n        '#3498DB',\n        '#2980B9',\n        '#607D8B',\n        '#8764B8',\n        '#AB26FF',\n        '#E040FB',\n        '#FF80AB'\n      ]\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'taskStatus',\n      'taskStatusStatusOptions'\n    ])\n  },\n\n  methods: {\n    ...mapActions([\n    ]),\n\n    confirmClicked () {\n      this.$emit('confirm', this.form)\n    },\n\n    isEditing () {\n      return this.taskStatusToEdit && this.taskStatusToEdit.id\n    },\n\n    resetForm () {\n      if (this.taskStatusToEdit) {\n        this.form = {\n          name: this.taskStatusToEdit.name,\n          short_name: this.taskStatusToEdit.short_name,\n          color: this.taskStatusToEdit.color,\n          is_done: String(this.taskStatusToEdit.is_done),\n          is_retake: String(this.taskStatusToEdit.is_retake || false),\n          is_artist_allowed: String(this.taskStatusToEdit.is_artist_allowed),\n          is_client_allowed: String(this.taskStatusToEdit.is_client_allowed),\n          is_default: String(this.taskStatusToEdit.is_default || false),\n          is_feedback_request:\n            String(this.taskStatusToEdit.is_feedback_request || false)\n        }\n      }\n    }\n  },\n\n  watch: {\n    taskStatusToEdit () {\n      this.resetForm()\n    },\n\n    active () {\n      if (this.active) {\n        this.resetForm()\n        setTimeout(() => {\n          this.$refs.nameField.focus()\n        }, 100)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.modal-content .box p.text {\n  margin-bottom: 1em;\n}\n</style>\n","<template>\n<div class=\"data-list\">\n  <div class=\"datatable-wrapper\">\n    <table class=\"datatable\">\n      <thead class=\"datatable-head\">\n        <tr>\n          <th scope=\"col\" class=\"name\">\n            {{ $t('task_status.fields.name') }}\n          </th>\n          <th scope=\"col\" class=\"short-name\">\n            {{ $t('task_status.fields.short_name') }}\n          </th>\n          <th scope=\"col\" class=\"is-default\">\n            {{ $t('task_status.fields.is_default') }}\n          </th>\n          <th scope=\"col\" class=\"is-done\">\n            {{ $t('task_status.fields.is_done') }}\n          </th>\n          <th scope=\"col\" class=\"is-retake\">\n            {{ $t('task_status.fields.is_retake') }}\n          </th>\n          <th scope=\"col\" class=\"is-artist-allowed\">\n            {{ $t('task_status.fields.is_artist_allowed') }}\n          </th>\n          <th scope=\"col\" class=\"is-client-allowed\">\n            {{ $t('task_status.fields.is_client_allowed') }}\n          </th>\n          <th scope=\"col\" class=\"is-feedback-request\">\n            {{ $t('task_status.fields.is_feedback_request') }}\n          </th>\n          <th scope=\"col\" class=\"actions\"></th>\n        </tr>\n      </thead>\n      <tbody class=\"datatable-body\">\n        <tr class=\"datatable-row\" v-for=\"entry in entries\" :key=\"entry.id\">\n          <td class=\"name\">\n            {{ entry.name }}\n          </td>\n          <task-status-name class=\"short-name\" :entry=\"entry\" />\n          <boolean-cell class=\"is-default\" :value=entry.is_default />\n          <boolean-cell class=\"is-done\" :value=entry.is_done />\n          <boolean-cell class=\"is-retake\" :value=entry.is_retake />\n          <boolean-cell class=\"is-artist-allowed\" :value=entry.is_artist_allowed />\n          <boolean-cell class=\"is-client-allowed\" :value=entry.is_client_allowed />\n          <boolean-cell class=\"is-feedback-request\" :value=entry.is_feedback_request />\n          <row-actions-cell\n            :entry-id=\"entry.id\"\n            :hide-delete=\"entry.is_default === true\"\n            @edit-clicked=\"$emit('edit-clicked', entry)\"\n            @delete-clicked=\"$emit('delete-clicked', entry)\"\n          />\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isError\"\n  />\n\n  <p class=\"has-text-centered nb-task-status\">\n    {{ entries.length }} {{ $tc('task_status.number', entries.length) }}\n  </p>\n\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { formatListMixin } from '@/components/mixins/format'\nimport BooleanCell from '@/components/cells/BooleanCell'\nimport RowActionsCell from '@/components/cells/RowActionsCell'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport TaskStatusName from '@/components/cells/TaskStatusName'\n\nexport default {\n  name: 'task-status-list',\n  mixins: [formatListMixin],\n\n  props: {\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data () {\n    return {}\n  },\n  components: {\n    BooleanCell,\n    RowActionsCell,\n    TableInfo,\n    TaskStatusName\n  },\n  computed: {\n    ...mapGetters([\n    ])\n  },\n  methods: {\n    ...mapActions([\n    ])\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.datatable-body tr:first-child th,\n.datatable-body tr:first-child td {\n  border-top: 0;\n}\n\n.name {\n  width: 200px;\n  min-width: 200px;\n}\n\n.short-name {\n  width: 150px;\n  min-width: 150px;\n}\n\n.is-reviewable,\n.is-done,\n.is-default,\n.is-retake,\n.is-artist-allowed,\n.is-client-allowed,\n.is-feedback-request {\n  text-align: center;\n  width: 140px;\n  min-width: 140px;\n}\n</style>\n","<template>\n  <div class=\"task-status page fixed-page\">\n\n    <list-page-header\n      :title=\"$t('task_status.title')\"\n      :new-entry-label=\"$t('task_status.new_task_status')\"\n      @new-clicked=\"onNewClicked\"\n    />\n\n    <task-status-list\n      :entries=\"taskStatus\"\n      :is-loading=\"loading.list\"\n      :is-error=\"errors.list\"\n      @edit-clicked=\"onEditClicked\"\n      @delete-clicked=\"onDeleteClicked\"\n    />\n\n    <edit-task-status-modal\n      :active=\"modals.edit\"\n      :is-loading=\"loading.edit\"\n      :is-error=\"errors.edit\"\n      :task-status-to-edit=\"taskStatusToEdit\"\n      @cancel=\"modals.edit = false\"\n      @confirm=\"confirmEditTaskStatus\"\n    />\n\n    <delete-modal\n      :active=\"modals.del\"\n      :is-loading=\"loading.del\"\n      :is-error=\"errors.del\"\n      :text=\"deleteText()\"\n      :error-text=\"$t('task_status.delete_error')\"\n      @cancel=\"modals.del = false\"\n      @confirm=\"confirmDeleteTaskStatus\"\n    />\n\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport DeleteModal from '@/components/modals/DeleteModal'\nimport EditTaskStatusModal from '@/components/modals/EditTaskStatusModal'\nimport ListPageHeader from '@/components/widgets/ListPageHeader'\nimport TaskStatusList from '@/components/lists/TaskStatusList'\n\nexport default {\n  name: 'task-status',\n\n  components: {\n    DeleteModal,\n    EditTaskStatusModal,\n    ListPageHeader,\n    TaskStatusList\n  },\n\n  data () {\n    return {\n      taskStatusToDelete: null,\n      taskStatusToEdit: { color: '#000000' },\n      modals: {\n        edit: false,\n        del: false\n      },\n      loading: {\n        edit: false,\n        del: false,\n        list: false\n      },\n      errors: {\n        edit: false,\n        del: false,\n        list: false\n      }\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'taskStatus',\n      'taskStatusMap'\n    ])\n  },\n\n  created () {\n  },\n\n  methods: {\n    ...mapActions([\n      'deleteTaskStatus'\n    ]),\n\n    confirmEditTaskStatus (form) {\n      const isNew = !(this.taskStatusToEdit && this.taskStatusToEdit.id)\n      let action = 'newTaskStatus'\n      if (!isNew) {\n        action = 'saveTaskStatus'\n        form.id = this.taskStatusToEdit.id\n      }\n\n      this.loading.edit = true\n      this.loading.del = false\n      this.$store.dispatch(action, form)\n        .then(() => {\n          this.loading.edit = false\n          this.modals.edit = false\n        })\n        .catch((err) => {\n          console.error(err)\n          this.loading.edit = false\n          this.errors.edit = true\n        })\n    },\n\n    confirmDeleteTaskStatus () {\n      this.loading.del = true\n      this.errors.del = false\n      this.deleteTaskStatus(this.taskStatusToDelete)\n        .then(() => {\n          this.loading.del = false\n          this.modals.del = false\n        })\n        .catch((err) => {\n          console.error(err)\n          this.loading.del = false\n          this.errors.del = true\n        })\n    },\n\n    deleteText () {\n      const taskStatus = this.taskStatusToDelete\n      if (taskStatus) {\n        return this.$t('task_status.delete_text', { name: taskStatus.name })\n      } else {\n        return ''\n      }\n    },\n\n    onNewClicked () {\n      this.taskStatusToEdit = { color: '#000000' }\n      this.modals.edit = true\n    },\n\n    onEditClicked (taskStatus) {\n      this.taskStatusToEdit = taskStatus\n      this.modals.edit = true\n    },\n\n    onDeleteClicked (taskStatus) {\n      this.taskStatusToDelete = taskStatus\n      this.modals.del = true\n    }\n  },\n\n  watch: {\n  },\n\n  metaInfo () {\n    return {\n      title: `${this.$t('task_status.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n"],"names":["_sfc_main","modalMixin","BooleanField","ColorField","ModalFooter","TextField","mapGetters","mapActions","formatListMixin","BooleanCell","RowActionsCell","TableInfo","TaskStatusName","DeleteModal","EditTaskStatusModal","ListPageHeader","TaskStatusList","form","isNew","action","err","taskStatus"],"mappings":"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"}