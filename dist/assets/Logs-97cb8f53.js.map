{"version":3,"file":"Logs-97cb8f53.js","sources":["../../src/components/pages/logs/Events.vue","../../src/components/lists/PreviewFileList.vue","../../src/components/pages/logs/PreviewFiles.vue","../../src/components/pages/Logs.vue"],"sourcesContent":["<template>\n  <div class=\"mt1\">\n    <div class=\"flexrow\">\n      <date-field\n        class=\"flexrow-item\"\n        :disabled-dates=\"{from: today}\"\n        :label=\"$t('logs.current_date_label')\"\n        v-model=\"currentDate\"\n      />\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"refresh\"\n        @click=\"loadDayEvents\"\n      />\n      <span class=\"flexrow-item nb-events\">\n        {{ events.length }} {{ $t('logs.events') }}\n      </span>\n    </div>\n\n    <div class=\"mt2\" v-if=\"!isLoading && events.length === 0\">\n      {{ $t('logs.empty_list') }}\n    </div>\n    <div class=\"has-text-centered\" v-if=\"isLoading\" >\n      <spinner />\n    </div>\n    <div class=\"log-list\" v-else>\n      <div\n        class=\"mt05 event-line\"\n        :key=\"event.id\"\n        @click=\"selectLine(event)\"\n        v-for=\"event in events\"\n      >\n        <div>\n          <span class=\"date tag mr1\">{{ formatDate(event.created_at) }} </span>\n          <span\n            class=\"type tag\"\n            :title=\"event.name.split(':')[1]\"\n            :data-status=\"formatType(event)\"\n          >\n            {{ formatType(event) }}\n          </span>\n          <span class=\"name tag mr1\">{{ event.name.split(':')[0] }}</span>\n        </div>\n        <ul v-show=\"selectedEvents[event.id]\">\n          <li class=\"flexrow\">\n            <span class=\"key\">user</span>\n            <people-avatar\n              class=\"flexrow-item\"\n              :size=\"20\"\n              :person=\"personMap.get(event.user_id)\"\n              v-if=\"event.user_id\"\n            />\n            <people-name\n              class=\"flexrow-item\"\n              :person=\"personMap.get(event.user_id)\"\n              v-if=\"event.user_id\"\n            />\n          </li>\n          <li\n            class=\"variable\"\n            :key=\"event.id + '-' + key\"\n            v-for=\"key in Object.keys(event.data).sort()\"\n          >\n            <span class=\"key\">{{ key }}</span>\n            <a :href=\"getLink(event, key)\" v-if=\"isLink(key)\">\n              {{ event.data[key] }}\n            </a>\n            <span v-else>{{ event.data[key] }}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport moment from 'moment'\nimport Vue from 'vue/dist/vue'\n\nimport { formatFullDateWithRevertedTimezone } from '@/lib/time'\nimport { timeMixin } from '@/components/mixins/time'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport DateField from '@/components/widgets/DateField'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport PeopleName from '@/components/widgets/PeopleName'\nimport Spinner from '@/components/widgets/Spinner'\n\nexport default {\n  name: 'Events',\n  mixins: [timeMixin],\n\n  components: {\n    ButtonSimple,\n    DateField,\n    PeopleAvatar,\n    PeopleName,\n    Spinner\n  },\n\n  data () {\n    return {\n      currentDate: new Date(),\n      events: [],\n      isLoading: true,\n      selectedEvents: {}\n    }\n  },\n\n  mounted () {\n    this.loadDayEvents()\n  },\n\n  computed: {\n    ...mapGetters([\n      'personMap',\n      'productionMap',\n      'user'\n    ]),\n\n    today () {\n      return moment().toDate()\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'loadEvents'\n    ]),\n\n    formatType (event) {\n      return event.name.split(':')[1].substring(0, 3)\n    },\n\n    loadDayEvents () {\n      const before = moment(this.currentDate).add(1, 'days')\n      const after = moment(this.currentDate)\n      this.selectedEvents = {}\n      this.isLoading = true\n      this.loadEvents({\n        after: formatFullDateWithRevertedTimezone(after, this.timezone),\n        before: formatFullDateWithRevertedTimezone(before, this.timezone)\n      })\n        .then((events) => {\n          this.isLoading = false\n          this.events = events\n        })\n        .catch((err) => {\n          this.isLoading = false\n          console.error(err)\n        })\n    },\n\n    selectLine (event) {\n      Vue.set(this.selectedEvents, event.id, !this.selectedEvents[event.id])\n    },\n\n    isLink (key) {\n      const linkKeys = ['project_id', 'task_id']\n      return linkKeys.includes(key)\n    },\n\n    getLink (event, key) {\n      const productionId = event.data.project_id\n      const entityType = key.substring(0, key.length - 3)\n      if (entityType === 'project') {\n        return `/productions/${productionId}/news-feed`\n      } else {\n        const entityId = event.data[key]\n        return `/productions/${productionId}/${entityType}s/${entityId}`\n      }\n    }\n  },\n\n  watch: {\n    currentDate () {\n      this.loadDayEvents()\n    }\n  },\n\n  metaInfo () {\n    return {\n      title: `${this.$t('logs.title')} - Kitsu`\n    }\n  }\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .tag {\n    color: $white;\n    background: $dark-grey;\n  }\n\n  .nb-events {\n    color: $white;\n  }\n}\n\n.log-list {\n  margin-bottom: 2em;\n}\n\n.event-line {\n  cursor: pointer;\n\n  .tag {\n    border-radius: 4px;\n  }\n\n  .date {\n    font-weight: 500;\n  }\n\n  .type {\n    text-transform: uppercase;\n    min-width: 50px;\n  }\n\n  .type[data-status=\"new\"] {\n    color: white;\n    background: $green;\n  }\n\n  .type[data-status=\"upd\"] {\n    color: white;\n    background: $blue;\n  }\n\n  .type[data-status=\"add\"] {\n    color: white;\n    background: $dark-purple;\n  }\n\n  .type[data-status=\"del\"] {\n    color: white;\n    background: $red;\n  }\n\n  .type[data-status=\"sta\"] {\n    color: white;\n    background: $pink;\n  }\n\n  .type[data-status=\"set\"] {\n    background: $purple;\n  }\n\n  ul {\n    color: var(--text);\n    border-left: 3px solid $light-grey;\n    list-style-type: none;\n    margin: 1em 1em 2em 0.2em;\n    padding-left: 1em;\n\n    .key {\n      font-weight: 500;\n      width: 170px;\n      display: inline-block;\n    }\n  }\n}\n</style>\n","<template>\n<div class=\"data-list\">\n  <div style=\"overflow: hidden\">\n    <table class=\"datatable\" ref=\"headerWrapper\">\n      <thead class=\"datatable-head\">\n        <tr class=\"datatable-row-header\">\n          <th class=\"date\">\n            {{ $t('logs.preview_files.date') }}\n          </th>\n          <th class=\"production\">\n            {{ $t('logs.preview_files.production') }}\n          </th>\n          <th class=\"entity-name\">\n            {{ $t('logs.preview_files.entity_name') }}\n          </th>\n          <th class=\"task-type\">\n            {{ $t('logs.preview_files.task_type_id') }}\n          </th>\n          <th class=\"revision\">\n            {{ $t('logs.preview_files.revision') }}\n          </th>\n          <th class=\"status\">\n            {{ $t('logs.preview_files.status') }}\n          </th>\n          <th class=\"end-cell\"></th>\n        </tr>\n      </thead>\n    </table>\n  </div>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isError\"\n  />\n\n  <div v-scroll=\"onBodyScroll\" v-if=\"previewFiles.length > 0\">\n    <table class=\"datatable\">\n      <tbody class=\"datatable-body\">\n        <tr\n          :key=\"previewFile.id\"\n          class=\"datatable-row\"\n          @click=\"event => redirectToTask(event, previewFile)\"\n          v-for=\"previewFile in previewFiles\"\n        >\n          <td class=\"date\">\n            {{ formatDate(previewFile.created_at) }}\n          </td>\n          <td\n            class=\"production\"\n          >\n            <production-name-cell\n              :entry=\"productionMap.get(previewFile.project_id)\"\n            />\n          </td>\n          <td class=\"entity-name\">\n            {{ previewFile.full_entity_name }}\n          </td>\n          <task-type-name\n            class=\"task-type\"\n            :task-type=\"taskTypeMap.get(previewFile.task_type_id)\"\n          />\n          <td class=\"revision\">\n            {{ previewFile.revision }}\n          </td>\n          <td class=\"status\" :data-status=\"previewFile.status\">\n            {{ previewFile.status }}\n          </td>\n          <td class=\"end-cell has-text-right\">\n            <button-simple\n              class=\"mark-broken-button\"\n              text=\"Mark as broken\"\n              @click=\"$emit('mark-broken-clicked', previewFile.id)\"\n              v-if=\"previewFile.status === 'processing'\"\n            />\n          </td>\n       </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { formatListMixin } from '@/components/mixins/format'\nimport { getTaskPath } from '@/lib/path'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport ProductionNameCell from '@/components/cells/ProductionNameCell'\nimport TaskTypeName from '@/components/cells/TaskTypeName'\n\nexport default {\n  name: 'entity-task-list',\n  mixins: [formatListMixin],\n\n  components: {\n    ButtonSimple,\n    ProductionNameCell,\n    TableInfo,\n    TaskTypeName\n  },\n\n  props: {\n    previewFiles: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data () {\n    return {\n      currentTask: null\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'personMap',\n      'productionMap',\n      'taskTypeMap'\n    ])\n  },\n\n  methods: {\n    ...mapActions([\n      'loadTask',\n      'markBroken'\n    ]),\n\n    onBodyScroll (event, position) {\n      this.$refs.headerWrapper.style.left = `-${position.scrollLeft}px`\n    },\n\n    async redirectToTask (event, previewFile) {\n      if (\n        event.target.parentNode.className === 'mark-broken-button button' ||\n        event.target.className === 'mark-broken-button button'\n      ) return\n      const task = await this.loadTask({ taskId: previewFile.task_id })\n      return this.$router.push(getTaskPath(\n        task,\n        task.project,\n        task.project.production_type === 'tvshow',\n        task.episode,\n        this.taskTypeMap\n      ))\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.date {\n  max-width: 150px;\n  width: 150px;\n}\n\n.production {\n  max-width: 300px;\n  width: 300px;\n}\n\n.entity-name {\n  max-width: 300px;\n  width: 300px;\n}\n\n.task-type {\n  max-width: 150px;\n  width: 150px;\n}\n\n.revision {\n  max-width: 80px;\n  width: 80px;\n}\n\n.status {\n}\n\n.avatar-wrapper {\n  margin-right: 0.5em;\n}\n\n.datatable-head {\n  th {\n    border: 0;\n  }\n}\n\ntr:first-child {\n  td:first-child {\n    border-top-left-radius: 10px;\n  }\n  td:last-child {\n    border-top-right-radius: 10px;\n  }\n}\n\ntr:last-child {\n  td:first-child {\n    border-bottom-left-radius: 10px;\n  }\n  td:last-child {\n    border-bottom-right-radius: 10px;\n  }\n}\n\ntr {\n  cursor: pointer;\n}\n\ntd.status {\n  text-transform: uppercase;\n  font-weight: 500;\n}\n\ntd.status[data-status=\"broken\"] {\n  color: red;\n}\n\ntd.status[data-status=\"processing\"] {\n}\n</style>\n","<template>\n  <div class=\"mt1\">\n    <p class=\"flexrow\">\n      <em class=\"flexrow-item\">{{ $t('logs.preview_files.explaination') }}</em>\n      <span class=\"filler\"></span>\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"refresh\"\n        @click=\"reload\"\n      />\n    </p>\n    <template v-if=\"previewFiles.length === 0 && !previewFilesLoading\">\n      {{ $t('logs.preview_files.empty_list') }}\n    </template>\n    <template v-else>\n      <preview-file-list\n        :preview-files=\"previewFiles\"\n        :is-loading=\"previewFilesLoading\"\n        @mark-broken-clicked=\"markBrokenClicked\"\n      />\n    </template>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex'\n\nimport { timeMixin } from '@/components/mixins/time'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport PreviewFileList from '@/components/lists/PreviewFileList'\n\nexport default {\n  name: 'PreviewFiles',\n  mixins: [timeMixin],\n\n  components: {\n    ButtonSimple,\n    PreviewFileList\n  },\n\n  data () {\n    return {\n      previewFilesLoading: true,\n      previewFiles: []\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'personMap',\n      'taskTypeMap',\n      'user'\n    ]),\n\n    displayedPreviewFiles () {\n      return this.previewFiles.filter(\n        previewFile => previewFile.status !== 'ready'\n      )\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'getRunningPreviewFiles',\n      'markPreviewFileAsBroken'\n    ]),\n\n    async reload () {\n      this.previewFiles = []\n      this.previewFilesLoading = true\n      this.previewFiles = await this.getRunningPreviewFiles()\n      this.previewFilesLoading = false\n    },\n\n    async markBrokenClicked (previewFileId) {\n      const previewFile = this.previewFiles.find(p => p.id === previewFileId)\n      previewFile.status = 'broken'\n      await this.markPreviewFileAsBroken(previewFileId)\n    }\n  },\n\n  mounted () {\n    this.reload()\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .tag {\n    color: $white;\n    background: $dark-grey;\n  }\n}\n.tag {\n  border-radius: 4px;\n}\n\nem {\n  color: var(--text);\n}\n\n.date {\n  font-weight: 500;\n}\n\n.status {\n  text-transform: uppercase;\n  min-width: 50px;\n}\n\n.status[data-status=\"broken\"] {\n  color: white;\n  background: $dark-red;\n}\n\n.status[data-status=\"processing\"] {\n  color: white;\n  background: $blue;\n}\n\n</style>\n","<template>\n  <div class=\"logs fixed-page\">\n\n    <div class=\"tabs logs-tabs\">\n      <ul>\n        <li :class=\"{'is-active': isActiveTab('events')}\">\n          <a @click=\"activeTab = 'events'\">\n            {{ $t('logs.title')}}\n          </a>\n        </li>\n        <li :class=\"{'is-active': isActiveTab('preview_files')}\">\n          <a @click=\"activeTab = 'preview_files'\">\n            {{ $t('logs.preview_files.title')}}\n          </a>\n        </li>\n      </ul>\n    </div>\n\n    <Events v-if=\"isActiveTab('events')\" />\n    <PreviewFiles v-if=\"isActiveTab('preview_files')\" />\n  </div>\n</template>\n\n<script>\nimport Events from '@/components/pages/logs/Events'\nimport PreviewFiles from '@/components/pages/logs/PreviewFiles'\n\nexport default {\n  name: 'logs',\n\n  components: {\n    Events,\n    PreviewFiles\n  },\n\n  data () {\n    return {\n      activeTab: 'events'\n    }\n  },\n\n  mounted () {\n    if (this.$route.query.tab) {\n      this.activeTab = this.$route.query.tab\n    }\n  },\n\n  computed: {\n  },\n\n  methods: {\n    isActiveTab (tab) {\n      return this.activeTab === tab\n    }\n  },\n\n  watch: {\n    activeTab () {\n      if (this.$route.query.tab !== this.activeTab) {\n        this.$router.push({\n          query: {\n            tab: this.activeTab\n          }\n        })\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.fixed-page {\n  margin-top: 60px;\n  padding: 2em;\n  overflow: scroll;\n}\n\n.tabs.logs-tabs {\n  overflow: visible;\n  ul {\n    margin-left: 0;\n  }\n}\n</style>\n"],"names":["_sfc_main","timeMixin","ButtonSimple","DateField","PeopleAvatar","PeopleName","Spinner","mapGetters","moment","mapActions","event","before","after","formatFullDateWithRevertedTimezone","events","err","Vue","key","productionId","entityType","entityId","formatListMixin","ProductionNameCell","TableInfo","TaskTypeName","position","previewFile","task","getTaskPath","PreviewFileList","previewFileId","p","Events","PreviewFiles","tab"],"mappings":"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"}