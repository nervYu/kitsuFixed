{"version":3,"file":"ProductionAssetTypes-99db0965.js","sources":["../../src/components/lists/ProductionAssetTypeList.vue","../../src/components/pages/ProductionAssetTypes.vue"],"sourcesContent":["<template>\n<div class=\"data-list\">\n  <div\n    class=\"datatable-wrapper\"\n    ref=\"body\"\n    v-scroll=\"onBodyScroll\"\n  >\n    <table class=\"datatable\">\n      <thead class=\"datatable-head\">\n        <tr>\n          <th\n            scope=\"col\"\n            class=\"name datatable-row-header\"\n          >\n            {{ $t('asset_types.fields.name') }}\n          </th>\n          <th scope=\"col\" class=\"validation\">{{ $t('main.all') }}</th>\n          <th\n            scope=\"col\"\n            class=\"validation validation-cell\"\n            :key=\"columnId\"\n            v-for=\"columnId in validationColumns\"\n            v-if=\"!isLoading\"\n          >\n            <div\n              class=\"flexrow validation-content\"\n              :style=\"getValidationStyle(columnId)\"\n            >\n              <router-link\n                class=\"flexrow-item\"\n                :to=\"taskTypePath(columnId)\"\n                v-if=\"!isCurrentUserClient\"\n              >\n                {{ taskTypeMap.get(columnId).name }}\n              </router-link>\n              <span\n                class=\"flexrow-item\"\n                v-else\n              >\n                {{ taskTypeMap.get(columnId).name }}\n              </span>\n            </div>\n          </th>\n          <th scope=\"col\" class=\"actions\"></th>\n        </tr>\n      </thead>\n      <tbody\n        class=\"datatable-body\"\n        v-if=\"!isLoading\"\n      >\n        <tr\n          class=\"all-line datatable-row\"\n          v-if=\"showAll && !isEmptyList\"\n        >\n          <th scope=\"row\" class=\"name datatable-row-header\">\n            {{ $t('asset_types.all_asset_types') }}\n          </th>\n\n          <stats-cell\n            :colors=\"chartColors('all', 'all')\"\n            :data=\"chartData('all', 'all')\"\n            :displayMode=\"displayMode\"\n          />\n\n          <stats-cell\n            :style=\"getValidationStyle(columnId)\"\n            :key=\"'all-' + columnId\"\n            :colors=\"chartColors('all', columnId)\"\n            :data=\"chartData('all', columnId)\"\n            :displayMode=\"displayMode\"\n            v-for=\"columnId in validationColumns\"\n          />\n\n          <td class=\"actions\"></td>\n        </tr>\n\n        <tr\n          class=\"datatable-row\"\n          :key=\"entry.id\"\n          v-for=\"entry in entries\"\n        >\n\n          <td scope=\"row\" class=\"name datatable-row-header\">\n            {{ entry.name }}\n          </td>\n\n          <stats-cell\n            :colors=\"chartColors(entry.id, 'all')\"\n            :data=\"chartData(entry.id, 'all')\"\n            :displayMode=\"displayMode\"\n            v-if=\"isStats(entry.id, 'all')\"\n          />\n          <td\n            v-else\n          >\n          </td>\n\n          <stats-cell\n            :key=\"entry.id + columnId\"\n            :style=\"getValidationStyle(columnId)\"\n            :colors=\"chartColors(entry.id, columnId)\"\n            :data=\"chartData(entry.id, columnId)\"\n            :displayMode=\"displayMode\"\n            v-if=\"isStats(entry.id, columnId)\"\n            v-for=\"columnId in validationColumns\"\n          />\n          <td\n            :style=\"getValidationStyle(columnId)\"\n            v-else\n          >\n          </td>\n\n          <td class=\"actions\"></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <table-info\n    :is-loading=\"isLoading\"\n    :is-error=\"isError\"\n  />\n\n  <div\n    class=\"has-text-centered\"\n    v-if=\"isEmptyList && !isCurrentUserClient && !isLoading\"\n  >\n    <p class=\"info\">\n      <img src=\"../../assets/illustrations/empty_asset.png\" />\n    </p>\n    <p class=\"info\">{{ $t('assets.empty_list') }}</p>\n    <button-link\n      class=\"level-item big-button\"\n      :text=\"$t('assets.new_asset')\"\n      :path=\"newAssetPath\"\n    />\n  </div>\n  <div\n    class=\"has-text-centered\"\n    v-if=\"isEmptyList && isCurrentUserClient && !isLoading\"\n  >\n    <p class=\"info\">\n      <img src=\"../../assets/illustrations/empty_asset.png\" />\n    </p>\n    <p class=\"info\">{{ $t('assets.empty_list_client') }}</p>\n  </div>\n\n  <p\n    class=\"has-text-centered nb-asset-types\"\n    v-if=\"!isEmptyList && !isLoading\"\n  >\n    {{ displayedAssetTypesLength }}\n    {{ $tc('asset_types.number', displayedAssetTypesLength) }}\n  </p>\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { entityListMixin } from '@/components/mixins/entity_list'\nimport { getChartColors, getChartData } from '@/lib/stats'\nimport ButtonLink from '@/components/widgets/ButtonLink'\nimport StatsCell from '@/components/cells/StatsCell'\nimport TableInfo from '@/components/widgets/TableInfo'\n\nexport default {\n  name: 'production-asset-type-list',\n  mixins: [entityListMixin],\n\n  props: {\n    displayMode: {\n      type: String,\n      default: 'pie'\n    },\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    assetTypeStats: {\n      type: Object,\n      default: () => {}\n    },\n    showAll: {\n      type: Boolean,\n      default: false\n    },\n    validationColumns: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data () {\n    return {\n      busy: false,\n      lastSelection: null\n    }\n  },\n\n  components: {\n    ButtonLink,\n    StatsCell,\n    TableInfo\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetTypeSearchText',\n      'currentEpisode',\n      'currentProduction',\n      'displayedAssetTypesLength',\n      'isCurrentUserClient',\n      'isTVShow',\n      'taskTypeMap'\n    ]),\n\n    isEmptyList () {\n      return this.entries &&\n             this.entries.length === 0 &&\n             !this.isLoading &&\n             !this.isError &&\n             (!this.assetTypeSearchText || this.assetTypeSearchText.length === 0)\n    },\n\n    newAssetPath () {\n      const route = {\n        name: 'new-asset',\n        params: {\n          production_id: this.currentProduction.id\n        }\n      }\n\n      if (this.isTVShow && this.currentEpisode) {\n        route.name = 'episode-new-asset'\n        route.params.episode_id = this.currentEpisode.id\n      }\n\n      return route\n    }\n  },\n\n  methods: {\n    ...mapActions([\n    ]),\n\n    chartColors (entryId, columnId) {\n      return getChartColors(this.assetTypeStats, entryId, columnId)\n    },\n\n    chartData (entryId, columnId) {\n      return getChartData(this.assetTypeStats, entryId, columnId)\n    },\n\n    isStats (entryId, columnId) {\n      return this.assetTypeStats[entryId] &&\n             this.assetTypeStats[entryId][columnId]\n    },\n\n    onHeaderScroll (event, position) {\n      this.$refs.tableWrapper.scrollLeft = position.scrollLeft\n    },\n\n    onBodyScroll (event, position) {\n      this.$emit('scroll', position.scrollTop)\n    },\n\n    setScrollPosition (scrollPosition) {\n      if (this.$refs.body) {\n        this.$refs.body.scrollTop = scrollPosition\n      }\n    },\n\n    taskTypePath (taskTypeId) {\n      const route = {\n        name: 'task-type',\n        params: {\n          production_id: this.currentProduction.id,\n          task_type_id: taskTypeId,\n          type: 'assets'\n        }\n      }\n\n      if (this.isTVShow && this.currentEpisode) {\n        route.name = 'episode-task-type'\n        route.params.episode_id = this.currentEpisode.id\n      }\n\n      return route\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.datatable-body tr:first-child th,\n.datatable-body tr:first-child td {\n  border-top: 0;\n}\n.name {\n  min-width: 200px;\n  width: 200px;\n  font-weight: bold;\n}\n\n.name a {\n  color: inherit;\n}\n\ntd.name {\n  font-size: 1.2em;\n}\n\n.validation {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n  word-wrap: break-word;\n}\n\n.actions {\n  min-width: 100px;\n}\n\nth.actions {\n  padding: 0.4em;\n}\n\n.info img {\n  max-width: 80vh;\n}\n</style>\n","<template>\n  <div class=\"asset-types page fixed-page\">\n    <div class=\"asset-type-list-header page-header flexrow\">\n      <search-field\n        class=\"flexrow-item mt1\"\n        ref=\"asset-type-search-field\"\n        @change=\"onSearchChange\"\n        placeholder=\"ex: chars, agent327\"\n      />\n      <combobox\n        class=\"mb0 flexrow-item\"\n        :label=\"$t('statistics.display_mode')\"\n        locale-key-prefix=\"statistics.\"\n        :options=\"displayModeOptions\"\n        v-model=\"displayMode\"\n      />\n      <span class=\"filler\"></span>\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"refresh\"\n        :title=\"$t('main.reload')\"\n        @click=\"reset\"\n      />\n      <button-simple\n        class=\"flexrow-item\"\n        icon=\"download\"\n        @click=\"exportStatisticsToCsv\"\n      />\n    </div>\n\n    <production-asset-type-list\n      ref=\"asset-type-list\"\n      :entries=\"displayedAssetTypes\"\n      :is-loading=\"isAssetsLoading || initialLoading\"\n      :is-error=\"isAssetsLoadingError\"\n      :validation-columns=\"assetValidationColumns\"\n      :asset-type-stats=\"assetTypeStats\"\n      :display-mode=\"displayMode\"\n      :show-all=\"assetTypeSearchText.length === 0\"\n      @scroll=\"saveScrollPosition\"\n    />\n  </div>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { mapGetters, mapActions } from 'vuex'\nimport csv from '@/lib/csv'\nimport stringHelpers from '@/lib/string'\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport Combobox from '@/components/widgets/Combobox'\nimport ProductionAssetTypeList from '@/components/lists/ProductionAssetTypeList.vue'\nimport SearchField from '@/components/widgets/SearchField'\n\nexport default {\n  name: 'production-asset-types',\n\n  components: {\n    ButtonSimple,\n    Combobox,\n    ProductionAssetTypeList,\n    SearchField\n  },\n\n  data () {\n    return {\n      initialLoading: true,\n      displayMode: 'pie',\n      displayModeOptions: [\n        { label: 'pie', value: 'pie' },\n        { label: 'count', value: 'count' }\n      ]\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetTypeMap',\n      'assetTypeStats',\n      'assetTypeSearchText',\n      'assetTypeListScrollPosition',\n      'assetValidationColumns',\n      'currentEpisode',\n      'currentProduction',\n      'displayedAssetTypes',\n      'isAssetsLoading',\n      'isAssetsLoadingError',\n      'isTVShow',\n      'taskStatusMap',\n      'taskTypeMap'\n    ])\n  },\n\n  created () {\n  },\n\n  mounted () {\n    this.setDefaultSearchText()\n    this.setDefaultListScrollPosition()\n    setTimeout(() => {\n      this.reset()\n    }, 100)\n  },\n\n  methods: {\n    ...mapActions([\n      'computeAssetTypeStats',\n      'initAssetTypes',\n      'loadAssets',\n      'setAssetTypeSearch',\n      'setAssetTypeListScrollPosition',\n      'setLastProductionScreen'\n    ]),\n\n    setDefaultSearchText () {\n      if (this.assetTypeSearchText.length > 0) {\n        this.$refs['asset-type-search-field'].setValue(\n          this.assetTypeSearchText\n        )\n      }\n    },\n\n    setDefaultListScrollPosition () {\n      this.$refs['asset-type-list'].setScrollPosition(\n        this.assetTypeListScrollPosition\n      )\n    },\n\n    navigateToList () {\n      this.$router.push(this.assetTypesPath)\n    },\n\n    onSearchChange (event) {\n      const searchQuery = this.$refs['asset-type-search-field'].getValue()\n      this.setAssetTypeSearch(searchQuery)\n    },\n\n    saveScrollPosition (scrollPosition) {\n      this.setAssetTypeListScrollPosition(scrollPosition)\n    },\n\n    exportStatisticsToCsv () {\n      const nameData = [\n        moment().format('YYYYMMDD'),\n        this.currentProduction.name,\n        'asset_types',\n        'statistics'\n      ]\n      if (this.currentEpisode) {\n        nameData.splice(2, 0, this.currentEpisode.name)\n      }\n      const name = stringHelpers.slugify(nameData.join('_'))\n      csv.generateStatReports(\n        name,\n        this.assetTypeStats,\n        this.taskTypeMap,\n        this.taskStatusMap,\n        this.assetTypeMap,\n        this.countMode\n      )\n    },\n\n    reset () {\n      this.initialLoading = true\n      this.$refs['asset-type-search-field'].setValue('')\n      this.loadAssets()\n        .then(this.handleModalsDisplay)\n        .then(() => {\n          this.computeAssetTypeStats()\n          this.setAssetTypeListScrollPosition(0)\n          this.initialLoading = false\n        })\n    }\n  },\n\n  watch: {\n    currentProduction () {\n      if (!this.isTVShow) this.reset()\n    },\n\n    currentEpisode () {\n      if (this.isTVShow) this.reset()\n    }\n  },\n\n  metaInfo () {\n    return {\n      title: `${this.currentProduction.name} | ${this.$t('asset_types.production_title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n"],"names":["_sfc_main","entityListMixin","ButtonLink","StatsCell","TableInfo","mapGetters","route","mapActions","entryId","columnId","getChartColors","getChartData","event","position","scrollPosition","taskTypeId","ButtonSimple","Combobox","ProductionAssetTypeList","SearchField","searchQuery","nameData","moment","name","stringHelpers","csv"],"mappings":"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"}